{"version":3,"file":"566.94effbe939915231.js","mappings":"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","sources":["webpack://WebComponents/./runestone/matching/js/matching.js","webpack://WebComponents/./runestone/matching/js/xmlconversion.js"],"sourcesContent":["import RunestoneBase from \"../../common/js/runestonebase.js\";\nimport \"../css/matching.less\";\nimport { xmlToJson } from \"./xmlconversion.js\";\nexport class MatchingProblem extends RunestoneBase {\n    constructor(opts) {\n        super(opts)\n        let container = opts.orig;\n        this.containerDiv = opts.orig;\n        const script = container.querySelector('script');\n        if (script) {\n            let boxData;\n            try {\n                // the script is called xml but may also contain some html for the statement.\n                if (script.type == 'text/xml') {\n                    const xml = script.textContent;\n                    boxData = xmlToJson(xml);\n                } else {\n                    boxData = JSON.parse(script.textContent);\n                }\n                this.boxData = boxData;\n            } catch (err) {\n                console.error(\"Failed to parse boxData JSON:\", err);\n            }\n        }\n\n        this.divid = container.id;\n        this.boxesRenderedPromise = new Promise((resolve) => {\n            this.boxesRenderedResolve = resolve;\n        });\n        this.workspace = this.createWorkspace(container);\n        try {\n            this.statement = this.createStatement(container);\n        } catch (error) {\n            console.error(\"Error setting statement:\", error);\n        }   \n        this.connList = this.createConnList(container);\n        this.ariaLive = this.createAriaLive(container);\n        this.controlDiv = this.createControlDiv(container);\n        this.createHelpModal();\n\n        this.connections = [];\n        this.allBoxes = [];\n        this.selectedBox = null;\n        this.startBox = null;\n        this.tempLine = null;\n        this.useRunestoneServices = eBookConfig.useRunestoneServices;\n        this.graderactive = opts.graderactive || false;\n        this.init();\n        // ensure that boxes are rendered before checking server\n        // if boxes are not rendered then we may have dangling lines\n        // that are not connected to any boxes\n        this.boxesRenderedPromise.then(() => {\n            this.checkServer(\"matching\", true);\n        });\n    }\n\n    init() {\n        this.shuffle(this.boxData.left);\n        this.shuffle(this.boxData.right);\n\n        this.renderBoxes();\n        this.attachEvents();\n\n        if (window.MathJax && MathJax.typesetPromise) {\n            MathJax.typesetPromise();\n        }\n    }\n\n    // required elements for a Runestone component\n\n    checkCurrentAnswer() {\n        const correctAnswers = this.boxData.correctAnswers;\n        const actual = this.connections.map(conn => [\n            conn.fromBox.dataset.id,\n            conn.toBox.dataset.id\n        ]);\n\n        const correctMatches = correctAnswers.filter(expected =>\n            actual.some(given => given[0] === expected[0] && given[1] === expected[1])\n        );\n\n        const incorrectConnections = actual.filter(given =>\n            !correctAnswers.some(expected => expected[0] === given[0] && expected[1] === given[1])\n        );\n\n        this.correctCount = correctMatches.length;\n        this.incorrectCount = incorrectConnections.length;\n        this.missingCount = correctAnswers.length - this.correctCount;\n        this.denominator = this.correctCount + this.incorrectCount + this.missingCount;\n        this.scorePercent = this.denominator === 0 ? 0 : Math.max(0, Math.min(100, Math.round((this.correctCount / this.denominator) * 100)));\n\n    }\n\n    async logCurrentAnswer() {\n        let eventData = {\n            score: this.scorePercent,\n            percent: this.scorePercent/100.0,\n            correctCount: this.correctCount,\n            incorrectCount: this.incorrectCount,\n            missingCount: this.missingCount,\n            connections: this.connections.map(conn => ({\n                from: conn.fromBox.dataset.id,\n                to: conn.toBox.dataset.id\n            }))\n        }\n        eventData.event = \"matching\";\n        eventData.div_id = this.divid;\n        eventData.act = `score:${eventData.score} connections:${JSON.stringify(eventData.connections)}`;\n        eventData.correct = eventData.score === 100;\n        eventData.answer = JSON.stringify({ connections: eventData.connections });\n\n        await this.logBookEvent(eventData);\n\n    }\n\n    renderFeedback() {\n        this.connections.forEach(conn => {\n            const idPair = [conn.fromBox.dataset.id, conn.toBox.dataset.id];\n            const isCorrect = this.boxData.correctAnswers.some(expected =>\n                expected[0] === idPair[0] && expected[1] === idPair[1]\n            );\n            conn.line.classList.remove(\"correct\", \"incorrect\");\n            conn.line.classList.add(isCorrect ? \"correct\" : \"incorrect\");\n        });\n\n        this.connList.innerHTML = `<strong>Score: ${this.scorePercent}%</strong><br>`;\n        this.connList.innerHTML += `<br>Correct: ${this.correctCount}`;\n        this.connList.innerHTML += `<br>Incorrect: ${this.incorrectCount}`;\n        this.connList.innerHTML += `<br>Missing: ${this.missingCount}`;\n        if (this.scorePercent !== 100) {\n            this.connList.innerHTML += `<div class=\"match_feedback\"><strong>Feedback:</strong> ${this.boxData.feedback}</div>`;\n        }\n        this.queueMathJax(this.connList)\n    }\n\n    createStatement(container) {\n        const statement = document.createElement('div');\n        statement.className = 'statement';\n        statement.classList.add('match_question');\n        statement.innerHTML = this.boxData.statement;\n        container.insertBefore(statement, container.firstChild);\n        return statement;\n    }\n\n\n    restoreAnswers(data) {\n        // Recreate lines\n        if (data) {\n            this.connections = data.answer.connections.map(conn => ({\n                fromBox: this.allBoxes.find(box => box.dataset.id === conn.from),\n                toBox: this.allBoxes.find(box => box.dataset.id === conn.to)\n            }));\n            this.updateConnectionModel();\n            this.correct = data.correct;\n        }\n        this.connections.forEach(conn => {\n            const from = this.getRightBoxCenter(conn.fromBox);\n            const to = this.getLeftBoxCenter(conn.toBox);\n            const line = this.createLineElement(from.x, from.y, to.x, to.y);\n            line.fromBox = conn.fromBox;\n            line.toBox = conn.toBox;\n            this.svg.appendChild(line);\n            conn.line = line;\n        });\n\n    }\n    checkLocalStorage() {\n        if (this.graderactive) {\n            return;\n        }\n        const data = localStorage.getItem(this.divid);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            this.connections = parsedData.connections.map(conn => ({\n                fromBox: this.allBoxes.find(box => box.dataset.id === conn.from),\n                toBox: this.allBoxes.find(box => box.dataset.id === conn.to)\n            }));\n            this.updateConnectionModel();\n            this.correctCount = parsedData.correctCount;\n            this.incorrectCount = parsedData.incorrectCount;\n            this.missingCount = parsedData.missingCount;\n            this.scorePercent = parsedData.score;\n            this.restoreAnswers();\n            this.renderFeedback();\n        }\n    }\n    setLocalStorage() {\n        const data = {\n            connections: this.connections.map(conn => ({\n                from: conn.fromBox.dataset.id,\n                to: conn.toBox.dataset.id\n            })),\n            score: this.scorePercent,\n            correctCount: this.correctCount,\n            incorrectCount: this.incorrectCount,\n            missingCount: this.missingCount\n        };\n        localStorage.setItem(this.divid, JSON.stringify(data));\n    }\n\n    disableInteraction() { }\n\n    createWorkspace(container) {\n        const workspace = document.createElement('div');\n        workspace.className = 'matching-workspace';\n\n        const leftColumn = document.createElement('div');\n        leftColumn.className = 'left-column';\n        this.leftColumn = leftColumn;\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.classList.add('connector-svg');\n        this.svg = svg;\n\n        const rightColumn = document.createElement('div');\n        rightColumn.className = 'right-column';\n        this.rightColumn = rightColumn;\n        workspace.appendChild(leftColumn);\n        workspace.appendChild(svg);\n        workspace.appendChild(rightColumn);\n\n        container.insertBefore(workspace, container.firstChild);\n        return workspace;\n    }\n\n    createConnList(container) {\n        const connList = document.createElement('div');\n        connList.className = 'conn-list';\n        connList.innerHTML = \"<strong>Connections:</strong><br>\";\n        container.appendChild(connList);\n        return connList;\n    }\n\n    createAriaLive(container) {\n        const ariaLive = document.createElement('div');\n        ariaLive.className = 'aria-live';\n        ariaLive.setAttribute('aria-live', 'polite');\n        ariaLive.setAttribute('aria-atomic', 'true');\n        container.appendChild(ariaLive);\n        return ariaLive;\n    }\n\n    createControlDiv(container) {\n        const controlDiv = document.createElement('div');\n        controlDiv.className = 'control-div';\n        const gradeBtn = document.createElement('button');\n        gradeBtn.className = 'grade-button';\n        gradeBtn.textContent = 'Check Me';\n        gradeBtn.classList.add('btn', 'btn-success');\n        const resetBtn = document.createElement('button');\n        resetBtn.className = 'reset-button';\n        resetBtn.textContent = 'Reset';\n        resetBtn.classList.add('btn', 'btn-default');\n        // add Help button\n        const helpBtn = document.createElement('button');\n        helpBtn.className = 'help-button';\n        helpBtn.textContent = '?';                     // changed from 'Help'\n        helpBtn.setAttribute('aria-label', 'Help');    // accessible label\n        controlDiv.appendChild(gradeBtn);\n        controlDiv.appendChild(resetBtn);\n        controlDiv.appendChild(helpBtn);\n        container.appendChild(controlDiv);\n\n        // events\n        gradeBtn.addEventListener('click', () => this.gradeConnections());\n        resetBtn.addEventListener('click', () => this.resetConnections());\n        helpBtn.addEventListener('click', () => this.showHelp());\n        this.gradeBtn = gradeBtn;\n        this.resetBtn = resetBtn;\n        this.helpBtn = helpBtn;\n        return controlDiv;\n    }\n\n    createHelpModal() {\n        this.helpModal = document.createElement('div');\n        this.helpModal.className = 'help-modal';\n        const text = `<p>Click and drag between boxes to create connections.</p>\n        <p>Use the tab key to navigate to a box and press Enter to select the box.  Then tab to the connecting box and press Enter to create a connection between the two selected boxes.</p>\n        <p>Click on a connection line to remove it. You can also use the tab key to select lines.  Press the delete key to remove a selected line.</p>\n        <p>Click the \"Check Me\" button to check your connections, and save your work.</p>\n        <p>Click the \"Reset\" button to clear all connections.</p>`\n\n        this.helpModal.innerHTML = `\n          <div class=\"help-modal-content\">\n            <button class=\"help-close\">&times;</button>\n            <div class=\"help-text\">${text}</div>\n          </div>`;\n        this.containerDiv.appendChild(this.helpModal);\n        this.helpModal.querySelector('.help-close')\n            .addEventListener('click', () => this.hideHelp());\n    }\n\n    showHelp() {\n        this.helpModal.style.display = 'flex';\n    }\n\n    hideHelp() {\n        this.helpModal.style.display = 'none';\n    }\n\n    // Utility functions\n    shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    renderBoxes() {\n        this.boxData.left.forEach(({ id, label }) => {\n            const box = this.createBox(id, label, \"drag\");\n            this.leftColumn.appendChild(box);\n            this.allBoxes.push(box);\n        });\n\n        this.boxData.right.forEach(({ id, label }) => {\n            const box = this.createBox(id, label, \"drop\");\n            this.rightColumn.appendChild(box);\n            this.allBoxes.push(box);\n        });\n\n        const imgs = Array.from(this.workspace.querySelectorAll('img'));\n        if (imgs.length === 0) {\n            this.boxesRenderedResolve();\n        }\n        // Wait for all images to load before resolving the promise\n        const imgPromises = imgs.map(img => {\n            if (typeof img.decode === 'function') {\n                return img.decode();\n            }\n            if (img.complete && img.naturalWidth !== 0) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                img.addEventListener('load', () => resolve());\n                img.addEventListener('error', () => resolve());\n            });\n        });\n\n        Promise.all(imgPromises).then(() => {\n            this.boxesRenderedResolve();\n        });\n    }\n\n    createBox(id, label, role) {\n        const div = document.createElement('div');\n        div.className = 'box';\n        div.dataset.id = id;\n        div.dataset.role = role;\n        div.innerHTML = label;\n        div.tabIndex = 0;\n        div.setAttribute('role', 'button');\n        div.setAttribute('aria-label', `${role === \"drag\" ? \"Draggable\" : \"Droppable\"}: ${label}`);\n        return div;\n    }\n\n    getCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left + elRect.width / 2,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n\n    getRightBoxCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left + elRect.width,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n    getLeftBoxCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n\n    createLineElement(x1, y1, x2, y2) {\n        const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        line.setAttribute(\"x1\", x1);\n        line.setAttribute(\"y1\", y1);\n        line.setAttribute(\"x2\", x2);\n        line.setAttribute(\"y2\", y2);\n        line.setAttribute(\"class\", \"line\");\n        line.setAttribute(\"tabindex\", \"0\"); // Make the line focusable\n        line.setAttribute(\"focusable\", \"true\"); // Make the line focusable\n        line.setAttribute(\"role\", \"button\"); // Add ARIA role for accessibility\n        line.setAttribute(\"aria-label\", \"Connection line. Press Delete to remove.\"); // Add ARIA label\n\n\n        line.addEventListener(\"click\", () => {\n            this.removeLine(line);\n        });\n\n        line.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Delete\" || e.key === \"Backspace\") {\n                e.preventDefault();\n                this.removeLine(line);\n            }\n        });\n\n        return line;\n    }\n\n    removeLine(line) {\n        this.svg.removeChild(line);\n        const index = this.connections.findIndex(conn =>\n            (conn.fromBox === line.fromBox && conn.toBox === line.toBox) ||\n            (conn.fromBox === line.toBox && conn.toBox === line.fromBox)\n        );\n        if (index !== -1) this.connections.splice(index, 1);\n        this.updateConnectionModel();\n    }\n\n    isConnected(a, b) {\n        return this.connections.some(conn =>\n            (conn.fromBox === a && conn.toBox === b) ||\n            (conn.fromBox === b && conn.toBox === a)\n        );\n    }\n\n    createPermanentLine(fromBox, toBox) {\n        const fromRole = fromBox.dataset.role;\n        const toRole = toBox.dataset.role;\n\n        if (fromRole === toRole) {\n            alert(\"You can only connect a draggable to a droppable.\");\n            return;\n        }\n\n        // we should always store connections as drag to drop\n        // even if the user connects drop to drag\n        if (fromBox.dataset.role === \"drop\") {\n            [fromBox, toBox] = [toBox, fromBox];\n        }\n        if (this.isConnected(fromBox, toBox)) return;\n\n        const from = this.getRightBoxCenter(fromBox);\n        const to = this.getLeftBoxCenter(toBox);\n        const line = this.createLineElement(from.x, from.y, to.x, to.y);\n\n        line.fromBox = fromBox;\n        line.toBox = toBox;\n\n        this.svg.appendChild(line);\n        this.connections.push({ fromBox, toBox, line });\n        this.updateConnectionModel();\n        this.isAnswered = true;\n\n        if (this.ariaLive) {\n            this.ariaLive.textContent = `Connected ${fromBox.textContent} to ${toBox.textContent}`;\n        }\n    }\n\n    updateConnectionModel() {\n        this.connList.innerHTML = \"<strong>Connections:</strong><br>\";\n        this.connections.forEach(conn => {\n            const fromLabel = conn.fromBox.textContent;\n            let toLabel = conn.toBox.textContent;\n            if (!toLabel) {\n                toLabel = conn.toBox.querySelector(\"img\").alt // innerHTML preserves everything inside <label>…</label>       \n            }\n            const line = document.createElement('div');\n            line.className = 'conn-entry';\n            line.textContent = `${fromLabel} → ${toLabel}`;\n            this.connList.appendChild(line);\n        });\n    }\n\n    /*\n    * This method grades the connections made by the user.\n    * It checks the current answer against the correct answers,\n    * renders feedback, and logs the current answer.\n    * It also updates the local storage with the current state.\n    * It is called when the user clicks the \"Grade\" button.\n    */\n    gradeConnections() {\n        this.checkCurrentAnswer();\n        this.renderFeedback();\n        this.logCurrentAnswer();\n        this.setLocalStorage();\n    }\n\n    resetConnections() {\n        this.connections.forEach(conn => {\n            if (conn.line && conn.line.parentNode === this.svg) {\n                this.svg.removeChild(conn.line);\n            }\n        });\n        this.connections.length = 0;\n        this.updateConnectionModel();\n        if (this.ariaLive) this.ariaLive.textContent = \"All connections have been cleared.\";\n    }\n\n    attachEvents() {\n        this.allBoxes.forEach(box => {\n            box.addEventListener(\"pointerdown\", e => {\n                if (e.ctrlKey || e.metaKey || true) {\n                    e.preventDefault();\n                    this.startBox = box;\n                    const from = this.getRightBoxCenter(this.startBox);\n                    this.tempLine = this.createLineElement(from.x, from.y, from.x, from.y);\n                    this.tempLine.setAttribute(\"stroke\", \"gray\");\n                    this.tempLine.setAttribute(\"stroke-dasharray\", \"4\");\n                    this.svg.appendChild(this.tempLine);\n\n                    document.addEventListener(\"pointermove\", this.updateTempLine);\n                    document.addEventListener(\"pointerup\", this.finishConnection);\n                }\n            });\n\n            box.addEventListener(\"keydown\", e => {\n                if (e.key === \"Enter\") {\n                    e.preventDefault();\n                    if (!this.selectedBox) {\n                        this.selectedBox = box;\n                        box.classList.add(\"selected\");\n                    } else {\n                        if (box !== this.selectedBox) this.createPermanentLine(this.selectedBox, box);\n                        this.selectedBox.classList.remove(\"selected\");\n                        this.selectedBox = null;\n                        const currentIndex = this.allBoxes.indexOf(box);\n                        const next = this.allBoxes[currentIndex + 1];\n                        if (next) next.focus();\n                        else this.allBoxes[0].focus();\n                    }\n                }\n            });\n\n            box.addEventListener(\"mouseenter\", () => {\n                this.connections.forEach(conn => {\n                    if (conn.fromBox === box || conn.toBox === box) {\n                        conn.line.classList.add(\"highlighted\");\n                        conn.line.classList.remove(\"faded\");\n                    } else {\n                        conn.line.classList.add(\"faded\");\n                        conn.line.classList.remove(\"highlighted\");\n                    }\n                });\n            });\n\n            box.addEventListener(\"mouseleave\", () => {\n                this.connections.forEach(conn => {\n                    conn.line.classList.remove(\"highlighted\", \"faded\");\n                });\n            });\n        });\n\n        const gradeBtn = this.containerDiv.querySelector('.grade-button');\n        const resetBtn = this.containerDiv.querySelector('.reset-button');\n        if (gradeBtn) gradeBtn.addEventListener('click', () => this.gradeConnections());\n        if (resetBtn) resetBtn.addEventListener('click', () => this.resetConnections());\n\n        window.addEventListener(\"resize\", () => {\n            this.connections.forEach(conn => {\n                const from = this.getRightBoxCenter(conn.fromBox);\n                const to = this.getLeftBoxCenter(conn.toBox);\n                conn.line.setAttribute(\"x1\", from.x);\n                conn.line.setAttribute(\"y1\", from.y);\n                conn.line.setAttribute(\"x2\", to.x);\n                conn.line.setAttribute(\"y2\", to.y);\n            });\n        });\n    }\n\n    updateTempLine = (e) => {\n        e.preventDefault();\n        if (!this.startBox || !this.tempLine) return;\n        const from = this.getRightBoxCenter(this.startBox);\n        this.tempLine.setAttribute(\"x1\", from.x);\n        this.tempLine.setAttribute(\"y1\", from.y);\n        const containerRect = this.workspace.getBoundingClientRect();\n        const x = e.clientX - containerRect.left;\n        const y = e.clientY - containerRect.top;\n\n        this.tempLine.setAttribute(\"x2\", x);\n        this.tempLine.setAttribute(\"y2\", y);\n    };\n\n    finishConnection = (e) => {\n        e.preventDefault();\n        if (this.tempLine) {\n            this.svg.removeChild(this.tempLine);\n            this.tempLine = null;\n        }\n\n        // the target element is the element under the pointer\n        // when the pointer is released\n        // this is not the same as e.target which may be the box or it may be the svg \n        // or it may be the line, so we do it this way instead of checking to see if the box contains\n        // e.target.  const endBox = this.allBoxes.find(box => box.contains(e.target) && box !== this.startBox);\n        const pointX = e.clientX || (e.changedTouches && e.changedTouches[0].clientX);\n        const pointY = e.clientY || (e.changedTouches && e.changedTouches[0].clientY);\n        const targetElement = document.elementFromPoint(pointX, pointY);\n\n        const endBox = this.allBoxes.find(box =>\n            box.contains(targetElement) && box !== this.startBox\n        );\n\n        if (this.startBox && endBox) this.createPermanentLine(this.startBox, endBox);\n\n        this.startBox = null;\n        document.removeEventListener(\"pointermove\", this.updateTempLine);\n        document.removeEventListener(\"pointerup\", this.finishConnection);\n    }\n}\n\n\n\n\n// Register the component with Runestone \ndocument.addEventListener(\"runestone:login-complete\", () => {\n    document.querySelectorAll('[data-component=\"matching\"]').forEach(container => {\n        if (!container.closest(\"[data-component=timedAssessment]\")) {\n            let opts = { orig: container }\n            window.componentMap[container.id] = new MatchingProblem(opts);\n        }\n    });\n});\n\n// Add component factory initialization\nif (typeof window.component_factory === \"undefined\") {\n    window.component_factory = {};\n}\n\nwindow.component_factory.matching = function (opts) {\n    return new MatchingProblem(opts);\n};","export function xmlToJson(xmlString) {\n  // 1) Parse the XML string\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(xmlString, 'text/html');\n  const err = doc.querySelector('parsererror');\n  if (err) {\n    throw new Error('XML parse error: ' + err.textContent);\n  }\n\n  // 2) Helper to extract [ { id, label }, … ] from <premise> or <response>\n  function itemsFrom(tagName) {\n    return Array.from(doc.querySelectorAll(tagName))\n      .map(el => {\n        const idEl = el.querySelector('id');\n        const labelEl = el.querySelector('label');\n        return {\n          id: idEl ? idEl.textContent.trim() : '',\n          // innerHTML preserves any markup inside the label\n          label: labelEl ? labelEl.innerHTML.trim() : ''\n        };\n      });\n  }\n\n  // 3) Helper to build [ [p, r], [p, r], … ]\n  function correctAnswersFrom() {\n    return Array.from(doc.querySelectorAll('edge'))\n      .map(edgeEl => {\n        const labs = Array.from(edgeEl.querySelectorAll('label'));\n        // take first two <label> children as the pair\n        return labs.slice(0, 2).map(l => l.textContent.trim());\n      });\n  }\n\n  function getStatement() {\n    const statementEl = doc.querySelector('statement');\n    if (statementEl) {\n      return statementEl.innerHTML.trim();\n    }\n    return '';\n  }\n\n  function getFeedback() {\n    const feedbackEl = doc.querySelector('feedback');\n    if (feedbackEl) {\n      return feedbackEl.innerHTML.trim();\n    }\n    return '';\n  }\n\n  // 4) Return in { left, right, correctAnswers } shape\n  return {\n    statement: getStatement(),\n    feedback: getFeedback(),\n    left: itemsFrom('premise'),\n    right: itemsFrom('response'),\n    correctAnswers: correctAnswersFrom()\n  };\n}\n"],"names":["MatchingProblem","constructor","opts","super","container","orig","this","containerDiv","script","querySelector","boxData","type","xmlString","doc","DOMParser","parseFromString","err","Error","textContent","itemsFrom","tagName","Array","from","querySelectorAll","map","el","idEl","labelEl","id","trim","label","innerHTML","statement","statementEl","getStatement","feedback","feedbackEl","getFeedback","left","right","correctAnswers","edgeEl","slice","l","xmlToJson","JSON","parse","console","error","divid","boxesRenderedPromise","Promise","resolve","boxesRenderedResolve","workspace","createWorkspace","createStatement","connList","createConnList","ariaLive","createAriaLive","controlDiv","createControlDiv","createHelpModal","connections","allBoxes","selectedBox","startBox","tempLine","useRunestoneServices","eBookConfig","graderactive","init","then","checkServer","shuffle","renderBoxes","attachEvents","window","MathJax","typesetPromise","checkCurrentAnswer","actual","conn","fromBox","dataset","toBox","correctMatches","filter","expected","some","given","incorrectConnections","correctCount","length","incorrectCount","missingCount","denominator","scorePercent","Math","max","min","round","logCurrentAnswer","eventData","score","percent","to","div_id","act","stringify","correct","answer","logBookEvent","renderFeedback","forEach","idPair","isCorrect","line","classList","remove","add","queueMathJax","document","createElement","className","insertBefore","firstChild","restoreAnswers","data","find","box","updateConnectionModel","getRightBoxCenter","getLeftBoxCenter","createLineElement","x","y","svg","appendChild","checkLocalStorage","localStorage","getItem","parsedData","setLocalStorage","setItem","disableInteraction","leftColumn","createElementNS","rightColumn","setAttribute","gradeBtn","resetBtn","helpBtn","addEventListener","gradeConnections","resetConnections","showHelp","helpModal","hideHelp","style","display","array","i","j","floor","random","createBox","push","imgs","imgPromises","img","decode","complete","naturalWidth","all","role","div","tabIndex","getCenter","elRect","getBoundingClientRect","containerRect","width","top","height","x1","y1","x2","y2","removeLine","e","key","preventDefault","removeChild","index","findIndex","splice","isConnected","a","b","createPermanentLine","alert","isAnswered","fromLabel","toLabel","alt","parentNode","ctrlKey","metaKey","updateTempLine","finishConnection","currentIndex","indexOf","next","focus","clientX","clientY","pointX","changedTouches","pointY","targetElement","elementFromPoint","endBox","contains","removeEventListener","closest","componentMap","component_factory","matching"],"sourceRoot":""}