// Numbas version: exam_results_page_options
{"name": "Chapter 3 Exercises", "metadata": {"description": "<p>End of chapter exercises for <a href=\"http://engineeringstatics.org\"><em>Engineering Statics: Open and Interactive</em></a>&nbsp;</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "duration": 0, "percentPass": 0, "showQuestionGroupNames": true, "shuffleQuestionGroups": false, "showstudentname": true, "question_groups": [{"name": "Particle Equilibrium", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["Equilibrium equation method", "", "Four forces", "Hanging weight", "Ball in a trough", " Rope and pulley", ""], "variable_overrides": [[], [], [], [], [], [], []], "questions": [{"name": "Equilibrium of a particle - equilibrium equation method", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Equilibrium", "equilibrium", "Mechanics", "mechanics", "particle", "Particle", "Statics", "statics", "vectors"], "metadata": {"description": "<p>Find forces required to hold a particle in equilibrium when subjected to a downward load. &nbsp;Directions of the reactions are given. &nbsp;</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{geogebra_applet('uwmn9de6',[['alpha', alpha+'&deg;'],['theta', &nbsp;theta+'&deg;']])}</p>\n<p>Three forces act on particle $A$<em>&nbsp;</em>as shown. Use the equations of equilibrium to determine the magnitudes of $B$&nbsp;and <em>$C$ &nbsp;</em>when load $W =$ {qty(W,unit)}.</p>", "advice": "<p><strong>Knowns:</strong></p>\n<p>$W = \\var{qty(W,unit)}$, $\\alpha = \\var{alpha}&deg;$ and $\\theta=\\var{theta}&deg;$.</p>\n<p><strong>Apply equations of equilibrium</strong></p>\n<p>$\\begin{align}<br/>\\Sigma F_x &amp;= 0 &amp; \\Sigma F_y &amp;= 0 \\\\-B_x + C_x &amp;= 0 &amp; B_y + C_y -W &amp;= 0\\\\<br/>B \\sin\\alpha &amp; = C \\cos\\theta &amp; B \\cos\\alpha + C \\sin\\theta &amp; = W \\\\<br/>B &amp;= C \\left(\\frac{\\cos\\theta}{\\sin\\alpha}\\right)\\\\<br/>B &amp;= \\var{K_1}\\, C\\\\<br/>&amp;&amp;(\\var{K_1}\\, C)&nbsp;\\cos\\alpha + C \\sin\\theta &amp; = W \\\\<br/>&amp;&amp; &nbsp;\\var{K_2}\\, C&amp;= \\var{qty(W,unit)} \\\\<br/>&amp;&amp;C &amp;= \\var{qty(siground(W/K_2,4),unit)} \\\\<br/>B &amp;= \\var{K_1}\\,&nbsp;(\\var{qty(siground(W/K_2,4),unit)})\\\\<br/>B&amp;=\\var{qty(siground(B,4),unit)}<br/>\\end{align}$</p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"B": {"name": "B", "group": "Unnamed group", "definition": "W cos(radians(theta))/sin(radians(90-alpha+theta))", "description": "", "templateType": "anything", "can_override": false}, "W": {"name": "W", "group": "Ungrouped variables", "definition": "random(50..600#50)", "description": "", "templateType": "anything", "can_override": false}, "K_1": {"name": "K_1", "group": "Unnamed group", "definition": "{siground(cos(radians(theta))/sin(radians(alpha)),4)", "description": "", "templateType": "anything", "can_override": false}, "K_2": {"name": "K_2", "group": "Unnamed group", "definition": "precround(K_1 cos(radians(alpha)) + sin(radians(theta)),4)", "description": "", "templateType": "anything", "can_override": false}, "theta": {"name": "theta", "group": "Ungrouped variables", "definition": "random(15..80#5)", "description": "", "templateType": "anything", "can_override": false}, "alpha": {"name": "alpha", "group": "Ungrouped variables", "definition": "random(15..80#5)", "description": "", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Unnamed group", "definition": "W sin(radians(alpha))/sin(radians(90-alpha+theta))", "description": "", "templateType": "anything", "can_override": false}, "unit": {"name": "unit", "group": "Ungrouped variables", "definition": "random(['lb', 'N', 'kN'])", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "alpha <> (90 - theta) and\nalpha <> theta", "maxRuns": 100}, "ungrouped_variables": ["unit", "W", "alpha", "theta"], "variable_groups": [{"name": "Unnamed group", "variables": ["B", "C", "K_1", "K_2"]}], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>$B$ = [[0]]&nbsp;&nbsp;</p>\n<p>$C$ = [[1]]&nbsp;</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "Force B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(B,unit)", "right": "0.2", "close": "1.0", "C1": "80", "C2": "80", "C3": "60"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "Force C", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(C,unit)", "right": "0.2", "close": "1.0", "C1": "80", "C2": "80", "C3": "60"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Particle Equilibrium: Use slopes to find components", "extensions": ["geogebra", "linear-algebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "Chris Graham", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/369/"}, {"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Equilibrium", "equilibrium", "Mechanics", "mechanics", "Particle", "particle", "Statics", "statics"], "metadata": {"description": "<p>Two dimensional particle equilibrium problem. &nbsp;Advice shows how to use how to use slope triangles to find sines and cosines, rather than finding the angle and using that.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet1(\"G\", 300)}&nbsp;</p>\n<p>A $\\var{qty(F,\"N\")}$ force $F$ is applied in the direction shown to a small ring, which is held in equilibrium by two inextensible ropes attached to fixed points $A$ and $B$.</p>", "advice": "<p>1. &nbsp;Draw FBD of the Particle</p>\n<p style=\"padding-left: 40px;\">{applet1(\"D\", 250)}</p>\n<p>2. &nbsp;Determine slope triangles from geometry.</p>\n<table style=\"margin-left: 40px; text-align: center;\">\n<tbody>\n<tr style=\"border-bottom: solid;\">\n<td style=\"width: 52.989132px;\">Force</td>\n<td style=\"width: 57.989132px;\">Rise</td>\n<td style=\"width: 42.989132px;\">Run</td>\n<td style=\"width: 97.989136px;\">Hypotenuse</td>\n</tr>\n<tr>\n<td style=\"width: 52.989132px;\">$F$</td>\n<td style=\"width: 57.989132px;\">$\\var{dyF}$</td>\n<td style=\"width: 42.989132px;\">$\\var{dxF}$</td>\n<td style=\"width: 97.989136px;\">$\\sqrt{\\var{rF2}}$</td>\n</tr>\n<tr>\n<td style=\"width: 52.989132px;\">$A$</td>\n<td style=\"width: 57.989132px;\">$\\var{dyA}$</td>\n<td style=\"width: 42.989132px;\">$\\var{dxA}$</td>\n<td style=\"width: 97.989136px;\">$\\sqrt{\\var{rA2}}$</td>\n</tr>\n<tr>\n<td style=\"width: 52.989132px;\">$B$</td>\n<td style=\"width: 57.989132px;\">$\\var{dyB}$</td>\n<td style=\"width: 42.989132px;\">$\\var{dxB}$</td>\n<td style=\"width: 97.989136px;\">$\\sqrt{\\var{rB2}}$</td>\n</tr>\n</tbody>\n</table>\n<p>3. Determine scalar components in terms of $A$, $B$, and $F$ from slopes and given $F = \\var{qty(F,'N')}$</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}<br/>F_x &amp;= \\left(\\frac{\\var{dxF}}{\\sqrt{\\var{rF2}}}\\right) F = \\var{precround(qty(vecF[0], 'N'),4)} &amp; F_y &amp;= \\left(\\frac{\\var{dyF}}{\\sqrt{\\var{rF2}}}\\right) F = \\var{precround(qty(vecF[1], 'N'),4)}\\\\<br/>A_x &amp;= \\left(\\frac{\\var{dxA}}{\\sqrt{\\var{rA2}}}\\right) A = \\var{precround(cos(radians(alpha)),3)} A &amp; A_y &amp;= \\left(\\frac{\\var{dyA}}{\\sqrt{\\var{rA2}}}\\right) A&nbsp;= \\var{precround(sin(radians(alpha)),3)} A\\\\<br/>B_x &amp;= \\left(\\frac{\\var{dxB}}{\\sqrt{\\var{rB2}}}\\right) B = \\var{precround(cos(radians(beta )),3)} B &amp; B_y &amp;= \\left(\\frac{\\var{dyB}}{\\sqrt{\\var{rB2}}}\\right) B =&nbsp;\\var{precround(sin(radians(beta )),3)} B<br/>\\end{align}$</p>\n<p>4. &nbsp;Set up two equations of equilibrium.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}<br/>\\Sigma F_x &amp;= 0 &amp; \\Sigma F_y &amp;= 0\\\\<br/>A_x + B_x + F_x &amp;=0&amp; A_y + B_y +F_y &amp;=0\\\\<br/>\\simplify[!noLeadingMinus]{{precround(cos(radians(alpha)),3)} A + {precround(cos(radians(beta)),3)} B} &amp; =\\var{precround(qty(- vecF[0], 'N'),4)} &amp;<br/>\\simplify[!noLeadingMinus]{{precround(sin(radians(alpha)),3)} A + {precround(sin(radians(beta)),3)} B} &amp; =\\var{precround(qty(- vecF[1], 'N'),4)}\\\\<br/>\\end{align}$</p>\n<p>5. Solve simultaneously to get:</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}<br/>A &amp;= \\var{siground(qty(abs(FA),'N'),4)} &amp; B &amp;= \\var{siground(qty(abs(FB),'N'),4)}<br/>\\end{align}$</p>\n<p style=\"padding-left: 40px;\"></p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"applet": {"name": "applet", "group": "Ungrouped variables", "definition": "geogebra_applet('saaa7mqd')", "description": "", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Ungrouped variables", "definition": "random(vector(random(0,10), random(0..-10)), vector(random(0..10), random(0,-10)))", "description": "<p>Grid top left at (0,0) bottom right at(10,-10)</p>", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "random(vector(random(0,10), random(0..-10)), vector(random(0..10), random(0,-10)))", "description": "", "templateType": "anything", "can_override": false}, "P": {"name": "P", "group": "Ungrouped variables", "definition": "vector(random(3..7),random(-3..-7))", "description": "", "templateType": "anything", "can_override": false}, "alpha": {"name": "alpha", "group": "angles", "definition": "degrees(atan2(A[1]-P[1], A[0]-P[0]))", "description": "<p>Direction of Force A will only point in quadrant 2 or 4</p>", "templateType": "anything", "can_override": false}, "beta": {"name": "beta", "group": "angles", "definition": "degrees(atan2(B[1]-P[1], B[0]-P[0]))", "description": "<p>Direction of force B will only point in quadrant 1 or 2</p>", "templateType": "anything", "can_override": false}, "F": {"name": "F", "group": "Ungrouped variables", "definition": "random(50..600#25)", "description": "", "templateType": "anything", "can_override": false}, "FA": {"name": "FA", "group": "Ungrouped variables", "definition": "soln[0][2]", "description": "", "templateType": "anything", "can_override": false}, "FB": {"name": "FB", "group": "Ungrouped variables", "definition": "soln[1][2]", "description": "", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Ungrouped variables", "definition": "random(vector(random(0,10), random(0..-10)), vector(random(0..10), random(0,-10)))", "description": "", "templateType": "anything", "can_override": false}, "phi": {"name": "phi", "group": "angles", "definition": "degrees(atan2(C[1]-P[1], C[0]-P[0]))", "description": "<p>Direction of force F (will only point in quadrant 3 or 4)</p>", "templateType": "anything", "can_override": false}, "soln": {"name": "soln", "group": "Ungrouped variables", "definition": "reduced_row_echelon_form(   \nmatrix([cos(radians(alpha)),cos(radians(beta)),- F cos(radians(phi))],\n  [sin(radians(alpha)),sin(radians(beta)),- F sin(radians(phi))]))", "description": "", "templateType": "anything", "can_override": false}, "vecA": {"name": "vecA", "group": "Ungrouped variables", "definition": "vector(cos(radians(alpha)),sin(radians(alpha))) FA", "description": "", "templateType": "anything", "can_override": false}, "vecB": {"name": "vecB", "group": "Ungrouped variables", "definition": "vector(cos(radians(beta)),sin(radians(beta))) FB", "description": "", "templateType": "anything", "can_override": false}, "vecF": {"name": "vecF", "group": "Ungrouped variables", "definition": "siground(vector(cos(radians(phi)),sin(radians(phi))) F,4)", "description": "", "templateType": "anything", "can_override": false}, "Check": {"name": "Check", "group": "Ungrouped variables", "definition": "vecA + vecB + vecF", "description": "", "templateType": "anything", "can_override": false}, "dxA": {"name": "dxA", "group": "angles", "definition": "(A[0]-P[0])", "description": "<p>run for force A</p>", "templateType": "anything", "can_override": false}, "dyA": {"name": "dyA", "group": "angles", "definition": "(A[1]-P[1])", "description": "<p>Rise for force A</p>", "templateType": "anything", "can_override": false}, "dxB": {"name": "dxB", "group": "angles", "definition": "(B[0]-P[0])", "description": "", "templateType": "anything", "can_override": false}, "dyB": {"name": "dyB", "group": "angles", "definition": "(B[1]-P[1])", "description": "", "templateType": "anything", "can_override": false}, "dxF": {"name": "dxF", "group": "angles", "definition": "(C[0]-P[0])", "description": "", "templateType": "anything", "can_override": false}, "dyF": {"name": "dyF", "group": "angles", "definition": "(C[1]-P[1])", "description": "", "templateType": "anything", "can_override": false}, "rA2": {"name": "rA2", "group": "angles", "definition": "(dxA^2+dyA^2)", "description": "", "templateType": "anything", "can_override": false}, "rB2": {"name": "rB2", "group": "angles", "definition": "(dxB^2+dyB^2)", "description": "", "templateType": "anything", "can_override": false}, "rF2": {"name": "rF2", "group": "angles", "definition": "(dxF^2+dyF^2)", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "//avoid forces on same line of action\ntan(radians(alpha)) <> tan(radians(beta)) and\ntan(radians(beta)) <> tan(radians(phi)) and\ntan(radians(phi)) <> tan(radians(alpha)) and\nFA > 0 and FB > 0 and // only tension please\nFA < 50 F and FB < 50F // and not too big", "maxRuns": 100}, "ungrouped_variables": ["applet", "A", "B", "P", "C", "F", "FA", "FB", "soln", "vecA", "vecB", "vecF", "Check"], "variable_groups": [{"name": "angles", "variables": ["alpha", "beta", "phi", "dxA", "dyA", "dxB", "dyB", "dxF", "dyF", "rA2", "rB2", "rF2"]}], "functions": {"applet1": {"parameters": [["perspective", "string"], ["width", "number"]], "type": "anything", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\n\nvar params = {\n    material_id: 'saaa7mqd'\n};\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n    var app = d.app;\n    question.applet = d;\n    app.setPerspective(perspective);\n    app.setWidth(width);\n    app.setHeight(width);\n    //app.setAxesVisible(true,false);\n    //app.enableShiftDragZoom(false);\n\n    function setGGBPoint(name, nname = name) {\n        // moves point in GGB to Numbas value\n        var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n        app.setFixed(name, false, false); //fixed and selection allowed\n        app.setCoords(name, x[0], x[1]);\n        app.setFixed(name, true, false);\n    }\n\n    setGGBPoint('A');\n    setGGBPoint('B');\n    setGGBPoint('C');\n    setGGBPoint('P');\n    function setGGBAngle(gname, nname = gname) {\n        // Sets angle in GGB to a Numbas Variable given in degrees.\n        var v = Math.PI / 180 * Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n        app.setValue(gname, v);\n    }\n\n    //setGGBAngle('\u03b8','theta');\n    //setGGBAngle('\u03b1','alpha');\n    //app.setValue('tension',Numbas.jme.unwrapValue(question.scope.getVariable('tension')));\n\n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);\n"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the tensions in the two ropes.</p>\n<p>$A = $ [[0]]</p>\n<p>$B = $ [[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "siground(qty(FA,\"N\"),3)", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "siground(qty(FB,\"N\"),3)", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Equilibrium of a particle: four forces", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 12, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/12/edit"}, "name": "Angle quantity 2020", "short_name": "angle", "description": "<p>Adjusts all angles to 0 &lt; $\\theta$ &lt; 360.</p>\n<p>Accepts '&deg;' and 'deg' as units.</p>\n<p>Penalizes if not close enough or no units.</p>\n<p>90&deg; = -270&deg; = 450&deg;</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['expected_answer']) ", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "original_student_scalar:\nmatchnumber(studentAnswer,['plain','en'])[1]\n\nstudent_scalar:\nmod(original_student_scalar,360)\n\n\nstudent_unit:\nstudentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]\n\ninterpreted_unit:\nif(trim(student_unit)='\u00b0','deg',student_unit)\n\ninterpreted_answer:\nqty(mod(student_scalar,360),'deg')\n\nclose:\nwithintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))\n\ncorrect_scalar:\nmod(scalar(settings['expected_answer']),360)\n\nright:\nwithintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))\n\ngood_unit:\nsame(qty(1,interpreted_unit),qty(1,'deg'))\n\nmark:\nassert(close,incorrect('Incorrect.');end());\nif(right,correct('Correct angle.'), set_credit(1 - settings['close_penalty'],'Angle is close.'));\nassert(good_unit,sub_credit(settings['unit_penalty'], 'Missing or incorrect units.'))", "marking_notes": [{"name": "original_student_scalar", "description": "<p>Retuns the scalar part of students answer (which is a quantity) as a number.</p>", "definition": "matchnumber(studentAnswer,['plain','en'])[1]"}, {"name": "student_scalar", "description": "<p>Normalize angle with mod 360</p>", "definition": "mod(original_student_scalar,360)\n"}, {"name": "student_unit", "description": "<p>matchnumber(studentAnswer,['plain','en'])[0] is a string \"12.34\"</p>", "definition": "studentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]"}, {"name": "interpreted_unit", "description": "<p>Allows student to use degree symbol or 'deg' for units.</p>", "definition": "if(trim(student_unit)='\u00b0','deg',student_unit)"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(mod(student_scalar,360),'deg')"}, {"name": "close", "description": "", "definition": "withintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))"}, {"name": "correct_scalar", "description": "<p>Normalize expected_answer with mod 360</p>", "definition": "mod(scalar(settings['expected_answer']),360)"}, {"name": "right", "description": "", "definition": "withintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))"}, {"name": "good_unit", "description": "", "definition": "same(qty(1,interpreted_unit),qty(1,'deg'))"}, {"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "assert(close,incorrect('Incorrect.');end());\nif(right,correct('Correct angle.'), set_credit(1 - settings['close_penalty'],'Angle is close.'));\nassert(good_unit,sub_credit(settings['unit_penalty'], 'Missing or incorrect units.'))"}], "settings": [{"name": "expected_answer", "label": "Expected Answer", "help_url": "", "hint": "Expected angle as a quantity.", "input_type": "code", "default_value": "qty(30,'deg')", "evaluate": true}, {"name": "unit_penalty", "label": "Unit penalty", "help_url": "", "hint": "Penalty for not including degree sign or 'deg'.", "input_type": "percent", "default_value": "20"}, {"name": "close_penalty", "label": "Close Penalty", "help_url": "", "hint": "Penalty for close answer.", "input_type": "percent", "default_value": "20"}, {"name": "close_tol", "label": "Close", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked close. &nbsp;&nbsp;", "input_type": "code", "default_value": "0.5", "evaluate": false}, {"name": "right_tol", "label": "Right ", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked correct. &nbsp;", "input_type": "code", "default_value": "0.1", "evaluate": false}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "Chris Graham", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/369/"}, {"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["angle from reference", "Equlibrium", "Mechanics", "mechanics", "Particle Equilbrium", "Statics", "statics"], "metadata": {"description": "<p>Three random forces act on a particle. &nbsp;Determine the force required for equilibirum.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet} <span data-jme-visible=\"debug\">{alpha} {beta} {gamma}</span></p>\n<p><span>Four forces with magnitudes </span><span style=\"color: red;\">$A$</span> = {qty(maga,units)}, <span style=\"color: blue;\">$B$&nbsp;</span>= {qty(magb,units)}, and <span style=\"color: green;\">$C$</span> = {qty(magC,units)}, act on a particle&nbsp;in the directions shown.</p>\n<p>Determine the magnitude and direction of force $\\mathbf{D}$ required for equilibrium.</p>", "advice": "<p>Begin by drawing a free body diagram of the particle. Since the direction of force $\\mathbf{D}$ is unknown you will have to make an assumption about which way it points.</p>\n<p>Set up and solve the equilibrium equations based on your assumed direction for $\\mathbf{D}$</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}<br/>\\Sigma F_x &amp;= 0\\\\<br/>A_x + B_x + C_x + D_x &amp;= 0\\\\ <br/>\\simplify[!collectNumbers]{{enground(A[0])} + &nbsp;{enground(B[0])} &nbsp;+ {enground(C[0])} - D_x} &amp;= 0 &nbsp;\\\\<br/>D_x &amp;= \\var{qty(enground(A[0] +B[0] +C[0]),units)}&amp;(1)\\\\\\\\<br/>\\Sigma F_y &amp;= 0\\\\<br/>A_y + B_y + C_y + D_y &amp;= 0\\\\<br/>\\simplify[!collectNumbers]{{enground(A[1])} + {enground(B[1])} &nbsp;+ &nbsp;{enground(C[1])} + D_y } &amp;= 0\\\\<br/>D_y &amp;= \\var{qty(- enground(A[1] +B[1] +C[1]),units)} &amp; (2)<br/>\\end{align}$</p>\n<p>If your calculations result in a negative value for $D_x$ or $D_y$, then your assumed direction is opposite of the component's actual direction.</p>\n<p>Draw a sketch showing $D_x$, $D_y$, and $D$ pointing in their actual directions and define angle $\\theta$.</p>\n<p>Resolve the components using right triangle trigonometry to find $D$ and $\\theta$. &nbsp;</p>\n<p style=\"padding-left: 40px;\">$D = \\var{enground(abs(D))}$ {units},</p>\n<p style=\"padding-left: 40px;\">$\\theta&nbsp;&nbsp;= \\var{siground(theta,4)}$&deg; measured counterclockwise from the $x$-axis.</p>\n<p><em>Your value of $\\theta$ will depend on the reference angle you choose. Choose one that makes $\\theta$ less than 90&deg; to avoid sign errors.</em></p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"A": {"name": "A", "group": "forces", "definition": "maga vector(cos(radians(alpha)),sin(radians(alpha)))\n", "description": "", "templateType": "anything", "can_override": false}, "theta": {"name": "theta", "group": "forces", "definition": "degrees(atan2(D[1],D[0]))", "description": "", "templateType": "anything", "can_override": false}, "gamma": {"name": "gamma", "group": "input", "definition": "random(180..265#5)", "description": "", "templateType": "anything", "can_override": false}, "magc": {"name": "magc", "group": "input", "definition": "random(10..100#5)", "description": "", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "forces", "definition": "magc vector(cos(radians(gamma)),sin(radians(gamma)))", "description": "", "templateType": "anything", "can_override": false}, "beta": {"name": "beta", "group": "input", "definition": "random(270..355#5)", "description": "", "templateType": "anything", "can_override": false}, "alpha": {"name": "alpha", "group": "input", "definition": "random(0..90#5)", "description": "", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "input", "definition": "false", "description": "", "templateType": "anything", "can_override": false}, "magb": {"name": "magb", "group": "input", "definition": "random(10..100#5)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "input", "definition": "random('kN','N','lb')", "description": "", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "forces", "definition": "magb vector(cos(radians(beta)),sin(radians(beta)))", "description": "", "templateType": "anything", "can_override": false}, "D": {"name": "D", "group": "forces", "definition": "-(A+B+C)\n", "description": "", "templateType": "anything", "can_override": false}, "maga": {"name": "maga", "group": "input", "definition": "random(10..100#5)", "description": "", "templateType": "anything", "can_override": false}, "magd": {"name": "magd", "group": "forces", "definition": "qty(abs(D),units)\n", "description": "", "templateType": "anything", "can_override": false}, "dx": {"name": "dx", "group": "check", "definition": "-(A[0] + B[0] + C[0])", "description": "", "templateType": "anything", "can_override": false}, "dy": {"name": "dy", "group": "check", "definition": "-(A[1] + B[1] + C[1])", "description": "", "templateType": "anything", "can_override": false}, "applet": {"name": "applet", "group": "input", "definition": "geogebra_applet('xnbz73te',params)", "description": "", "templateType": "anything", "can_override": false}, "params": {"name": "params", "group": "input", "definition": "['\u03b1': radians(alpha),'\u03b2': radians(beta) ,'\u03b3': radians(gamma) , 'maga': maga , 'magb': magb,'magc':magc ]", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "input", "variables": ["alpha", "beta", "gamma", "units", "maga", "magb", "magc", "debug", "applet", "params"]}, {"name": "forces", "variables": ["A", "B", "C", "D", "magd", "theta"]}, {"name": "check", "variables": ["dx", "dy"]}], "functions": {"enground": {"parameters": [["n", "number"]], "type": "number", "language": "jme", "definition": "if(abs(N) < 10^(-10), precround(n,3) , siground(n,4))"}, "graphics2": {"parameters": [["app", "ggbapplet"]], "type": "ggbapplet", "language": "javascript", "definition": "// Take an applet, set its perspective to the given string.\n// See https://wiki.geogebra.org/en/SetPerspective_Command for the format of the perspective string.\napp.promise.then(function(d) {\n  d.app.setPerspective(\"D\");// D=graphics2\n});\nreturn new Numbas.jme.types.ggbapplet(app);"}}, "preamble": {"js": "", "css": ".part:not(.dirty) > .student-answer.answered[feedback-state='wrong'] input {\nborder-color: hsl(0, 0%, 50%);\nbackground: hsl(0, 0%, 95%);\n}\n"}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>$D$ =&nbsp;[[3]] &nbsp;<span data-jme-visible=\"debug\" style=\"color: blue;\">({siground(magd,4)}) </span>acting at &nbsp;[[0]]&nbsp;measured [[1]]&nbsp;from the&nbsp;[[2]]. <span data-jme-visible=\"debug\" style=\"color: blue;\">({siground(theta,4)}&deg;)</span></p>", "gaps": [{"type": "angle", "useCustomName": true, "customName": "Direction", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": false, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"expected_answer": "qty(round(theta*100)/100,'deg')", "unit_penalty": "20", "close_penalty": "20", "close_tol": "0.5", "right_tol": "0.1"}}, {"type": "1_n_2", "useCustomName": true, "customName": "Sign", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": false, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minMarks": 0, "maxMarks": 0, "shuffleChoices": false, "displayType": "dropdownlist", "displayColumns": 0, "showCellAnswerState": true, "choices": ["CCW", "CW"], "matrix": [0, 0], "distractors": ["", ""]}, {"type": "1_n_2", "useCustomName": true, "customName": "Reference Direction", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": false, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minMarks": 0, "maxMarks": 0, "shuffleChoices": false, "displayType": "dropdownlist", "displayColumns": 0, "showCellAnswerState": true, "choices": ["+x Axis", "+y Axis", "-x Axis", "-y Axis"], "matrix": [0, 0, 0, 0], "distractors": ["", "", "", ""]}, {"type": "engineering-answer", "useCustomName": true, "customName": "Magnitude", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": false, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "magD", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Equilibrium of a particle: hanging weight", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 24, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/24/edit"}, "name": "Angle quantity", "short_name": "angle-quantity-from-reference", "description": "<p>Angle&nbsp;as a quantity in degrees.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['correct_quantity'])", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \nright and good_units and right_sign and angle_in_range, add_credit(1.0,'Correct.'),\nright and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\nright and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but missing degree symbol.'),\nright and good_units and right_sign and not angle_in_range,add_credit(settings['C1'],'Angle is out of range.'),\nclose and good_units, add_credit(settings['C1'],'Close.'),\nclose and not good_units, add_credit(settings['C3'],'Answer is close, but missing degree symbol.'),\nincorrect('Wrong answer.')\n)\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\ncorrect_scalar:\nscalar(correct_quantity)\n  \n\ncorrect_quantity:\nsettings['correct_quantity']\n\ncorrect_units:\nunits(correct_quantity)\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,\"\u00b0\"),\" deg\")\n\n\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_quantity),\nmsg,\nfeedback(msg);false)\n\nstudent_quantity:\nswitch(not good_units, \nstudent_scalar * correct_units, \nnot right_sign,\n-quantity(student_scalar, student_units),\nquantity(student_scalar,student_units)\n)\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)\n\nangle_in_range:\nif(settings['restrict_angle'], abs(student_scalar) <= 90, true)\n\nright:\nwithinTolerance(abs(student_scalar), abs(correct_scalar), settings['right'])\n\nclose:\nwithinTolerance(student_scalar, correct_scalar, settings['close'])", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \nright and good_units and right_sign and angle_in_range, add_credit(1.0,'Correct.'),\nright and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\nright and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but missing degree symbol.'),\nright and good_units and right_sign and not angle_in_range,add_credit(settings['C1'],'Angle is out of range.'),\nclose and good_units, add_credit(settings['C1'],'Close.'),\nclose and not good_units, add_credit(settings['C3'],'Answer is close, but missing degree symbol.'),\nincorrect('Wrong answer.')\n)"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)"}, {"name": "correct_scalar", "description": "", "definition": "scalar(correct_quantity)\n  "}, {"name": "correct_quantity", "description": "", "definition": "settings['correct_quantity']"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "", "definition": "join(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,\"\u00b0\"),\" deg\")\n\n"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_quantity),\nmsg,\nfeedback(msg);false)"}, {"name": "student_quantity", "description": "", "definition": "switch(not good_units, \nstudent_scalar * correct_units, \nnot right_sign,\n-quantity(student_scalar, student_units),\nquantity(student_scalar,student_units)\n)"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity)"}, {"name": "angle_in_range", "description": "", "definition": "if(settings['restrict_angle'], abs(student_scalar) <= 90, true)"}, {"name": "right", "description": "<p>Will check for correct sign elswhere.</p>", "definition": "withinTolerance(abs(student_scalar), abs(correct_scalar), settings['right'])"}, {"name": "close", "description": "<p>Must have correct sign to be close.</p>", "definition": "withinTolerance(student_scalar, correct_scalar, settings['close'])\n"}], "settings": [{"name": "correct_quantity", "label": "Correct Angle as quantity ", "help_url": "", "hint": "", "input_type": "code", "default_value": "qty(45,'deg')", "evaluate": true}, {"name": "right", "label": "Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within &plusmn; this amount from the correct value.", "input_type": "code", "default_value": "0.1", "evaluate": true}, {"name": "restrict_angle", "label": "Less than 90\u00b0", "help_url": "", "hint": "When checked, angle must be between -90&deg; and +90&deg;.", "input_type": "checkbox", "default_value": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units.", "input_type": "percent", "default_value": "75"}, {"name": "close", "label": " Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within &plusmn; this amount from the correct value.", "input_type": "code", "default_value": "0.5", "evaluate": true}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value without units.", "input_type": "percent", "default_value": "25"}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}, {"source": {"pk": 1, "author": {"name": "Christian Lawson-Perfect", "pk": 7}, "edit_page": "/part_type/1/edit"}, "name": "Yes/no", "short_name": "yes-no", "description": "<p>The student is shown two radio choices: \"Yes\" and \"No\". One of them is correct.</p>", "help_url": "", "input_widget": "radios", "input_options": {"correctAnswer": "if(eval(settings[\"correct_answer_expr\"]), 0, 1)", "hint": {"static": true, "value": ""}, "choices": {"static": true, "value": ["Yes", "No"]}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nif(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)\n\ninterpreted_answer:\nstudentAnswer=0\n\ncorrect_answer:\nif(eval(settings[\"correct_answer_expr\"]),0,1)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "if(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "studentAnswer=0"}, {"name": "correct_answer", "description": "", "definition": "if(eval(settings[\"correct_answer_expr\"]),0,1)"}], "settings": [{"name": "correct_answer_expr", "label": "Is the answer \"Yes\"?", "help_url": "", "hint": "An expression which evaluates to <code>true</code> or <code>false</code>.", "input_type": "mathematical_expression", "default_value": "true", "subvars": false}], "public_availability": "always", "published": true, "extensions": []}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Mechanics, statics, equilibrium, particle equilibrium, 2-d, tension"], "metadata": {"description": "<p>Find the tensions in two ropes supporting a weight.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>Equilibrium of a particle: $\\Sigma \\mathbf{F} = 0 \\therefore &nbsp;\\Sigma F_x = 0 \\text{ and } \\Sigma F_y =0$&nbsp;</p>\n<p>{geogebra_applet('GbauxKWS',params)}</p>\n<p>Find the tensions in the two cables when they are supporting a {qty(W,units[0])} load.</p>\n<p>$h = \\var{qty(h,units[1])}, d_1 = \\var{qty(d_1,units[1])}, \\text{ and } d_2 = \\var{qty(d_2,units[1])}$.&nbsp;</p>\n<p></p>", "advice": "<p>Draw a free body diagram of the particle. &nbsp;Apply the equations of equilibrium to get\\[\\Sigma F_x\\!:\\ &nbsp;AC_x = BC_x \\qquad \\Sigma F_y\\!: \\ AC_y + BC_y =W\\]</p>\n<p>Express the components in terms of the magnitudes $AB$ and &nbsp;$BC$ and directions $\\alpha$ and $\\beta$, then solve the two equations simultaneously for the unknown tensions.</p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"load": {"name": "load", "group": "results", "definition": "if(units[0]='kg',W 9.81, W)", "description": "", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "results", "definition": "false", "description": "", "templateType": "anything", "can_override": false}, "h": {"name": "h", "group": "Inputs", "definition": "random(3..6#0.5)", "description": "", "templateType": "anything", "can_override": false}, "d_1": {"name": "d_1", "group": "Inputs", "definition": "random(2..5#0.25)", "description": "<p>Horizontal location of point C.</p>", "templateType": "anything", "can_override": false}, "Q_ac": {"name": "Q_ac", "group": "answer", "definition": "let(unit,if(units[0]='kg','N',units[0]),qty(AC,unit))", "description": "", "templateType": "anything", "can_override": false}, "d_2": {"name": "d_2", "group": "Inputs", "definition": "random(2..5#0.25)", "description": "", "templateType": "anything", "can_override": false}, "BC": {"name": "BC", "group": "results", "definition": "load cos(radians(alpha))/sin(radians(alpha+beta))", "description": "<p>Tension in cable BC</p>", "templateType": "anything", "can_override": false}, "Q_bc": {"name": "Q_bc", "group": "answer", "definition": "let(unit,if(units[0]='kg','N',units[0]),qty(BC,unit))", "description": "", "templateType": "anything", "can_override": false}, "beta": {"name": "beta", "group": "results", "definition": "degrees(arctan(h/d_2))", "description": "", "templateType": "anything", "can_override": false}, "W": {"name": "W", "group": "Inputs", "definition": "random([10,20,25,40,50,75,100,120,150])", "description": "<p>anans</p>", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Inputs", "definition": "random(['lb','ft'], ['N','m'], ['kN','m'], ['kg','m'] )", "description": "", "templateType": "anything", "can_override": false}, "AC": {"name": "AC", "group": "results", "definition": "load cos(radians(beta))/sin(radians(alpha+beta))", "description": "", "templateType": "anything", "can_override": false}, "alpha": {"name": "alpha", "group": "results", "definition": "degrees(arctan(h/d_1))", "description": "", "templateType": "anything", "can_override": false}, "params": {"name": "params", "group": "Ungrouped variables", "definition": "[d_1: d_1, d_2: d_2, h: h]", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["params"], "variable_groups": [{"name": "Inputs", "variables": ["W", "d_1", "d_2", "h", "units"]}, {"name": "results", "variables": ["alpha", "beta", "load", "BC", "AC", "debug"]}, {"name": "answer", "variables": ["Q_bc", "Q_ac"]}], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Question 1", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Pick the correct statement:</p>\n<p>[[0]]</p>", "gaps": [{"type": "1_n_2", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minMarks": 0, "maxMarks": 0, "shuffleChoices": false, "displayType": "radiogroup", "displayColumns": "1", "showCellAnswerState": true, "choices": ["The tension in <i>$AC$</i>&nbsp;is greater than the tension in <i>$BC$</i>.", "The tension in <em>$BC$</em> is greater&nbsp;than the tension in $AC$.", "Both tensions are the same and equal the weight $W$.", "Both tensions are the same and equal half the weight $W$.", "Both tensions are the same and greater than the weight $W$.", "Both tensions are the same and less than the weight $W$."], "matrix": ["award(4,alpha>beta)", "award(4,alpha<beta)", "award(4, (alpha= beta) & (alpha = 30))", "0", "award(4, (alpha= beta) & (alpha < 30))", "award(4, (alpha= beta) & (alpha > 30))"], "distractors": ["", "", "", "", "", ""]}], "sortAnswers": false}, {"type": "yes-no", "useCustomName": true, "customName": "Question 3", "marks": "3", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Do you need to calculate the lengths of the cables to solve this problem?</p>", "settings": {"correct_answer_expr": "false"}}, {"type": "yes-no", "useCustomName": true, "customName": "Question 3", "marks": "3", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [{"variables": [{"name": "BC", "value": "304.0454111793"}, {"name": "d_2", "value": "4.25"}, {"name": "beta", "value": "30.4655449195"}, {"name": "correct_units", "value": "\"N\""}, {"name": "AC", "value": "354.1734692843"}, {"name": "d_1", "value": "2.75"}, {"name": "W", "value": "40"}, {"name": "h", "value": "2.5"}, {"name": "units", "value": "[ \"kg\", \"m\" ]"}, {"name": "alpha", "value": "42.2736890061"}, {"name": "load", "value": "392.4"}], "name": "student says kg is not a force", "answer": {"empty": false, "value": 1, "valid": true}, "notes": [{"name": "mark", "expected": {"value": "true", "messages": ["Your answer is correct.\n\nYou were awarded <strong>1</strong> mark."], "warnings": [], "error": "", "valid": true, "credit": 1}}, {"name": "correct_answer", "expected": {"value": "1", "messages": [], "warnings": [], "error": "", "valid": true, "credit": 0}}]}, {"variables": [{"name": "BC", "value": "304.0454111793"}, {"name": "d_2", "value": "4.25"}, {"name": "beta", "value": "30.4655449195"}, {"name": "correct_units", "value": "\"N\""}, {"name": "AC", "value": "354.1734692843"}, {"name": "d_1", "value": "2.75"}, {"name": "W", "value": "40"}, {"name": "h", "value": "2.5"}, {"name": "units", "value": "[ \"kg\", \"m\" ]"}, {"name": "alpha", "value": "42.2736890061"}, {"name": "load", "value": "392.4"}], "name": "student says kg is a force", "answer": {"empty": false, "value": 0, "valid": true}, "notes": [{"name": "mark", "expected": {"value": "false", "messages": ["Your answer is incorrect."], "warnings": [], "error": "", "valid": true, "credit": 0}}, {"name": "interpreted_answer", "expected": {"value": "true", "messages": [], "warnings": [], "error": "", "valid": true, "credit": 0}}]}, {"variables": [{"name": "BC", "value": "90.9068004018"}, {"name": "d_2", "value": "3.25"}, {"name": "beta", "value": "24.7751405688"}, {"name": "correct_units", "value": "\"N\""}, {"name": "AC", "value": "103.1746031746"}, {"name": "d_1", "value": "2"}, {"name": "W", "value": "100"}, {"name": "h", "value": "1.5"}, {"name": "units", "value": "[ \"N\", \"m\" ]"}, {"name": "alpha", "value": "36.8698976458"}, {"name": "load", "value": "100"}], "name": "student says N is a force", "answer": {"empty": false, "value": 0, "valid": true}, "notes": [{"name": "mark", "expected": {"value": "true", "messages": ["Your answer is correct.\n\nYou were awarded <strong>1</strong> mark."], "warnings": [], "error": "", "valid": true, "credit": 1}}]}, {"variables": [{"name": "BC", "value": "90.9068004018"}, {"name": "d_2", "value": "3.25"}, {"name": "beta", "value": "24.7751405688"}, {"name": "correct_units", "value": "\"N\""}, {"name": "AC", "value": "103.1746031746"}, {"name": "d_1", "value": "2"}, {"name": "W", "value": "100"}, {"name": "h", "value": "1.5"}, {"name": "units", "value": "[ \"N\", \"m\" ]"}, {"name": "alpha", "value": "36.8698976458"}, {"name": "load", "value": "100"}], "name": "student says N is not a force", "answer": {"empty": false, "value": 1, "valid": true}, "notes": [{"name": "mark", "expected": {"value": "false", "messages": ["Your answer is incorrect."], "warnings": [], "error": "", "valid": true, "credit": 0}}]}], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Is the load a force?</p>", "settings": {"correct_answer_expr": " not(units[0] = 'kg')"}}, {"type": "information", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<ol>\n<li>Carefully draw a neat, labled, free body diagram of particle <em>C</em>.</li>\n<li>Based on your FBD&nbsp;develop two equlibrium&nbsp;equations in terms of the symbols defined on your free body diagram.</li>\n</ol>"}, {"type": "gapfill", "useCustomName": true, "customName": "Directions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the necessary angles:&nbsp;</p>\n<p>$\\alpha$ =&nbsp;[[0]] $\\beta$ =&nbsp;[[1]]</p>", "gaps": [{"type": "angle-quantity-from-reference", "useCustomName": true, "customName": "alpha", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correct_quantity": "qty(round(alpha*100)/100,'deg')", "right": "0.2", "restrict_angle": true, "C1": "75", "close": "1.01", "C2": "50", "C3": "25"}}, {"type": "angle-quantity-from-reference", "useCustomName": true, "customName": "beta", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correct_quantity": "qty(round(beta*100)/100 ,'deg')", "right": "0.2", "restrict_angle": true, "C1": "75", "close": "1.01", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Magnitudes", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Substitute the known weight and angles $\\alpha$ and $\\beta$ into your equations, then solve them simultaneously to find the tensions in cables $AC$ and $BC$</p>\n<p>$AC$ =&nbsp;[[0]]&nbsp; <span data-jme-visible=\"debug\">&nbsp; {q_ac}</span> $BC $= [[1]] &nbsp; <span data-jme-visible=\"debug\">&nbsp;{q_bc} &nbsp;</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "AC", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "q_ac", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "BC", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "q_bc", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Equilibrium of a particle: ball in a trough", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": [], "metadata": {"description": "<p>Find reactions for a particle in equilibrium</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{geogebra_applet('dsdqn4dr',[['&alpha;', alpha+'&deg;'],['&beta;', &nbsp;beta+'&deg;']])}</p>\n<p></p>\n<p>&nbsp;<span data-jme-visible=\"false\">A: {A} &nbsp;B: {B}</span></p>", "advice": "<p>There are two ways to solve this problem</p>\n<p><strong>1. Equilibrium Equation Method</strong></p>\n<ol>\n<li>Draw a free body diagram of the cylinder.</li>\n<li>\n<p>Set up and simplify the equlibrium equations:</p>\n<p>$\\qquad\\Sigma F_x = 0$ &nbsp;and $\\Sigma F_y = 0$</p>\n</li>\n<li>Use algebra to solve simultaneously for the unknown forces $A$ and $B$.</li>\n</ol>\n<p><strong>2. Force Triangle Method</strong></p>\n<ol>\n<li>Draw a free body diagram of the cylinder.</li>\n<li>Arrange forces acting on the cylinder into a force triangle.</li>\n<li>Use trig to solve for the unknown reaction forces.</li>\n</ol>\n<p><strong>Answers</strong></p>\n<p style=\"padding-left: 40px;\">$A$ = {siground(A,4)} &nbsp;$B$={siground(B,4)}</p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"W": {"name": "W", "group": "Ungrouped variables", "definition": "quantity(random(1..20),random('N','pound'))", "description": "", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "W / (sin(radians(beta)) cos(radians(alpha))/ sin(radians(alpha)) + cos(radians(beta)))", "description": "<p>W / (sin(b) cos(a) / sin(a) + cos(b))</p>", "templateType": "anything", "can_override": false}, "alpha": {"name": "alpha", "group": "Ungrouped variables", "definition": "random(20..70#5)", "description": "", "templateType": "anything", "can_override": false}, "beta": {"name": "beta", "group": "Ungrouped variables", "definition": "random(20..70#5)", "description": "", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Ungrouped variables", "definition": "B sin(radians(beta))/sin(radians(alpha))", "description": "<p>FB sin(b) / sin(a)</p>", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["alpha", "beta", "A", "W", "B"], "variable_groups": [], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>A {w} cylinder rests in the trough shown.&nbsp;Assume that the contact surfaces are smooth (frictionless).</p>\n<p>Determine the reactions at $A$ and $B$.</p>\n<p></p>\n<p>$A$ = [[0]]&nbsp; &nbsp; $B$ = [[1]]&nbsp;&nbsp;<br/><em></em></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "Force A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "A", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "Force B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "B", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Equilibrium of a particle: Rope and pulley", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Equilibrium", "equilibrium", "Mechanics", "mechanics", "Particle", "particle", "Statics", "statics"], "metadata": {"description": "<p>Pulley supported by a cable, so the tension in the rope is constant. &nbsp; &nbsp;Advice is a youtube video showing how to solve the problem.</p>", "licence": "Creative Commons Attribution-ShareAlike 4.0 International"}, "statement": "<p>{geogebra_applet('qbvd5vx9',['L': length, 'W': width, 'd': offset, 'units': '\"' + units[0] + '\"'])}</p>\n<p style=\"padding-top: 1em; padding-right: 1em; padding-bottom: 1em;\">Cable $ABC$ has a length of {qty(length, units[0])}. Determine the position $x$ and the tension in $ABC$ required for equilibrium when the cable supports a $P = \\var{load}$ load riding on a frictionless pulley of negligable radius.</p>", "advice": "<p>See this video</p>\n<p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wNBO72qyvT8?start=1947\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\"></iframe></p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"Width": {"name": "Width", "group": "Ungrouped variables", "definition": "random(5..10#0.5)", "description": "", "templateType": "anything", "can_override": false}, "Length": {"name": "Length", "group": "Ungrouped variables", "definition": "Width + random(1..3#0.5)", "description": "", "templateType": "anything", "can_override": false}, "offset": {"name": "offset", "group": "Ungrouped variables", "definition": "random(1.5..3.5#0.25)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random([['ft','lb'],['m','kg']])", "description": "", "templateType": "anything", "can_override": false}, "load": {"name": "load", "group": "Ungrouped variables", "definition": "qty(random(25..250#25),units[1])", "description": "", "templateType": "anything", "can_override": false}, "P": {"name": "P", "group": "solution", "definition": "if(units[1]='kg',qty(scalar(load) * 9.81, 'N'),load)", "description": "", "templateType": "anything", "can_override": false}, "alpha": {"name": "alpha", "group": "solution", "definition": "degrees(arccos(width/length))", "description": "<p>angle ropes make with horzontal</p>", "templateType": "anything", "can_override": false}, "T": {"name": "T", "group": "solution", "definition": "siground(P/ (2 sin(radians(alpha))),4) ", "description": "", "templateType": "anything", "can_override": false}, "x": {"name": "x", "group": "solution", "definition": "siground(qty((width tan(radians(alpha)) - offset)/(2 tan(radians(alpha))),units[0]),4)", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "scalar(x) > width/5", "maxRuns": 100}, "ungrouped_variables": ["Width", "Length", "offset", "units", "load"], "variable_groups": [{"name": "solution", "variables": ["P", "alpha", "T", "x"]}], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p style=\"padding: 1em;\">$x$ =&nbsp;[[1]] &nbsp;$\\qquad T$ =&nbsp;[[0]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "Tension", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "T", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "x", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "x", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "3D Equilibrium: Hanging Plate", "extensions": ["geogebra", "linear-algebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Equilibrium", "equilibrium", "Mechanics", "mechanics", "Statics", "statics"], "metadata": {"description": "<p>3D equilibrium of a particle problem. &nbsp;Rectangular steel plate supported by three cables, dimensions and density given.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<table>\n<tbody>\n<tr style=\"text-align: center;\">\n<td style=\"width: 621px;\">{applet}</td>\n<td style=\"width: 298px; text-align: left;\"><em>You can rotate the diagram and move the labels with the mouse, zoom with the mouse wheel, and shift-drag to pan.</em></td>\n</tr>\n</tbody>\n</table>\n<p>A &nbsp;$\\var{qty(L,mm)} \\times \\var{qty(W,mm)}$ steel plate $\\var{qty(t,mm)}$ thick is suspended from point $P$ located &nbsp;$\\var{qty(H,mm)}$ above the center of the plate.</p>\n<p>Knowing that $DE = \\var{qty(DE,mm)}$ and that the density of the steel is $\\rho = \\var{qty(rho, \"kg/m^3\")}$, determine the tensions in the three cables.</p>\n<p></p>", "advice": "<p style=\"padding-left: 40px;\">To find the tensions in the cables, consider equilibrium of particle $P$, and note that force $\\mathbf{P}$ acts vertically up with a magnitude equal to the weight of the plate.</p>\n<p><strong>Find the weight of the plate, and the upward force </strong>$\\mathbf{P}$<strong>.</strong></p>\n<p style=\"padding-left: 40px;\">$\\begin{align} W &amp;= m g = \\rho\\ (L\\times W \\times t)\\ g \\\\<br/>&amp; = \\var{qty(rho, \"kg/m^3\")} \\times \\left(\\var{qty(L,\"mm\")} \\times \\var{qty(W,\"mm\")} \\times \\var{qty(t,\"mm\")} \\right) \\times \\left(\\frac{\\var{qty(1, \"m\")}}{\\var{qty(1000,\"mm\")}}\\right)^3 \\times \\var{g}\\\\<br/>&amp; = \\var{siground(weight,4)}\\\\ \\mathbf{P} &amp;= \\langle 0,0, \\var{siground(scalar(weight),4)} \\rangle \\text{ N}\\\\ \\end{align}$</p>\n<p><strong>Find position vectors and corresponding unit vectors from point </strong>$P$<strong> to points </strong>$A$<strong>, </strong>$B$<strong>, and </strong>$D$<strong>.</strong></p>\n<p style=\"padding-left: 40px;\">$\\begin{align} <br/>r_A &amp;= \\var{ brackets(r_A)} \\text{ mm} &amp; u_A &amp;= \\frac{r_A}{|r_A|} = \\var{brackets(U_A)} &nbsp;\\\\<br/>r_B &amp;= \\var{ brackets(r_B)} \\text{ mm} &amp; u_B &amp;= \\frac{r_B}{|r_B|} = \\var{brackets(U_B)} \\\\<br/>r_D &amp;= \\var{ brackets(r_D)} \\text{ mm} &amp; u_D &amp;= \\frac{r_D}{|r_D|} = \\var{brackets(U_D)} \\\\ <br/>\\end{align}$</p>\n<p><strong>Express the forces in the cables in terms of unknown tensions and the unit vectors.</strong></p>\n<p style=\"padding-left: 40px;\">$\\begin{align} <br/>\\mathbf{T_A} &amp; = T_A u_A = T_A \\var{brackets(u_A)}\\\\ <br/>\\mathbf{T_B} &amp; = T_B u_B = T_B \\var{brackets(u_B)}\\\\ <br/>\\mathbf{T_D} &amp; = T_D u_A = T_D \\var{brackets(u_D)}\\\\ <br/>\\end{align}$</p>\n<p><strong>Set up three scalar equilibrium equations corresponding to</strong> $\\mathbf{T_A} + \\mathbf{T_B} + \\mathbf{T_D} + \\mathbf{P} = 0$.</p>\n<p>\\begin{align} <br/>\\Sigma F_x&amp;=0: &amp;\\simplify[!zeroTerm]{+{precround(U_A[0],3)} T_A + {precround(U_B[0],3)} T_B + { precround(U_D[0],3)} T_D + 0 = 0 }\\\\<br/>\\Sigma F_y&amp;=0: &amp;\\simplify[!zeroTerm]{+{precround(U_A[1],3) } T_A + {precround(U_B[1],3) } T_B + { precround(U_D[1],3) } T_D + 0 =0} \\\\<br/>\\Sigma F_z&amp;=0: &amp;\\simplify[!zeroTerm]{{precround(U_A[2],3) } T_A + {precround(U_B[2],3) } T_B + { precround(U_D[2],3) } T_D + {siground(scalar(weight),4)} =0}\\\\<br/>\\end{align}</p>\n<p><strong>Solve the equilibrium equations simultaneously to get:</strong></p>\n<p style=\"padding-left: 40px;\">$\\begin{align}<br/>T_A &amp;= \\var{siground(qty(T_A,\"N\"),4)}\\\\<br/>T_B &amp;= \\var{siground(qty(T_B,\"N\"),4)}\\\\<br/>T_D &amp;= \\var{siground(qty(T_D,\"N\"),4)}\\\\ <br/>\\end{align}$</p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"applet": {"name": "applet", "group": "inputs", "definition": "geogebra_applet('e83pdpt8',params)", "description": "", "templateType": "anything", "can_override": false}, "H": {"name": "H", "group": "inputs", "definition": "random(300..650#25)", "description": "<p>height of hook</p>", "templateType": "anything", "can_override": false}, "W": {"name": "W", "group": "inputs", "definition": "random(400..800#50)", "description": "<p>width of plate in mm</p>", "templateType": "anything", "can_override": false}, "L": {"name": "L", "group": "inputs", "definition": "random(300..1000#20)", "description": "<p>length of plate in mm</p>", "templateType": "anything", "can_override": false}, "frac": {"name": "frac", "group": "inputs", "definition": "random(0.2..0.8#0.1 except 0.5)", "description": "<p>for ggb: fraction of length W to get CD</p>", "templateType": "anything", "can_override": false}, "params": {"name": "params", "group": "inputs", "definition": "[H: decimal(H/100), W: decimal(W/100), L: decimal(L/100), t: frac]", "description": "", "templateType": "anything", "can_override": false}, "mm": {"name": "mm", "group": "inputs", "definition": "\"mm\"", "description": "<p>units</p>", "templateType": "anything", "can_override": false}, "CD": {"name": "CD", "group": "calculations", "definition": "W frac", "description": "<p>segment CD, no closer than 150 mm to corners</p>", "templateType": "anything", "can_override": false}, "rho": {"name": "rho", "group": "inputs", "definition": "random(7750..8050#10)", "description": "<p>density of steel in kg/m^3</p>", "templateType": "anything", "can_override": false}, "DE": {"name": "DE", "group": "calculations", "definition": "(1-frac)W", "description": "", "templateType": "anything", "can_override": false}, "t": {"name": "t", "group": "inputs", "definition": "random(20..40#5)", "description": "<p>thickness of plate in mm</p>", "templateType": "anything", "can_override": false}, "weight": {"name": "weight", "group": "calculations", "definition": "qty(W,mm) * qty(L,mm) * qty(t,mm) * qty(rho, \"kg/m^3\") * g  in \"N\"\n", "description": "", "templateType": "anything", "can_override": false}, "g": {"name": "g", "group": "inputs", "definition": "9.81 * quantity(\"m/s^2\")", "description": "", "templateType": "anything", "can_override": false}, "r_A": {"name": "r_A", "group": "vectors", "definition": "vector(L/2,-W/2,-H)", "description": "<p>position vector to A from P in mm</p>", "templateType": "anything", "can_override": false}, "r_B": {"name": "r_B", "group": "vectors", "definition": "vector(L/2,W/2,-H)", "description": "<p>position vector to B from P in mm</p>", "templateType": "anything", "can_override": false}, "r_D": {"name": "r_D", "group": "vectors", "definition": "vector(-L/2,-W/2+DE,-H)", "description": "<p>position vector to D from P in mm</p>", "templateType": "anything", "can_override": false}, "u_A": {"name": "u_A", "group": "vectors", "definition": "r_A/abs(r_A)", "description": "<p style=\"text-align: left;\">unit vector to A</p>", "templateType": "anything", "can_override": false}, "u_B": {"name": "u_B", "group": "vectors", "definition": "r_B/abs(r_b)", "description": "<p>unit vector to B</p>", "templateType": "anything", "can_override": false}, "u_D": {"name": "u_D", "group": "vectors", "definition": "r_D/abs(r_D)", "description": "<p>unit vector to D</p>", "templateType": "anything", "can_override": false}, "MA": {"name": "MA", "group": "matrices", "definition": "transpose(matrix(u_A,u_B,u_D))", "description": "<p>3x3 matrix of unit vectors</p>\n<p>[[U_Ax U_Bx U_Dx]</p>\n<p>[U_Ay U_By U_Dy]</p>\n<p>[U_Az U_Bz U_Dz]]</p>", "templateType": "anything", "can_override": false}, "P": {"name": "P", "group": "matrices", "definition": "matrix([0],[0],[scalar(weight)])", "description": "<p>column vector of upward force P</p>", "templateType": "anything", "can_override": false}, "MC": {"name": "MC", "group": "matrices", "definition": "augment(MA,-P)", "description": "<p>3x4 augmented matrix &nbsp;P is negative since it needs to move across equals sign</p>", "templateType": "anything", "can_override": false}, "soln": {"name": "soln", "group": "matrices", "definition": "reduced_row_echelon_form(MC)", "description": "<p>this finds solution</p>", "templateType": "anything", "can_override": false}, "T_A": {"name": "T_A", "group": "tensions", "definition": "soln[0][3]", "description": "", "templateType": "anything", "can_override": false}, "T_B": {"name": "T_B", "group": "tensions", "definition": "soln[1][3]", "description": "", "templateType": "anything", "can_override": false}, "T_D": {"name": "T_D", "group": "tensions", "definition": "soln[2][3]", "description": "", "templateType": "anything", "can_override": false}, "F_A": {"name": "F_A", "group": "check", "definition": "T_A u_A", "description": "<p>Vector force A</p>", "templateType": "anything", "can_override": false}, "sum": {"name": "sum", "group": "check", "definition": "F_A+F_B+F_D+F_P", "description": "<p>this should equal (0,0,0)</p>", "templateType": "anything", "can_override": false}, "F_B": {"name": "F_B", "group": "check", "definition": "T_B U_B", "description": "<p>Vector force B</p>", "templateType": "anything", "can_override": false}, "F_D": {"name": "F_D", "group": "check", "definition": "T_D u_D", "description": "<p>Vector force D</p>", "templateType": "anything", "can_override": false}, "F_P": {"name": "F_P", "group": "check", "definition": "vector(0,0,scalar(weight))", "description": "<p>Vector force P</p>", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "inputs", "variables": ["W", "L", "H", "frac", "rho", "t", "applet", "params", "g", "mm"]}, {"name": "calculations", "variables": ["DE", "CD", "weight"]}, {"name": "vectors", "variables": ["r_A", "r_B", "r_D", "u_A", "u_B", "u_D"]}, {"name": "matrices", "variables": ["MA", "P", "MC", "soln"]}, {"name": "tensions", "variables": ["T_A", "T_B", "T_D"]}, {"name": "check", "variables": ["F_A", "F_B", "F_D", "F_P", "sum"]}], "functions": {"brackets": {"parameters": [["v", "vector"]], "type": "string", "language": "jme", "definition": "latex(\"\\\\langle \" + precround(v[0],3) + \", \" + precround(v[1],3) + \", \" + precround(v[2],3) + \" \\\\rangle\" )"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Answers", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>$T_A$ = [[0]]&nbsp;$T_B$ = [[1]] $T_D$ = [[2]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$T_A$", "marks": "20", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(T_A, \"N\")", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$T_B$", "marks": "20", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(T_B, \"N\")", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$T_D$", "marks": "20", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(T_D, \"N\")", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}, {"name": "Multi-particle Equilibrium", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["Two suspended loads", "Cylinders in a trough"], "variable_overrides": [[], []], "questions": [{"name": "Equilibrium of a particle: two suspended loads", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["2-d", "2-D", "equilibrium", "Equilibrium", "mechanics", "Mechanics", "particle", "Particle", "statics", "Statics"], "metadata": {"description": "<p>Find the tensions is a system of cables supporting two loads.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{geogebra_applet('vzqtfrbq',[['a1',a1+\"&deg;\"],['a2',a2+\"&deg;\"],['a3',a3+\"&deg;\"]])}</p>\n<p>Two loads $W_1 = \\var{w1}$, and&nbsp;$W_2 = \\var{w2}$ are suspended from a system of cables as shown. &nbsp;Determine the tensions in the cables.</p>", "advice": "<p>Begin by drawing a free body diagram of particle <em>A</em>, then apply the equations of equilibrium.</p>\n<p>$\\begin{align}\\\\ \\Sigma F_x = 0 &nbsp;\\\\-{T_B}_x + {T_C}_x = 0 \\end{align} \\\\ T_B \\cos(\\var{a1}&deg;) = T_C \\sin(\\var{90-a2}&deg;) \\qquad(1)$</p>\n<p>$\\begin{align}\\\\ \\Sigma F_y = 0 &nbsp;\\\\{T_B}_y + {T_C}_y&nbsp;- W_1 = 0 \\end{align} \\\\ T_B&nbsp;\\sin(\\var{a1}&deg;) +&nbsp;T_C \\cos(\\var{90-a2})&deg; = W_1 \\qquad(2)$</p>\n<p>Solve (1) and (2) simultaneously for $T_B$ and $T_C$.</p>\n<p>$T_B = \\var{siground(TB,4)}, \\quad T_C = \\var{siground(TC,4)}$</p>\n<hr/>\n<p>With $T_C$ known, use a similar approach on particle $C$ to find $T_D$ and $T_E$. &nbsp;</p>\n<p>Since cable<em> CD</em> is horizontal $T_D$&nbsp;has no <em>y</em>-component, so&nbsp;the $\\Sigma F_y = 0$ equation only has one unknown&nbsp;and&nbsp;simultaneous equations are unnecessary in this case.</p>\n<p>$T_D&nbsp;= \\var{siground(TD,4)}, \\quad T_E = \\var{siground(TE,4)}$</p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"forceC": {"name": "forceC", "group": "check", "definition": "vector(cos(radians(a2)),sin(radians(a2))) scalar(TC)\n", "description": "", "templateType": "anything", "can_override": false}, "forceE": {"name": "forceE", "group": "check", "definition": "vector(cos(radians(a3)),sin(radians(a3))) scalar(TE)", "description": "", "templateType": "anything", "can_override": false}, "TB": {"name": "TB", "group": "magnitudes", "definition": "w1 cos(radians(a2))/sin(radians(a1+a2))", "description": "", "templateType": "anything", "can_override": false}, "forceD": {"name": "forceD", "group": "check", "definition": "vector(scalar(TD),0)", "description": "", "templateType": "anything", "can_override": false}, "a2": {"name": "a2", "group": "input", "definition": "random(10..70#5)", "description": "<p>a2 is the angle from the horizontal to AC. &nbsp;Note angle shown on diagram is the complement of a2</p>", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "input", "definition": "false", "description": "", "templateType": "anything", "can_override": false}, "TE": {"name": "TE", "group": "magnitudes", "definition": "(W2 + TC sin(radians(A2)))/sin(radians(A3))", "description": "", "templateType": "anything", "can_override": false}, "a1": {"name": "a1", "group": "input", "definition": "random(10..80#5)", "description": "<p>angle of rope AB from horizontal, as shown on diagram.</p>", "templateType": "anything", "can_override": false}, "a3": {"name": "a3", "group": "input", "definition": "random(20..70#5)", "description": "<p>angle of CE as shown on diagram.</p>", "templateType": "anything", "can_override": false}, "w2": {"name": "w2", "group": "input", "definition": "qty(random(10..100#5),units)", "description": "", "templateType": "anything", "can_override": false}, "TC": {"name": "TC", "group": "magnitudes", "definition": "w1 cos(radians(a1))/sin(radians(a1+a2))\n\n", "description": "", "templateType": "anything", "can_override": false}, "w1": {"name": "w1", "group": "input", "definition": "qty(random(10..100#5),units)", "description": "", "templateType": "anything", "can_override": false}, "forceB": {"name": "forceB", "group": "check", "definition": "vector(-cos(radians(A1)),sin(radians(A1))) scalar(TB)", "description": "", "templateType": "anything", "can_override": false}, "TD": {"name": "TD", "group": "magnitudes", "definition": "TC cos(radians(a2))-TE cos(radians(a3))", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "input", "definition": "'lb'", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "a1 <> a2 and a3>a2+10 and scalar(TD) > 0", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "input", "variables": ["a1", "a2", "a3", "w1", "w2", "units", "debug"]}, {"name": "magnitudes", "variables": ["TC", "TE", "TD", "TB"]}, {"name": "check", "variables": ["forceB", "forceC", "forceE", "forceD"]}], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "First Particle", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Draw a free body diagram of point <em>A</em> and apply the equations of equilibrium to determine the tensions in cables <em>AB</em> and <em>AC</em>.</p>\n<p>$T_{AB}$ =&nbsp;[[0]] <span data-jme-visible=\"debug\">{siground(TB,4)}</span></p>\n<p>$T_{AC}$ =&nbsp;[[1]] <span data-jme-visible=\"debug\">{siground(TC,4)}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "TB", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "TB", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "TC", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "TC", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Second Particle", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Draw a free body diagram of point <em>C</em>&nbsp;and apply the equations of equilibrium to determine the tensions in cables <em>CE&nbsp;</em>and <em>CD</em>.</p>\n<p>$T_{CE}$ =&nbsp;[[0]] <span data-jme-visible=\"debug\">{siground(TE,4)}</span></p>\n<p>$T_{CD}$ =&nbsp;[[1]] <span data-jme-visible=\"debug\">{siground(TD,4)}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "TE", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "TE", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "TD", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "TD", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Equilibrium of two particles: Cylinders in a trough", "extensions": ["geogebra", "quantities", "weh"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Equilibrium", "equilibrium", "Free Body Diagrams", "Mechanics", "mechanics", "Particle", "particle", "Statics", "statics"], "metadata": {"description": "<p>Equilibrium of two interacting particles.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>&lt;p\"&gt;{geogebra_applet('dmn6ddbb', [[\"width\", width], [\"r1\",r1], [\"r2\",r2]] )}</p>\n<p>Two cylinders are placed&nbsp;in a {width} {units[0]} wide container.&nbsp;The blue cylinder has a radius $r_1$ = {d1/2}&nbsp;{units[0]}&nbsp;and weighs {w1} {units[1]} and&nbsp;the yellow&nbsp;cylinder has a radius $r_2$ = {d2/2} {units[0] }&nbsp;and weighs {w2} {units[1]}. &nbsp;</p>", "advice": "<p>Given:</p>\n<ul>\n<li>$d$ = {width}&nbsp;{units[0]}&nbsp;$\\qquad r_1$ = {r1}&nbsp;{units[0]} &nbsp;$\\qquad W_1 = $ {w1} {units[1]}&nbsp;$\\qquad r_2$ = {r2}&nbsp;{units[0]} &nbsp;$\\qquad W_2 = $ {w2} {units[1]}</li>\n</ul>\n<p>Draw free body diagrams of the two cylinders.</p>\n<p>{geogebra_applet('rchz6eew', [[\"width\", width], [\"r1\",r1], [\"r2\",r2]] )}</p>\n<p>Find angle $\\theta$ from the geometry of the problem.</p>\n<p style=\"padding-left: 30px;\">$\\theta =cos^{-1} \\left( \\dfrac{d - r_1- r_2}{r_1+r_2} \\right) = \\var{siground(theta,4)}&deg;$</p>\n<p>Find force&nbsp;$A$ using equilibrium of the yellow cylinder</p>\n<p style=\"padding-left: 30px;\">$\\begin{align} \\Sigma F_y &amp;= 0\\\\A_y - W_2 &amp;= 0\\\\&nbsp;A \\sin \\theta &amp;= W_2\\\\&nbsp; A &amp;= W_2\\,/\\,\\sin \\theta &amp;=\\var{show(A)}\\end{align}$</p>\n<p>Find forces $B$ and $C$ using equilibrium of the blue cylinder</p>\n<p style=\"padding-left: 30px;\">$\\begin{align} \\Sigma F_y &amp;= 0 &amp; \\Sigma F_x &amp;=0\\\\ B - A_y - W_1 &amp;= 0 &amp; C-A_x &amp;=0\\\\ B &amp;= W_1 + A \\sin \\theta &amp; C &amp;= A \\cos\\theta \\\\&amp;= \\var{show(B)} &amp; &amp;=\\var{show(C)} \\end{align}$</p>\n<p></p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"B": {"name": "B", "group": "calculated", "definition": "w1 + A sin(radians(theta))", "description": "", "templateType": "anything", "can_override": false}, "theta": {"name": "theta", "group": "calculated", "definition": "degrees(arccos(base/r))", "description": "", "templateType": "anything", "can_override": false}, "r2": {"name": "r2", "group": "calculated", "definition": "d2/2", "description": "", "templateType": "anything", "can_override": false}, "base": {"name": "base", "group": "calculated", "definition": "width - (d1+d2)/2\n", "description": "", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "calculated", "definition": "A cos(radians(theta))", "description": "", "templateType": "anything", "can_override": false}, "r": {"name": "r", "group": "calculated", "definition": "(d1+d2)/2", "description": "<p>distance from center to center</p>", "templateType": "anything", "can_override": false}, "width": {"name": "width", "group": "Ungrouped variables", "definition": "random(d1..d1+d2)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "['ft','lb']", "description": "", "templateType": "anything", "can_override": false}, "d1": {"name": "d1", "group": "Ungrouped variables", "definition": "random(4..12 #2)", "description": "<p>diameter 1</p>", "templateType": "anything", "can_override": false}, "r1": {"name": "r1", "group": "calculated", "definition": "d1/2", "description": "", "templateType": "anything", "can_override": false}, "w1": {"name": "w1", "group": "Ungrouped variables", "definition": "random(1000..5000#250)", "description": "", "templateType": "anything", "can_override": false}, "d2": {"name": "d2", "group": "Ungrouped variables", "definition": "random(d1/2 .. d1)", "description": "<p>diameter 2</p>\n<p></p>", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "calculated", "definition": "w2/sin(radians(theta))", "description": "", "templateType": "anything", "can_override": false}, "w2": {"name": "w2", "group": "Ungrouped variables", "definition": "siground(w1 d2^2/d1^2,2)", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "base < r  and width > d1 and d1 <> d2", "maxRuns": 100}, "ungrouped_variables": ["width", "d1", "d2", "units", "w1", "w2"], "variable_groups": [{"name": "calculated", "variables": ["base", "r1", "r2", "r", "theta", "A", "B", "C"]}], "functions": {"show": {"parameters": [["f", "number"]], "type": "number", "language": "jme", "definition": "qty(siground(f,4),units[1])"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Answers", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Assuming smooth contact surfaces, determine the magnitudes of&nbsp;Force <em>A</em>, where the two cylinders touch,&nbsp;Force <em>B</em>&nbsp;where the blue cylinder touches the bottom of the trough, and&nbsp;Force<em> C</em>&nbsp;where it touches the left wall.</p>\n<p><em>$A$</em>&nbsp;=&nbsp;[[0]]&nbsp; &nbsp;$B$&nbsp;=&nbsp;[[1]]&nbsp; &nbsp;$C$ = [[2]] &nbsp;</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(A,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(B,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "C", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(C,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}], "allowPrinting": true, "navigation": {"allowregen": true, "reverse": true, "browse": true, "allowsteps": true, "showfrontpage": false, "showresultspage": "oncompletion", "navigatemode": "menu", "onleave": {"action": "none", "message": ""}, "preventleave": true, "typeendtoleave": false, "startpassword": "", "allowAttemptDownload": false, "downloadEncryptionKey": ""}, "timing": {"allowPause": true, "timeout": {"action": "none", "message": ""}, "timedwarning": {"action": "none", "message": ""}}, "feedback": {"showactualmark": true, "showtotalmark": true, "showanswerstate": true, "allowrevealanswer": true, "advicethreshold": 0, "intro": "", "end_message": "", "reviewshowscore": true, "reviewshowfeedback": true, "reviewshowexpectedanswer": true, "reviewshowadvice": true, "feedbackmessages": []}, "diagnostic": {"knowledge_graph": {"topics": [], "learning_objectives": []}, "script": "diagnosys", "customScript": ""}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "extensions": ["/srv/numbas/media/user-extensions/extracted/41/geogebra", "/srv/numbas/media/user-extensions/extracted/224/linear-algebra", "/srv/numbas/media/user-extensions/extracted/55/quantities", "/srv/numbas/media/user-extensions/extracted/98/weh"], "custom_part_types": [{"source": {"pk": 24, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/24/edit"}, "name": "Angle quantity", "short_name": "angle-quantity-from-reference", "description": "<p>Angle&nbsp;as a quantity in degrees.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['correct_quantity'])", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \nright and good_units and right_sign and angle_in_range, add_credit(1.0,'Correct.'),\nright and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\nright and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but missing degree symbol.'),\nright and good_units and right_sign and not angle_in_range,add_credit(settings['C1'],'Angle is out of range.'),\nclose and good_units, add_credit(settings['C1'],'Close.'),\nclose and not good_units, add_credit(settings['C3'],'Answer is close, but missing degree symbol.'),\nincorrect('Wrong answer.')\n)\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\ncorrect_scalar:\nscalar(correct_quantity)\n  \n\ncorrect_quantity:\nsettings['correct_quantity']\n\ncorrect_units:\nunits(correct_quantity)\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\njoin(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,\"\u00b0\"),\" deg\")\n\n\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_quantity),\nmsg,\nfeedback(msg);false)\n\nstudent_quantity:\nswitch(not good_units, \nstudent_scalar * correct_units, \nnot right_sign,\n-quantity(student_scalar, student_units),\nquantity(student_scalar,student_units)\n)\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)\n\nangle_in_range:\nif(settings['restrict_angle'], abs(student_scalar) <= 90, true)\n\nright:\nwithinTolerance(abs(student_scalar), abs(correct_scalar), settings['right'])\n\nclose:\nwithinTolerance(student_scalar, correct_scalar, settings['close'])", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \nright and good_units and right_sign and angle_in_range, add_credit(1.0,'Correct.'),\nright and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\nright and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but missing degree symbol.'),\nright and good_units and right_sign and not angle_in_range,add_credit(settings['C1'],'Angle is out of range.'),\nclose and good_units, add_credit(settings['C1'],'Close.'),\nclose and not good_units, add_credit(settings['C3'],'Answer is close, but missing degree symbol.'),\nincorrect('Wrong answer.')\n)"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)"}, {"name": "correct_scalar", "description": "", "definition": "scalar(correct_quantity)\n  "}, {"name": "correct_quantity", "description": "", "definition": "settings['correct_quantity']"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "", "definition": "join(\nsplit(studentAnswer[len(match_student_number[0])..len(studentAnswer)]\n,\"\u00b0\"),\" deg\")\n\n"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_quantity),\nmsg,\nfeedback(msg);false)"}, {"name": "student_quantity", "description": "", "definition": "switch(not good_units, \nstudent_scalar * correct_units, \nnot right_sign,\n-quantity(student_scalar, student_units),\nquantity(student_scalar,student_units)\n)"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity)"}, {"name": "angle_in_range", "description": "", "definition": "if(settings['restrict_angle'], abs(student_scalar) <= 90, true)"}, {"name": "right", "description": "<p>Will check for correct sign elswhere.</p>", "definition": "withinTolerance(abs(student_scalar), abs(correct_scalar), settings['right'])"}, {"name": "close", "description": "<p>Must have correct sign to be close.</p>", "definition": "withinTolerance(student_scalar, correct_scalar, settings['close'])\n"}], "settings": [{"name": "correct_quantity", "label": "Correct Angle as quantity ", "help_url": "", "hint": "", "input_type": "code", "default_value": "qty(45,'deg')", "evaluate": true}, {"name": "right", "label": "Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within &plusmn; this amount from the correct value.", "input_type": "code", "default_value": "0.1", "evaluate": true}, {"name": "restrict_angle", "label": "Less than 90\u00b0", "help_url": "", "hint": "When checked, angle must be between -90&deg; and +90&deg;.", "input_type": "checkbox", "default_value": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units.", "input_type": "percent", "default_value": "75"}, {"name": "close", "label": " Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within &plusmn; this amount from the correct value.", "input_type": "code", "default_value": "0.5", "evaluate": true}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value without units.", "input_type": "percent", "default_value": "25"}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 12, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/12/edit"}, "name": "Angle quantity 2020", "short_name": "angle", "description": "<p>Adjusts all angles to 0 &lt; $\\theta$ &lt; 360.</p>\n<p>Accepts '&deg;' and 'deg' as units.</p>\n<p>Penalizes if not close enough or no units.</p>\n<p>90&deg; = -270&deg; = 450&deg;</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['expected_answer']) ", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "original_student_scalar:\nmatchnumber(studentAnswer,['plain','en'])[1]\n\nstudent_scalar:\nmod(original_student_scalar,360)\n\n\nstudent_unit:\nstudentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]\n\ninterpreted_unit:\nif(trim(student_unit)='\u00b0','deg',student_unit)\n\ninterpreted_answer:\nqty(mod(student_scalar,360),'deg')\n\nclose:\nwithintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))\n\ncorrect_scalar:\nmod(scalar(settings['expected_answer']),360)\n\nright:\nwithintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))\n\ngood_unit:\nsame(qty(1,interpreted_unit),qty(1,'deg'))\n\nmark:\nassert(close,incorrect('Incorrect.');end());\nif(right,correct('Correct angle.'), set_credit(1 - settings['close_penalty'],'Angle is close.'));\nassert(good_unit,sub_credit(settings['unit_penalty'], 'Missing or incorrect units.'))", "marking_notes": [{"name": "original_student_scalar", "description": "<p>Retuns the scalar part of students answer (which is a quantity) as a number.</p>", "definition": "matchnumber(studentAnswer,['plain','en'])[1]"}, {"name": "student_scalar", "description": "<p>Normalize angle with mod 360</p>", "definition": "mod(original_student_scalar,360)\n"}, {"name": "student_unit", "description": "<p>matchnumber(studentAnswer,['plain','en'])[0] is a string \"12.34\"</p>", "definition": "studentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]"}, {"name": "interpreted_unit", "description": "<p>Allows student to use degree symbol or 'deg' for units.</p>", "definition": "if(trim(student_unit)='\u00b0','deg',student_unit)"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(mod(student_scalar,360),'deg')"}, {"name": "close", "description": "", "definition": "withintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))"}, {"name": "correct_scalar", "description": "<p>Normalize expected_answer with mod 360</p>", "definition": "mod(scalar(settings['expected_answer']),360)"}, {"name": "right", "description": "", "definition": "withintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))"}, {"name": "good_unit", "description": "", "definition": "same(qty(1,interpreted_unit),qty(1,'deg'))"}, {"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "assert(close,incorrect('Incorrect.');end());\nif(right,correct('Correct angle.'), set_credit(1 - settings['close_penalty'],'Angle is close.'));\nassert(good_unit,sub_credit(settings['unit_penalty'], 'Missing or incorrect units.'))"}], "settings": [{"name": "expected_answer", "label": "Expected Answer", "help_url": "", "hint": "Expected angle as a quantity.", "input_type": "code", "default_value": "qty(30,'deg')", "evaluate": true}, {"name": "unit_penalty", "label": "Unit penalty", "help_url": "", "hint": "Penalty for not including degree sign or 'deg'.", "input_type": "percent", "default_value": "20"}, {"name": "close_penalty", "label": "Close Penalty", "help_url": "", "hint": "Penalty for close answer.", "input_type": "percent", "default_value": "20"}, {"name": "close_tol", "label": "Close", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked close. &nbsp;&nbsp;", "input_type": "code", "default_value": "0.5", "evaluate": false}, {"name": "right_tol", "label": "Right ", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked correct. &nbsp;", "input_type": "code", "default_value": "0.1", "evaluate": false}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}, {"source": {"pk": 1, "author": {"name": "Christian Lawson-Perfect", "pk": 7}, "edit_page": "/part_type/1/edit"}, "name": "Yes/no", "short_name": "yes-no", "description": "<p>The student is shown two radio choices: \"Yes\" and \"No\". One of them is correct.</p>", "help_url": "", "input_widget": "radios", "input_options": {"correctAnswer": "if(eval(settings[\"correct_answer_expr\"]), 0, 1)", "hint": {"static": true, "value": ""}, "choices": {"static": true, "value": ["Yes", "No"]}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nif(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)\n\ninterpreted_answer:\nstudentAnswer=0\n\ncorrect_answer:\nif(eval(settings[\"correct_answer_expr\"]),0,1)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "if(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "studentAnswer=0"}, {"name": "correct_answer", "description": "", "definition": "if(eval(settings[\"correct_answer_expr\"]),0,1)"}], "settings": [{"name": "correct_answer_expr", "label": "Is the answer \"Yes\"?", "help_url": "", "hint": "An expression which evaluates to <code>true</code> or <code>false</code>.", "input_type": "mathematical_expression", "default_value": "true", "subvars": false}], "public_availability": "always", "published": true, "extensions": []}], "resources": []}