// Numbas version: exam_results_page_options
{"name": "Chapter 8 Exercises", "metadata": {"description": "<p>End of chapter exercises for <a href=\"http://engineeringstatics.org\"><em>Engineering Statics: Open and Interactive</em></a>&nbsp;</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "duration": 0, "percentPass": 0, "showQuestionGroupNames": true, "shuffleQuestionGroups": false, "showstudentname": true, "question_groups": [{"name": "Internal Forces", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["Distributed Load"], "variable_overrides": [[]], "questions": [{"name": "Internal force: overhanging beam", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["bending moment", "distributed load", "internal forces", "Mechanics", "mechanics", "shear", "Statics", "statics"], "metadata": {"description": "<p>Calculate reactions and shear and bending moment at a point for&nbsp;an overhanging beam with a constant&nbsp;or uniformly varying distributed load.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet(500,215,false)}</p>\n<p style=\"padding: 3px;\">The beam shown supports a<span data-jme-visible=\"Wa=Wb\"> uniformly distributed load of $w$ = {Wa}.</span><span data-jme-visible=\"Wa&lt;&gt;Wb\"> load that varies&nbsp;uniformly from {Wa} at the left end to {Wb} at the right end.</span>&nbsp;</p>\n<p style=\"padding-left: 30px;\">The lengths of the beam segments are $d_1$ = {display(d_1)}, $d_2$ = {display(d_2)}, and $d_3$ = {display(d_3)}.</p>", "advice": "<p><strong>1.</strong>&nbsp;<strong>Draw a FBD of the entire beam and find&nbsp;reactions at <em>A</em>&nbsp;and <em>C</em>.</strong></p>\n<p style=\"padding-left: 30px;\">{applet(500,566,true)}</p>\n<p style=\"padding-left: 30px;\"><strong>a. &nbsp;Replace distributed load with an equivalent concentrated load.</strong></p>\n<p style=\"padding-left: 30px;\">$W$ = {W_t}, &nbsp; &nbsp;&nbsp;$d$ = {display(dw)}</p>\n<p style=\"padding-left: 30px;\"><strong>b. &nbsp;Apply equilibrium equations.</strong></p>\n<p style=\"padding-left: 30px;\">$\\begin{align} \\Sigma M_A &amp;= 0 &amp; &nbsp;\\Sigma F_y &amp;=0 \\\\C \\cdot\\var{if(C[0]&lt;D[0],latex('d_1'),latex('(d_1+d_2)'))} &amp;= &nbsp;W&nbsp;\\cdot&nbsp;d &nbsp;&amp; &nbsp;\\simplify{{if(scalar(FA)&lt;0,-1,1)}&nbsp;A} + C &nbsp;&amp;= W = \\var{W_t}\\\\ C &amp;= \\var{display(FC)} \\uparrow &amp;&nbsp;A &amp;= \\var{display(abs(FA))} &nbsp;\\var{if(F_A[1]&gt;0,latex('\\\\uparrow'),latex('\\\\downarrow'))}\\end{align}$</p>\n<p><strong>2. Draw a FBD of the portion of the beam between <em>A</em> and <em>D</em> and find the shear and bending moment.</strong></p>\n<p style=\"padding-left: 30px;\"><strong>a. &nbsp;Determine the&nbsp;distributed load above point D.</strong></p>\n<p style=\"padding-left: 60px;\">Let $w_A$, $w_B$, and $w_D$ be the magnitude of the distributed load at points $A$, $B$, and $D$ respectively, and $L$ the length of the beam.</p>\n<p style=\"padding-left: 60px;\">Given: $w_A = \\var{wA},\\qquad w_B = \\var{wB}\\qquad L = (d_1 + d_2 + d_3) = \\var{L}$ &nbsp;</p>\n<p style=\"padding-left: 60px;\" data-jme-visible=\"wa=wb\">$w_D = \\var{display(wD)}$</p>\n<p style=\"padding-left: 60px;\" data-jme-visible=\"wa&lt;&gt;wb\">Using similar triangles: &nbsp;$w_D = w_A + \\dfrac{\\var{if(C[0]&gt;D[0],latex('d_1'),latex('(d_1+d_2)'))}}{L} \\left( w_B - w_A \\right) = \\var{display(wD)}$</p>\n<p style=\"padding-left: 30px;\"><strong>b. Replace distributed load with an equivalent concentrated load.</strong></p>\n<p style=\"padding-left: 60px;\">$W'$ = {display(W_p)}, &nbsp; &nbsp; $d'$ = {display(dw')}</p>\n<p style=\"padding-left: 30px;\"><strong>c. Apply equilibrium equations.</strong></p>\n<p style=\"padding-left: 60px;\">Let $\\ell = &nbsp;\\var{if(C[0]&gt;D[0],latex('d_1'),latex('d_1+d_2'))} = \\var{display(Dx)}\\text{, and} \\qquad d_\\perp = (\\ell - d') = \\var{display(Dx - dw')}$</p>\n<p style=\"padding-left: 60px;\">$\\begin{align} \\Sigma M_D &amp;= 0 &amp; \\Sigma F_y &amp;=0 \\\\&nbsp;\\simplify{{if(scalar(FA)&lt;0,1,-1)} A} \\ell + W' d_\\perp \\var{if(Cx &lt; Dx, latex('+C d_2'),'')} + M_D&amp;= 0&nbsp;&amp; \\simplify{{if(scalar(FA)&lt;0,-1,1)} A} \\var{if(Cx &lt; Dx, latex('+ C'),'')} - W' -&nbsp;V&nbsp;&amp;=0 \\\\ M_D &amp;= \\simplify{{if(scalar(FA)&gt;0,1,-1)} A} \\ell -&nbsp;W' d_\\perp&nbsp;\\var{if(Cx &lt; Dx, latex('C d_2'),'')}&nbsp;&amp; V&nbsp;&amp;= \\simplify{{if(scalar(FA)&lt;0,-1,1) }A} \\var{if(Cx &lt; Dx, latex('+ C'),'')} - W'&nbsp;\\\\ &amp;= \\var{display(M_D)}&nbsp;&amp; V &amp;= \\var{display(FV)}&nbsp;\\end{align}$</p>\n<p style=\"padding-left: 60px;\"></p>\n<p>=</p>", "rulesets": {}, "variables": {"F_Wt": {"name": "F_Wt", "group": "vectors", "definition": "vector(0,-scalar(W_t))", "description": "", "templateType": "anything"}, "L": {"name": "L", "group": "Quantities", "definition": "qty(random(6,8,12,16,20,24),units[1])", "description": "<p>overall length of the beam.</p>", "templateType": "anything"}, "d_2": {"name": "d_2", "group": "Quantities", "definition": "abs(Dx-Cx)", "description": "<p>length of second beam segment</p>", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['N','m'],['lb','ft'])", "description": "", "templateType": "anything"}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Ungrouped variables", "definition": "Vector(0,0)\n", "description": "", "templateType": "anything"}, "F_V": {"name": "F_V", "group": "vectors", "definition": "(F_A + F_Wp + if(C[0]<D[0], F_C, vector(0,0)))", "description": "", "templateType": "anything"}, "F_Wp": {"name": "F_Wp", "group": "vectors", "definition": "vector(0,-scalar(W_p))", "description": "", "templateType": "anything"}, "Dx": {"name": "Dx", "group": "Quantities", "definition": "D[0]/12 Bx", "description": "<p>x position of point d (cut)</p>", "templateType": "anything"}, "Ax": {"name": "Ax", "group": "Quantities", "definition": "qty(0,units[1])", "description": "<p>x position of point A</p>", "templateType": "anything"}, "Bx": {"name": "Bx", "group": "Quantities", "definition": "L", "description": "<p>x position of point B (right end)</p>", "templateType": "anything"}, "h2": {"name": "h2", "group": "Quantities", "definition": "abs(W_a-W_b) Wmax", "description": "<p>height of triangular portion of load</p>", "templateType": "anything"}, "FA": {"name": "FA", "group": "Quantities", "definition": "W_t * (Cx-dw) /Cx", "description": "<p>Force at A, signed</p>", "templateType": "anything"}, "FC": {"name": "FC", "group": "Quantities", "definition": "W_t dw/Cx", "description": "<p>Force at roller C, always up</p>", "templateType": "anything"}, "FV": {"name": "FV", "group": "Quantities", "definition": "FA - W_p + if(C[0]<D[0],FC,qty(0, units[0]))", "description": "<p>shear force at D, Signed</p>", "templateType": "anything"}, "w_B": {"name": "w_B", "group": "Ungrouped variables", "definition": "random(0..2#0.5)", "description": "", "templateType": "anything"}, "W_p": {"name": "W_p", "group": "Quantities", "definition": "(Wa + Wd)/2 Dx", "description": "<p>partial load to the left of point d</p>", "templateType": "anything"}, "M_D": {"name": "M_D", "group": "Quantities", "definition": "FA Dx - W_p * (Dx - dw') + if(Cx<Dx,FC,qty(0,units[0])) d_2", "description": "<p>moment at D, signed</p>\n<p>&minus;\ud835\udc34\u2113&minus;\ud835\udc4a&prime;\ud835\udc51&perp;&minus;\ud835\udc36\ud835\udc512</p>", "templateType": "anything"}, "dw": {"name": "dw", "group": "Quantities", "definition": "(Wa / 6 + Wb  /3 ) L L /W_T", "description": "<p>distance to equivalent load's centroid for whole beam</p>", "templateType": "anything"}, "W_t": {"name": "W_t", "group": "Quantities", "definition": "(Wa + Wb)/2 L", "description": "<p>Equivalent load on beam, down</p>", "templateType": "anything"}, "F_A": {"name": "F_A", "group": "vectors", "definition": "- (F_C + F_Wt)", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Ungrouped variables", "definition": "vector(random(2..10#2),0)", "description": "", "templateType": "anything"}, "Wmax": {"name": "Wmax", "group": "Quantities", "definition": "qty(random(100,200,400,500,800,1000),units[0] +\"/\" + units[1])", "description": "<p>Random load value which gets scaled geogebra_values w_a and w_b to make actual loads Wa and Wb.</p>", "templateType": "anything"}, "h1": {"name": "h1", "group": "Quantities", "definition": "min(W_a,W_b) Wmax", "description": "<p>height of rectangular portion of the load</p>", "templateType": "anything"}, "Wd": {"name": "Wd", "group": "Quantities", "definition": "wA +  (wb-wa) * if(C[0]>D[0],d_1, d_1+d_2) / L ", "description": "<p>distributed load value at point D</p>", "templateType": "anything"}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "vector(12,0)\n", "description": "", "templateType": "anything"}, "w_A": {"name": "w_A", "group": "Ungrouped variables", "definition": "random(0..2#0.5)", "description": "", "templateType": "anything"}, "Wb": {"name": "Wb", "group": "Quantities", "definition": "Wmax w_b", "description": "<p>distributed load value at point A, right end.</p>", "templateType": "anything"}, "F_C": {"name": "F_C", "group": "vectors", "definition": "vector(0,scalar(FC))", "description": "", "templateType": "anything"}, "dw'": {"name": "dw'", "group": "Quantities", "definition": "(Wa / 6 + Wd  /3 ) Dx Dx /W_p", "description": "<p>distance from A to partial load W_p</p>", "templateType": "anything"}, "Cx": {"name": "Cx", "group": "Quantities", "definition": "C[0]/12 Bx\n ", "description": "<p>x position of point&nbsp;C (roller)</p>", "templateType": "anything"}, "Wa": {"name": "Wa", "group": "Quantities", "definition": "Wmax w_a", "description": "<p>distributed load value at point A, left end</p>", "templateType": "anything"}, "D": {"name": "D", "group": "Ungrouped variables", "definition": "vector(random(2..10#2),0)", "description": "", "templateType": "anything"}, "d_1": {"name": "d_1", "group": "Quantities", "definition": "qty(min(scalar(Cx),scalar(Dx)),units[1])", "description": "<p>length of first beam segment.</p>", "templateType": "anything"}, "ggb_points": {"name": "ggb_points", "group": "Ungrouped variables", "definition": "[\n  ['C',C],['D',D],['w_A',w_a],['w_B',w_b], ['fbd','false']\n]", "description": "", "templateType": "anything"}, "d_3": {"name": "d_3", "group": "Quantities", "definition": "Bx-d_1-d_2", "description": "<p>length of third beam segment</p>", "templateType": "anything"}}, "variablesTest": {"condition": "abs(C[0]-D[0])>1 and  // not too close to each other\nw_a+w_b <> 0 and // must not both be zero = no load\nD[0] > 2 // not too close to end", "maxRuns": 100}, "ungrouped_variables": ["A", "B", "C", "D", "w_A", "w_B", "ggb_points", "units", "debug"], "variable_groups": [{"name": "Quantities", "variables": ["L", "Ax", "Bx", "Cx", "Dx", "d_1", "d_2", "d_3", "Wmax", "Wa", "Wd", "Wb", "h1", "h2", "dw", "W_t", "FC", "FA", "dw'", "W_p", "FV", "M_D"]}, {"name": "vectors", "variables": ["F_C", "F_Wt", "F_A", "F_Wp", "F_V"]}], "functions": {"display": {"parameters": [["q", "quantity"]], "type": "string", "language": "jme", "definition": "string(siground(q,4))"}, "applet": {"parameters": [["app_width", "number"], ["app_height", "number"], ["show_fbd", "boolean"]], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'susdzdmr',\n  width: app_width,\n  height: app_height\n};\n//geogebra_applet('susdzdmr') old ggb file\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(false);\n  \n  function setGGBPoint(name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    var pt = question.scope.evaluate(name).value\n    app.setFixed(name,false,false);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n\n function setGGBNumber(name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = question.scope.evaluate(name).value;\n    app.setValue(name,n);\n  }\n  \n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  app.setValue('fbd',show_fbd);\n  app.setAxesVisible(false,false);\n  app.enableShiftDragZoom(false);\n  setGGBNumber(\"w_A\");\n  setGGBNumber(\"w_B\");\n  \n \n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "showfbds": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'susdzdmr',\n  width: 500,\n  height: 500\n};\n//geogebra_applet('susdzdmr') old ggb file\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(false);\n  \n  function setGGBPoint(name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    var pt = question.scope.evaluate(name).value\n    app.setFixed(name,false,false);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n\n function setGGBNumber(name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = question.scope.evaluate(name).value;\n    app.setValue(name,n);\n  }\n  \n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  app.setValue('fbd',true);\n  app.setAxesVisible(false,false);\n  app.enableShiftDragZoom(false);\n  setGGBNumber(\"w_A\");\n  setGGBNumber(\"w_B\");\n  \n \n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the reactions at pin $A$ and roller $C$. &nbsp;Let positive values indicate upward forces.</p>\n<p>$A$ =&nbsp;[[0]] <span data-jme-visible=\"debug\">{display(FA)}</span></p>\n<p>$C$ =&nbsp;[[1]] <span data-jme-visible=\"debug\">{display(FC)}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$F_A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "FA", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$F_C$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "FC", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Internal Load", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the&nbsp;internal shear and bending moment at a section passing through point $D$. Use the standard convention for the meaning of positive shears and bending moments.&nbsp;</p>\n<p>$V_D$ &nbsp;=&nbsp;[[0]] <span data-jme-visible=\"debug\">{display(FV)}</span></p>\n<p>$M_D$ =&nbsp;[[1]] <span data-jme-visible=\"debug\">{display(M_D)}</span></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$V$", "marks": "15", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "FV", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_D$", "marks": "15", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "M_D", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}, {"name": "Shear and Bending Moment Diagrams", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["Symmetric parabolic loading", "Uniformly distributed load", "Arbitrary parabolic loading ", "Concentrated forces", "Distributed loads", "Concentrated moments", "Combined loads"], "variable_overrides": [[], [], [], [], [], [], []], "questions": [{"name": "V-M 5: Symmetric parabolic loading", "extensions": ["geogebra", "polynomials", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/newVM_cA1Sig0.ggb", "/srv/numbas/media/question-resources/newVM_cA1Sig0.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb", "Mechanics", "mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "Shear and bending moment diagram for a beam loaded with a parabolic distributed load described with a loading function.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p><span data-jme-visible=\"debug\">to do: use the show_curves(applet) &nbsp;javascript function when Step 2 is shown to show V and M curves. &nbsp;With the procedure shown in the steps, the advice section is redundant. Diagram sometimes doesn't load properly. &nbsp;Need to change the ggb applet to the one contained in Arbitrary Parabolic Loading.</span></p>\n<p>A {qty(2b, units[0])} long, simply-supported beam is subjected to a symmetrical parabolic loading, where</p>\n<p>$w\\!(x) =\\simplify[fractionNumbers]{{w}}$ &nbsp; &nbsp;[{units[1]}/{units[0]}].</p>\n<p>{applet}</p>\n<p></p>", "advice": "<p>Given $w(x)$ and beam length $L$,</p>\n<p>1. &nbsp;Find load $W= \\int_0^L w(x)\\; dx$</p>\n<p>2. &nbsp;By symmetry, the reactions are half the load. &nbsp;$ A = B = W/2$</p>\n<p>3. &nbsp;Integrate $V(x) = \\int w(x)\\; dx$ to get the shear function.</p>\n<p style=\"padding-left: 30px;\">Maximum shear occurs at the ends, where $d V&nbsp;/d x = -w(x) = 0$</p>\n<p style=\"padding-left: 30px;\">$V_{max} = V(0)$</p>\n<p>4. &nbsp;Integrate $M(x) = \\int V(x)\\; dx$ to get moment function. &nbsp;</p>\n<p style=\"padding-left: 30px;\">Maximum moment occurs at midpoint, where $dM/dx = V = 0$</p>\n<p style=\"padding-left: 30px;\">$M_{max} = M(\\var{b})$</p>\n<p><em>Don't forget to evaluate the constant of integration when deriving the shear and bending moment functions.</em></p>\n<p></p>\n<p></p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}, "applet": {"name": "applet", "group": "geogebra diagram", "definition": "geogebra_file('newVM_cA1Sig0.ggb' , ggb_params)", "description": "<p>was geogebra_applet('symmetric-parabolic-loading_HCdYjqQ.ggb' , ggb_params)</p>", "templateType": "anything", "can_override": false}, "ggb_params": {"name": "ggb_params", "group": "geogebra diagram", "definition": "[ unitsD: '\"' + units[0] + '\"',\n  unitsF: '\"' + units[1] + '\"',\n A: [definition: vector(0,0), visible: false ],\n B: [definition: vector(2 b,0), visible: false], \n C: [definition: vector(b,h), visible: false], \n L: 2b,\n showV:[definition: 'false', visible: true],\n showM:[definition: 'false', visible: true],\n wscale: [definition: \"CopyFreeObject(scaleFunction(Max(abs(y(wmax)))/4))\"],\n vscale: [definition: \"CopyFreeObject(scaleFunction(Max(abs(y(vmax)))/3))\"],\n mscale: [definition: \"CopyFreeObject(scaleFunction(Max(abs(y(mmax)))/3))\"]\n]\n", "description": "<p>Points A,B, and C define the loading function. &nbsp;The curve is a polynomial passing through these three points.</p>\n<p>The beam length is 2b and height is h in force/distance units</p>\n<p></p>", "templateType": "anything", "can_override": false}, "b": {"name": "b", "group": "Ungrouped variables", "definition": "random(5..10)", "description": "<p>half width of beam \"base\"</p>", "templateType": "anything", "can_override": false}, "h": {"name": "h", "group": "Ungrouped variables", "definition": "random([1,2,2.5,5,7.5,10])random([10,100])", "description": "<p>distributed load at the center of the beam \"height\"</p>", "templateType": "anything", "can_override": false}, "w": {"name": "w", "group": "Ungrouped variables", "definition": "polynomial(x,[0,2 h/b,-h/(b^2)])", "description": "<p style=\"text-align: left;\">loading function w(x)</p>", "templateType": "anything", "can_override": false}, "F_A": {"name": "F_A", "group": "Ungrouped variables", "definition": "rational(2/3 b h)", "description": "<p>Reaction at A = half the downward force ( 2/3 bh)</p>\n<p>Reaction at B is the same.</p>", "templateType": "anything", "can_override": false}, "v": {"name": "v", "group": "Ungrouped variables", "definition": "polynomial(x,[ F_A,0, -h/b, h/(b^2)/3])", "description": "<p>the shear function. result of integrating -w(x)</p>", "templateType": "anything", "can_override": false}, "m": {"name": "m", "group": "Ungrouped variables", "definition": "polynomial(x,[0, F_A,0, -h/b/3, h/(b^2)/3/4])", "description": "<p>The moment function m(x), result of integrating v(x)</p>", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "geogebra diagram", "definition": "false", "description": "", "templateType": "anything", "can_override": false}, "w_t": {"name": "w_t", "group": "Ungrouped variables", "definition": "siground(qty(2 F_A, units[1]),4)", "description": "<p>Total Weight supported by the beam</p>", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["units", "b", "h", "w", "F_A", "v", "m", "w_t"], "variable_groups": [{"name": "geogebra diagram", "variables": ["applet", "ggb_params", "debug"]}], "functions": {"show_curvesxxx": {"parameters": [["app", "ggbapplet"]], "type": "anything", "language": "javascript", "definition": "app.promise.then(function(d) {\n  d.app.setVisible(\"showV\", true,false);\n  d.app.setVisible(\"showM\", true,false);\n  d.app.setValue(\"showV\",true);\n  d.app.setValue(\"showM\",true);\n});\nreturn \"\"//new Numbas.jme.types.ggbapplet(app);\n"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n   try{\n    var app = question.scope.variables.applet.app;  \n    app.setVisible(\"showV\", true,false);\n    app.setVisible(\"showM\", true,false);\n    app.setValue(\"showV\",true);\n    app.setValue(\"showM\",true);\n  }\n  catch(err){}  \n})\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Load and Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine the total weight supported by the beam and the reactions at $A$ and $B$.</p>\n<p>$W = $ [[0]]</p>\n<p>$R_A =$&nbsp;[[1]]&nbsp;$\\qquad R_B = $[[2]]</p>\n<p><span data-jme-visible=\"debug\">$R_A = R_B =\\simplify[fractionNumbers]{{F_A}}$ = &nbsp;{siground(qty(F_A,units[1]),4)}</span></p>", "stepsPenalty": "10", "steps": [{"type": "information", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>The total weight is found by integrating the loading function $w(x)$. &nbsp;Positive values indicate a downward load.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}W &amp;= \\simplify{defint(w,x,0,L)}\\\\ &amp;= \\simplify[fractionNumbers,canonicalOrder]{defint({w},x,0,{2b})}\\\\ &amp;= \\var{W_t}\\end{align}$</p>\n<p>By symmetry, the reactions are half the weight:</p>\n<p style=\"padding-left: 40px;\">$F_A = F_B = \\dfrac{W}{2}$.</p>"}], "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$W$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(2 F_A,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$F_A$", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(F_A,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$F_B$", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(F_A,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Shear and Bending Moment Functions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Determine expressions for:</p>\n<p>$V\\!(x) =$&nbsp;[[0]]</p>\n<p>$M\\!(x) =$&nbsp;[[1]]</p>\n<p>and then plot the shear and bending moment diagrams.</p>\n<p><span data-jme-visible=\"debug\">$V(x) = \\simplify[canonicalOrder,fractionNumbers]{{v}}$</span></p>\n<p><span data-jme-visible=\"debug\">$M(x) = \\simplify[canonicalOrder,fractionNumbers]{{m}}$</span></p>\n<p></p>", "stepsPenalty": "10", "steps": [{"type": "information", "useCustomName": false, "customName": "", "marks": 0, "scripts": {"validate": {"script": "{show_curves(applet)}", "order": "after"}}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>The shear function is found by integrating the loading function. The negative sign is because positive values of w(x) represent a load which points down.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}V(x) &amp;= &nbsp;\\simplify{-defint(w,x,0,x)} \\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{defint({-w},x,0,L)} \\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{{v}}\\end{align}$</p>\n<p>The bending moment function is found by integrating the shear function.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}M(x) &amp;= \\simplify{defint(V,x,0,x)}\\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{defint({v},x,0,L)} \\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{{M}}\\end{align}$</p>\n<p>In both cases, the resulting constant of integration is determined by considering the values at $x=0$.</p>\n<p style=\"padding-left: 40px;\">$V(0) = F_A, \\text{ and } M(0) = 0$</p>\n<p></p>\n<p><button type=\"button\" onclick=\"Numbas.exam.currentQuestion.scope.variables.applet.app.setValue('showV',true);\">Show Shear Diagram</button>&nbsp;&nbsp; <button type=\"button\" onclick=\"Numbas.exam.currentQuestion.scope.variables.applet.app.setValue('showM',true);\">Show Bending Moment Diagram</button></p>"}], "gaps": [{"type": "jme", "useCustomName": true, "customName": "V(x)", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "answer": "{expr(v)}", "answerSimplification": "fractionNumbers", "showPreview": true, "checkingType": "sigfig", "checkingAccuracy": "2", "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "singleLetterVariables": false, "allowUnknownFunctions": true, "implicitFunctionComposition": false, "caseSensitive": false, "valuegenerators": []}, {"type": "jme", "useCustomName": true, "customName": "M(x)", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "answer": "{expr(m)}", "answerSimplification": "fractionNumbers", "showPreview": true, "checkingType": "sigfig", "checkingAccuracy": "2", "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "singleLetterVariables": false, "allowUnknownFunctions": true, "implicitFunctionComposition": false, "caseSensitive": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum internal loads", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam. &nbsp;Use the standard sign convention for shear and bending moments.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>\n<p><span data-jme-visible=\"debug\">$V_{max} = \\var{siground(qty(eval(v,0),units[1]),4)}$&nbsp;</span></p>\n<p><span data-jme-visible=\"debug\">$M_{max} = \\var{siground(qty(eval(m,b),units[0]+\" \" + units[1]),4)}$</span></p>\n<p></p>", "stepsPenalty": "10", "steps": [{"type": "information", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>The maximum shear occurs at the ends, where $\\simplify{diff(V,x,1)} = -w(x) = 0$ i.e. at $x=0$, or $x=\\var{qty(2b,units[0])}$.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}V_{max} &amp;= V(0) \\\\ &amp;= \\var{siground(qty(F_A,units[1]),4)}\\end{align}$</p>\n<p>Maximum moment occurs at midpoint, where $\\simplify{diff(M,x,1)} = V = 0$</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}M_{max} &amp;= M(\\var{b}) \\\\&amp;= \\var{siground(qty(eval(m,b),units[0] + ' ' + units[1]),4)}\\end{align}$</p>"}], "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$V_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "siground(qty(F_A,units[1]),4)", "right": "0.5", "close": "1", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "siground(qty(eval(m,b),units[0] + ' ' + units[1]),4)", "right": "0.5", "close": "1", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "VM6: Uniformly distributed load", "extensions": ["geogebra", "linear-algebra", "polynomials", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/newVM_TGfqtvt.ggb", "/srv/numbas/media/question-resources/newVM_TGfqtvt.ggb"], ["question-resources/newVM_W8fZxNa.ggb", "/srv/numbas/media/question-resources/newVM_W8fZxNa.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Mechanics", "mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "<p>Sketch the shear and bending moment diagram for a simply supported beam loaded with a uniformly distributed load.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A simply-supported beam of length $L = \\var&nbsp;{qty(beamlen, units[0])}$ supports a uniformly distributed loading of $\\var{show(qty(A[1], units[1]+\"/\"+units[0]))}$, as shown. Positive loading points down. &nbsp;Sketch the shear and bending moment diagrams.</p>\n<p>{applet}</p>", "advice": "<p>The total load $W$ is the area under the loading curve, in this case a rectagle so,</p>\n<p>$W = w L = (\\var{qty(A[1], units[1]+\"/\"+units[0])})(\\var{qty(beamLen,units[0])}) = \\var{show(qty(abs(load),units[1]))}\\ \\var{arrow(-A[1])}.$</p>\n<p>By symmetry and $\\sum F_y=0$, the reactions at $A$ and $B$ are equal to half the load and act in the opposite direction of the load.</p>\n<p>$R_A = R_B = \\dfrac{W}{2} = \\var{show(qty(abs(load/2),units[1]))}\\ \\var{arrow(A[1])}.$</p>\n<p>The shear diagram for a uniformly distributed load is linear. &nbsp;It begins by jumping {if(R_A &gt; 0,'up','down')} by the concentrated load $R_A$ at the left end, then slopes {if(R_A &gt; 0,'down','up')} at a rate of $w = \\var{show(qty(-A[1], units[1]+\"/\"+units[0]))}$ until it reaches $R_B = \\var{show(qty(abs(load/2),units[1]))}$ at the left end. &nbsp;From there it jumps {if(R_B &gt; 0,'up','down')} to return to $V=\\var{qty(0,units[1])}$.</p>\n<p>The moment diagram beneath a uniformly distributed load is parabolic, and since this load is symetrical over the entire length of the beam, the vertex of the parabola will be at the midpoint of the beam. &nbsp;The beam reactions are vertical only, with no moment reactions at the ends so the moment curve should begin and end at zero with a maximum at the midpoint. &nbsp;The maximum moment is equal to the 'area' under the shear curve from $x=0$ to $x = L/2$. &nbsp;Since this 'area' is a triangle there is no need to actually integrate.</p>\n<p>$M_{max} = \\dfrac{1}{2} b h = \\dfrac{1}{2} \\left(\\dfrac{L}{2}\\right) R_A = \\var{show(qty(mmax, units[0]+\" \"+ units[1]))}$</p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"beamLen": {"name": "beamLen", "group": "Unnamed group", "definition": "random(10..20#2)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Unnamed group", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Unnamed group", "definition": "vector(0,random(-4..3) scale)", "description": "<p>Leftmost point on loading curve (x, w(x))</p>", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Unnamed group", "definition": "vector(beamLen,A[1])", "description": "<p>rightmost&nbsp;point on loading curve (x, w(x))</p>", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Unnamed group", "definition": "vector(beamLen/2,(A[1]+B[1])/2)", "description": "<p>interior&nbsp;point on loading curve (x, w(x)) defined as midpoint between A and B. to make a linear curve</p>", "templateType": "anything", "can_override": false}, "applet": {"name": "applet", "group": "functions", "definition": "geogebra_file('newVM_W8fZxNa.ggb',params)", "description": "", "templateType": "anything", "can_override": false}, "params": {"name": "params", "group": "functions", "definition": "[ unitsD: '\"' + units[0] + '\"',\n  unitsF: '\"' + units[1] + '\"',\n  showV: [definition: \"false\",  visible: false],\n  showM: [definition: \"false\",  visible: false],\n  A: A, B: B, C: C,\n  L: beamlen,\n  wscale: [definition: 'CopyFreeObject(scaleFunction(Max(abs(y(wmax)))/1.5))'],\n  vscale: [definition: 'CopyFreeObject(scaleFunction(Max(abs(y(vmax)))/4))'],\n  mscale: [definition: 'CopyFreeObject(scaleFunction(Max(abs(y(mmax)))/4))']\n]\n\n", "description": "", "templateType": "anything", "can_override": false}, "matrix": {"name": "matrix", "group": "functions", "definition": "reduced_row_echelon_form(matrix([[A[0]^2, A[0], 1, A[1]],\n  [B[0]^2, B[0], 1, B[1]],\n  [C[0]^2, C[0], 1, C[1]]]))", "description": "<p>used to solve three simultaneous equations to find C1, C2, C3</p>\n<p>y = C1 x^2 + C2 x + C3</p>", "templateType": "anything", "can_override": false}, "w": {"name": "w", "group": "functions", "definition": "polynomial(x,[matrix[2][3], matrix[1][3], matrix[0][3],0,0])", "description": "<p>loading function w(x)</p>", "templateType": "anything", "can_override": false}, "v": {"name": "v", "group": "functions", "definition": "-polynomial(x, [-R_A, w[0], w[1]/2, w[2]/3])", "description": "<p>This is the shear function V(x) = - \\int w(x) dx</p>\n<p>Constant C is reaction at x=0</p>", "templateType": "anything", "can_override": false}, "m": {"name": "m", "group": "functions", "definition": "polynomial(x,[ 0, v[0], v[1]/2, v[2]/3, v[3]/4])", "description": "", "templateType": "anything", "can_override": false}, "load": {"name": "load", "group": "Reactions", "definition": "eval(intW,beamlen) - eval(intW,0)", "description": "<p>downward force on beam = $\\simplify{defint(w,x,0,{beamlen})$</p>\n<p></p>\n<p>Positive = down</p>", "templateType": "anything", "can_override": false}, "dQy": {"name": "dQy", "group": "Reactions", "definition": "polynomial(x) w", "description": "", "templateType": "anything", "can_override": false}, "intdQy": {"name": "intdQy", "group": "Reactions", "definition": "polynomial(x, [0, dQy[0], dQy[1]/2, dQy[2]/3, dQy[3]/4])", "description": "<p>integral of dQy &nbsp;&nbsp;</p>", "templateType": "anything", "can_override": false}, "Qy": {"name": "Qy", "group": "Reactions", "definition": "eval(intdqy,beamlen)", "description": "<p>definite integral of x dw from 0 to L</p>", "templateType": "anything", "can_override": false}, "xBar": {"name": "xBar", "group": "Reactions", "definition": "Qy/load", "description": "", "templateType": "anything", "can_override": false}, "intW": {"name": "intW", "group": "Reactions", "definition": "polynomial(x, [0, w[0], w[1]/2, w[2]/3])", "description": "", "templateType": "anything", "can_override": false}, "R_B": {"name": "R_B", "group": "Reactions", "definition": "xbar load / beamlen", "description": "<p>reaction at B &nbsp;Positive is up</p>", "templateType": "anything", "can_override": false}, "R_A": {"name": "R_A", "group": "Reactions", "definition": "(beamlen-xbar) load/ beamlen", "description": "", "templateType": "anything", "can_override": false}, "check": {"name": "check", "group": "Reactions", "definition": "withintolerance(R_A+R_B,load,10^10)", "description": "<p>check sometimes has roundoff error.</p>", "templateType": "anything", "can_override": false}, "roots": {"name": "roots", "group": "maxshear", "definition": "sort(\n  if(d>=0, \n    filter(x>=0 and x <=beamlen,x,\n      let([a: w[2], b: w[1], c: w[0]], \n     [(-b + sqrt(d))/(2 a), (-b - sqrt(d))/(2 a)]\n)),[]) + [0,beamlen])", "description": "<p>use quadratic equation to find where w(x) is zero, filter out any roots not on interval, or imaginary.</p>\n<p>The maximum shear will occur at one of these points</p>", "templateType": "anything", "can_override": false}, "d": {"name": "d", "group": "Ungrouped variables", "definition": "w[1]^2 - 4 w[2] * w[0]", "description": "<p>descriminant for quadratic equation w(x)</p>", "templateType": "anything", "can_override": false}, "v_extremes": {"name": "v_extremes", "group": "maxshear", "definition": "map(vector(x,eval(v,x)),x,roots)", "description": "<p>extreme points</p>\n<p>list of shear force v(x) at ends and at roots of w(x) -- potential maximums or minimums</p>", "templateType": "anything", "can_override": false}, "v_max": {"name": "v_max", "group": "maxshear", "definition": "foldl(if(abs(pt[1])>abs(v[1]),pt,v),pt, v,  vector(0,0),v_extremes)", "description": "<p>filters the list of v_extremes to find the one with the greatest absolute value of shear</p>", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything", "can_override": false}, "scale": {"name": "scale", "group": "Unnamed group", "definition": "random(10..200#10)", "description": "", "templateType": "anything", "can_override": false}, "direction": {"name": "direction", "group": "Unnamed group", "definition": "latex(if(A[1]>0,\"\\\\downarrow\",\"\\\\uparrow\"))", "description": "<p>flag for uniform loading</p>", "templateType": "anything", "can_override": false}, "mmax": {"name": "mmax", "group": "maxshear", "definition": "beamlen R_A /4", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "load <> 0   // we really want the load to be non-zero\n", "maxRuns": 100}, "ungrouped_variables": ["d", "debug"], "variable_groups": [{"name": "Unnamed group", "variables": ["A", "B", "C", "beamLen", "units", "scale", "direction"]}, {"name": "functions", "variables": ["applet", "params", "matrix", "w", "v", "m"]}, {"name": "Reactions", "variables": ["load", "dQy", "intdQy", "Qy", "xBar", "intW", "R_B", "R_A", "check"]}, {"name": "maxshear", "variables": ["roots", "v_extremes", "v_max", "mmax"]}], "functions": {"arrow": {"parameters": [["F", "?"]], "type": "anything", "language": "jme", "definition": "if(sign(F) >= 0 ,latex(\"\\\\uparrow\"), latex(\"\\\\downarrow\"))"}, "show": {"parameters": [["A", "?"]], "type": "anything", "language": "jme", "definition": "if(abs(if(type(A)=type(qty(1,'m')),scalar(A),A))<1,\n  precround(A,4),siground(A,4))"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n   try{\n    var app = question.scope.variables.applet.app;  \n    app.setVisible(\"showV\", true,false);\n    app.setVisible(\"showM\", true,false);\n    app.setValue(\"showV\",true);\n    app.setValue(\"showM\",true);\n  }\n  catch(err){}  \n})\n\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the reactions at the end suppports. &nbsp;Use negative values to indicate downward forces.</p>\n<p>$R_A = $ [[0]]&nbsp;$\\qquad R_B=$&nbsp;[[1]]</p>\n<p>Determine the maximum bending moment. &nbsp;Use the standard sign convention.</p>\n<p>$M_{max} = $[[2]]</p>\n<p>Sketch the shear and bending moment diagrams.</p>\n<p></p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$R_A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(R_A,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$R_B$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(R_B,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(mmax, units[0]+\" \"+ units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 5a: Arbitrary parabolic loading", "extensions": ["geogebra", "linear-algebra", "polynomials", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/newVM_6j6k8Vp.ggb", "/srv/numbas/media/question-resources/newVM_6j6k8Vp.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["Mechanics", "mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "<p>Shear and bending moment diagram for a beam loaded with an arbitrary parabolic distributed load described with a loading function. &nbsp;Integrate to find reactions and equations for shear and bending moment.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A simply-supported beam of length $L = \\var&nbsp;{qty(beamlen, units[0])}$ is subjected to a parabolic loading $w\\!(x)$ given by the function:</p>\n<p>$w\\!(x) = \\simplify[fractionNumbers,canonicalOrder]{{w}}$ &nbsp;[{units[1]} / {units[0]}]</p>\n<p>The shear and bending moment diagrams are also shown.</p>\n<p>{applet}</p>\n<p><span data-jme-visible=\"debug\">Started working on maximum shear and moment, but did not finish. &nbsp;Need to solve a cubic equation by writing equation solver. I would like to turn the visibility of the curves on as a hint, but need a signal for that. &nbsp;</span></p>", "advice": "<p>Given $w(x)$ and beam length $L$,</p>\n<p>1. &nbsp;Find load $W= \\int_0^L w(x)\\; dx$</p>\n<p style=\"padding-left: 40px;\">$\\begin{align} W &amp; = \\int w\\!(x) \\text{d}x \\\\ &amp; = \\simplify[fractionNumbers,canonicalOrder]{defint({w}, x, 0, {beamlen})} \\\\ &amp;= \\left[\\simplify[fractionNumbers,canonicalOrder]{{intw}}+C_1 \\right]_0^\\var{beamlen}\\\\ &amp;= \\var{siground(qty(load,units[1]),5)} = \\var{siground(qty(abs(load),units[1]),5)} &nbsp;\\var{arrow(-load)}\\end{align}$</p>\n<p>2. &nbsp;Find $Q_y = \\int_0^L x w(x)\\;dx$</p>\n<p style=\"padding-left: 40px;\">$\\begin{align} &nbsp;Q_y &amp;= \\int_0^L x\\ w\\!(x) \\text{d}x\\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{defint({dqy},x,0,L)}\\\\&amp; = \\left[\\simplify[fractionNumbers,canonicalOrder]{{intdqy}}+C_2 \\right]_0^\\var{beamlen}\\\\ &amp;= \\var{siground(qty(Qy,units[0] + \" \" + units[1]),4)} \\end{align}$</p>\n<p>3. &nbsp;Find centroid $\\bar{x}=\\frac{Q_y}{W}$</p>\n<p style=\"padding-left: 40px;\">$\\bar{x} = \\dfrac{Q_y}{W} = \\dfrac{\\var{siground(Qy,4)}}{\\var{siground(load,4)}} = \\var{siground(qty(xbar,units[0]),4)}$</p>\n<p>4. &nbsp;Take moments about $A$ and $B$ to find reactions.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align}\\sum M_B &amp;= 0 &amp; \\sum M_A &amp;=0 \\\\ &nbsp; &nbsp;R_A L &amp;= &nbsp;\\simplify{{sign(load)} W }(L-\\bar{x}) &amp; + R_B L &amp;= \\simplify{{sign(load)} W }\\bar{x} &amp; &nbsp;\\\\ R_A&amp;= \\var{show(qty(abs(R_A),units[1]))} \\var{arrow(R_A)} &amp;&nbsp;&nbsp;R_B &amp;= \\var{show(qty(abs(R_B),units[1]))} \\var{arrow(R_B)} &nbsp;\\end{align}$</p>\n<p>5. &nbsp;Integrate $V(x) = \\int w(x)\\; dx$ to get the shear function.</p>\n<p style=\"padding-left: 40px;\">Note: <em>Positive values of</em> $w\\!(x)$ <em>indicate downward forces, so the integrations is over</em> $-w\\!(x)$.</p>\n<p style=\"padding-left: 40px;\">$\\begin{align} V\\!(x) &amp;= \\int - w\\!(x) dx \\\\&amp;= \\simplify[fractionNumbers, canonicalOrder]{int({-w},x)} \\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{{v -v[0]}}+C_3 &nbsp;&amp;&amp; v\\!(0) = R_A &nbsp;\\therefore C_3 = \\var{show(qty(R_A,\"\"))}\\\\ &amp;= \\simplify[fractionNumbers,canonicalOrder]{{v}} &amp;&amp; [\\var{units[1]}] &amp;\\end{align}$</p>\n<p>6. &nbsp;Integrate $M(x) = \\int V(x)\\; dx$ to get moment function. &nbsp;</p>\n<p style=\"padding-left: 30px;\">$\\begin{align} M\\!(x) &amp;= \\int V\\!(x) dx \\\\&amp;= \\simplify[fractionNumbers, canonicalOrder]{int({v},x)}\\\\&amp;= \\simplify[fractionNumbers,canonicalOrder]{{v}}+C_4 &nbsp;&amp;&amp; M\\!(0) =0 &nbsp;\\therefore C_4 = 0 \\\\&amp;= &nbsp;\\simplify[fractionNumbers,canonicalOrder]{{m}} &amp;&amp; [\\var{units[1]}\\text{-}\\var{units[0]} ]&amp;\\end{align}$</p>\n<p style=\"padding-left: 30px;\"></p>\n<p style=\"padding-left: 30px;\"><span data-jme-visible=\"false\">Maximum moment occurs where $dM/dx = V = 0$</span></p>\n<p style=\"padding-left: 30px;\"><span data-jme-visible=\"false\">Evaluate $M(x)$ at point of maximum bending moment.</span></p>\n<p style=\"padding-left: 30px;\"><span data-jme-visible=\"false\">Maximum shear occurs where $d V&nbsp;/d x = -w(x) = 0$</span></p>\n<p style=\"padding-left: 30px;\"><span data-jme-visible=\"false\">Evaluate $V(x)$ at point of maximum shear.</span></p>\n<p style=\"padding-left: 40px;\"></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">To find maximum shear, determine where $\\simplify{diff(v,x,1)} = -w\\!(x) = 0$ using the quadratic equation.</span></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">$x_{max} = &nbsp;\\frac{- b \\pm \\sqrt{b^2 - 4 a c}}{2a}$ where, $a= \\var[fractionNumbers]{-w[2]}, b=\\var[fractionNumbers]{-w[1]}$ and $c=\\var[fractionNumbers]{-w[0]}$.</span></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">Any real roots of $w\\!(x)$ between the beam's endpoints plus the endpoints themselves are locations of local maximums or minimums.</span></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">{v_extremes}</span></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">$\\simplify{{show(v_extremes[1])}}$</span></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">The maximum of these local maximums is the the one we want</span></p>\n<p style=\"padding-left: 40px;\"><span data-jme-visible=\"false\">$V_{max} = \\var{show(qty(v_max[1], units[1]))}$</span></p>\n<p style=\"padding-left: 40px;\"></p>\n<p style=\"padding-left: 40px;\"></p>", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"beamLen": {"name": "beamLen", "group": "Unnamed group", "definition": "random(10..20#2)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Unnamed group", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Unnamed group", "definition": "vector(0,random(-4..3) scale )", "description": "<p>Leftmost point on loading curve (x, w(x))</p>", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Unnamed group", "definition": "vector(beamLen,random(-4..3) scale )", "description": "<p>rightmost&nbsp;point on loading curve (x, w(x))</p>", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Unnamed group", "definition": "vector(random(4..beamlen-4), random(-4..4) scale )", "description": "<p>interior&nbsp;point on loading curve (x, w(x))</p>", "templateType": "anything", "can_override": false}, "applet": {"name": "applet", "group": "functions", "definition": "geogebra_file('newVM_6j6k8Vp.ggb',params)", "description": "<p>// Create the worksheet. <br />// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.<br />var params = {<br />material_id: 'r8hqdxsg',<br />width:560,<br />height:600<br />}</p>\n<p>var result = Numbas.extensions.geogebra.createGeogebraApplet(params);</p>\n<p>// Once the applet has loaded, run some commands to manipulate the worksheet.<br />result.promise.then(function(d) {<br />var app = d.app;<br />question.applet = d;<br /><br />//initialize the dimensions and forces<br /><br />function setGGBPoint(g_name, n_name = g_name) {<br />// moves point in GGB to location of Numbas Vector Variable<br />// g_name = geogebra point, n_name = numbas vector<br /><br />//var pt = question.scope.evaluate(n_name).value<br />var pt = scope.getVariable(n_name).value<br />app.setFixed(g_name,false,false);<br />app.setCoords(g_name, pt[0], pt[1]);<br />//app.setFixed(g_name,true,true);<br />}<br /><br />function setGGBNumber(g_name, n_name = g_name) {<br />// Sets number in GGB to a Numbas Variable<br />var n = scope.getVariable(n_name).value;<br />app.setValue(g_name,n);<br />}<br />var units = question.unwrappedVariables.units<br />app.setTextValue('units_d', units[0]);<br />app.setTextValue('units_f', units[1]);<br /><br />setGGBNumber('beamLen');<br />setGGBPoint(\"A'\", \"A\");<br />setGGBPoint(\"B'\", \"B\");<br />setGGBPoint(\"C'\", \"C\");<br />app.evalCommand(\"RunClickScript(Rescale)\");<br />app.setFixed(\"B\",true,true);<br /><br />app.setVisible(\"A'\", false, false);<br />app.setVisible(\"B'\", false, false);<br />app.setVisible(\"C'\", false, false);<br /><br />app.setVisible('TR',false);<br />app.setVisible('BL',false);<br />app.setLabelVisible('TR',true);<br />app.setLabelStyle('TR',2);<br />app.setLabelVisible('BL',true);<br />app.setLabelStyle('BL',2);<br />app.setCoords('BL',-4,-35);</p>\n<p>app.setVisible(\"showR\", false, false);<br />app.setVisible(\"showV\", false, false); <br />app.setVisible(\"showM\", false, false);<br />app.setVisible(\"showMax\", false, false);<br />app.setValue(\"showR\",false);<br />app.setValue(\"showV\",false);<br />app.setValue(\"showM\",false);<br />app.setValue(\"showMax\",false);<br /><br />app.setVisible(\"NewProblem\", false, false);<br />app.setVisible(\"Rescale\", false, false);<br />app.setVisible(\"textShowSoln\", false, false);<br /><br /></p>\n<p><br /><br />});</p>\n<p>// This function returns the result of `createGeogebraApplet` as an object <br />// with the JME data type 'ggbapplet', which can be substituted into the question's content.<br />return new Numbas.jme.types.ggbapplet(result);</p>", "templateType": "anything", "can_override": false}, "params": {"name": "params", "group": "functions", "definition": "[ unitsD: '\"' + units[0] + '\"',\n  unitsF: '\"' + units[1] + '\"',\n  showV: [definition: \"true\",  visible: false],\n  showM: [definition: \"true\",  visible: false],\n  A: A, B: B, C: C,\n  L: beamlen,\n  wscale: [definition: 'CopyFreeObject(scaleFunction(Max(abs(y(wmax)))/5))'],\n  vscale: [definition: 'CopyFreeObject(scaleFunction(Max(abs(y(vmax)))/3))'],\n  mscale: [definition: 'CopyFreeObject(scaleFunction(Max(abs(y(mmax)))/3))']\n]\n\n", "description": "<p>safe(\"CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))\")</p>\n<p>\"C'\": [definition: \"({b},{h} AxisStepY()/Scale_w)\"],</p>\n<p>Scale_w: [definition: safe('CopyFreeObject(scaleFunction(y(Max(w, 0.0000, beamLen)) / 3))')]</p>\n<p></p>\n<p></p>\n<p></p>\n<p>var units = question.unwrappedVariables.units<br />app.setTextValue('units_d', units[0]);<br />app.setTextValue('units_f', units[1]);<br /><br />setGGBNumber('beamLen');<br />setGGBPoint(\"A'\", \"A\");<br />setGGBPoint(\"B'\", \"B\");<br />setGGBPoint(\"C'\", \"C\");<br />app.evalCommand(\"RunClickScript(Rescale)\");<br />app.setFixed(\"B\",true,true);<br /><br />app.setVisible(\"A'\", false, false);<br />app.setVisible(\"B'\", false, false);<br />app.setVisible(\"C'\", false, false);<br /><br />app.setVisible('TR',false);<br />app.setVisible('BL',false);<br />app.setLabelVisible('TR',true);<br />app.setLabelStyle('TR',2);<br />app.setLabelVisible('BL',true);<br />app.setLabelStyle('BL',2);<br />app.setCoords('BL',-4,-35);</p>\n<p>app.setVisible(\"showR\", false, false);<br />app.setVisible(\"showV\", false, false); <br />app.setVisible(\"showM\", false, false);<br />app.setVisible(\"showMax\", false, false);<br />app.setValue(\"showR\",false);<br />app.setValue(\"showV\",false);<br />app.setValue(\"showM\",false);<br />app.setValue(\"showMax\",false);<br /><br />app.setVisible(\"NewProblem\", false, false);<br />app.setVisible(\"Rescale\", false, false);<br />app.setVisible(\"textShowSoln\", false, false);<br /><br /></p>\n<p><br /><br />});</p>", "templateType": "anything", "can_override": false}, "scale": {"name": "scale", "group": "Unnamed group", "definition": "random(5..200#5)", "description": "", "templateType": "anything", "can_override": false}, "matrix": {"name": "matrix", "group": "functions", "definition": "reduced_row_echelon_form(matrix([[A[0]^2, A[0], 1, A[1]],\n  [B[0]^2, B[0], 1, B[1]],\n  [C[0]^2, C[0], 1, C[1]]]))", "description": "<p>used to solve three simultaneous equations to find C1, C2, C3</p>\n<p>y = C1 x^2 + C2 x + C3</p>", "templateType": "anything", "can_override": false}, "w": {"name": "w", "group": "functions", "definition": "polynomial(x,[matrix[2][3], matrix[1][3], matrix[0][3],0,0])", "description": "<p>loading function w(x)</p>", "templateType": "anything", "can_override": false}, "v": {"name": "v", "group": "functions", "definition": "-polynomial(x, [-R_A, w[0], w[1]/2, w[2]/3])", "description": "<p>This is the shear function V(x) = - \\int w(x) dx</p>\n<p>Constant C is reaction at x=0</p>", "templateType": "anything", "can_override": false}, "m": {"name": "m", "group": "functions", "definition": "polynomial(x,[ 0, v[0], v[1]/2, v[2]/3, v[3]/4])", "description": "", "templateType": "anything", "can_override": false}, "load": {"name": "load", "group": "Reactions", "definition": "eval(intW,beamlen) - eval(intW,0)", "description": "<p>downward force on beam = $\\simplify{defint(w,x,0,{beamlen})$</p>\n<p></p>\n<p>Positive = down</p>", "templateType": "anything", "can_override": false}, "dQy": {"name": "dQy", "group": "Reactions", "definition": "polynomial(x) w", "description": "", "templateType": "anything", "can_override": false}, "intdQy": {"name": "intdQy", "group": "Reactions", "definition": "polynomial(x, [0, dQy[0], dQy[1]/2, dQy[2]/3, dQy[3]/4])", "description": "<p>integral of dQy &nbsp;&nbsp;</p>", "templateType": "anything", "can_override": false}, "Qy": {"name": "Qy", "group": "Reactions", "definition": "eval(intdqy,beamlen)", "description": "<p>definite integral of x dw from 0 to L</p>", "templateType": "anything", "can_override": false}, "xBar": {"name": "xBar", "group": "Reactions", "definition": "Qy/load", "description": "", "templateType": "anything", "can_override": false}, "intW": {"name": "intW", "group": "Reactions", "definition": "polynomial(x, [0, w[0], w[1]/2, w[2]/3])", "description": "", "templateType": "anything", "can_override": false}, "R_B": {"name": "R_B", "group": "Reactions", "definition": "xbar load / beamlen", "description": "<p>reaction at B &nbsp;Positive is up</p>", "templateType": "anything", "can_override": false}, "R_A": {"name": "R_A", "group": "Reactions", "definition": "(beamlen-xbar) load/ beamlen", "description": "", "templateType": "anything", "can_override": false}, "check": {"name": "check", "group": "Reactions", "definition": "withintolerance(R_A+R_B,load,10^10)", "description": "<p>check sometimes has roundoff error.</p>", "templateType": "anything", "can_override": false}, "roots": {"name": "roots", "group": "maxshear", "definition": "sort(\n  if(d>=0, \n    filter(x>=0 and x <=beamlen,x,\n      let([a: w[2], b: w[1], c: w[0]], \n     [(-b + sqrt(d))/(2 a), (-b - sqrt(d))/(2 a)]\n)),[]) + [0,beamlen])", "description": "<p>use quadratic equation to find where w(x) is zero, filter out any roots not on interval, or imaginary.</p>\n<p>The maximum shear will occur at one of these points</p>", "templateType": "anything", "can_override": false}, "d": {"name": "d", "group": "Ungrouped variables", "definition": "w[1]^2 - 4 w[2] * w[0]", "description": "<p>descriminant for quadratic equation w(x)</p>", "templateType": "anything", "can_override": false}, "v_extremes": {"name": "v_extremes", "group": "maxshear", "definition": "map(vector(x,eval(v,x)),x,roots)", "description": "<p>extreme points</p>\n<p>list of shear force v(x) at ends and at roots of w(x) -- potential maximums or minimums</p>", "templateType": "anything", "can_override": false}, "v_max": {"name": "v_max", "group": "maxshear", "definition": "foldl(if(abs(pt[1])>abs(v[1]),pt,v),pt, v,  vector(0,0),v_extremes)", "description": "<p>filters the list of v_extremes to find the one with the greatest absolute value of shear</p>", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "load <> 0   // we really want the load to be non-zero\nand abs(w[2]) > 1/10// and want to be sure it is a quadratic\n", "maxRuns": 100}, "ungrouped_variables": ["d", "debug"], "variable_groups": [{"name": "Unnamed group", "variables": ["A", "B", "C", "scale", "beamLen", "units"]}, {"name": "functions", "variables": ["applet", "params", "matrix", "w", "v", "m"]}, {"name": "Reactions", "variables": ["load", "dQy", "intdQy", "Qy", "xBar", "intW", "R_B", "R_A", "check"]}, {"name": "maxshear", "variables": ["roots", "v_extremes", "v_max"]}], "functions": {"arrow": {"parameters": [["F", "?"]], "type": "anything", "language": "jme", "definition": "if(sign(F) >= 0 ,latex(\"\\\\uparrow\"), latex(\"\\\\downarrow\"))"}, "show": {"parameters": [["A", "?"]], "type": "anything", "language": "jme", "definition": "if(abs(if(type(A)=type(qty(1,'m')),scalar(A),A))<1,\n  precround(A,4),siground(A,4))"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n   try{\n    var app = question.scope.variables.applet.app;  \n    app.setVisible(\"showV\", true,false);\n    app.setVisible(\"showM\", true,false);\n    app.setValue(\"showV\",true);\n    app.setValue(\"showM\",true);\n  }\n  catch(err){}  \n})\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the reactions at the end suppports. &nbsp;Use negative values to indicate downward forces.</p>\n<p>$R_A = $ [[0]]&nbsp;$\\qquad R_B=$&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(R_A,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(R_B,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Shear Function", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Use integration to determine the equation of the shear function $V\\!(x) = \\int -w\\!(x) \\textrm{d} x$</p>\n<p><span data-jme-visible=\"debug\">$V\\!(x) = \\simplify[fractionNumbers,canonicalOrder]{{v}}$ &nbsp;= {string(v)}</span></p>\n<p>$V\\!(x) = $[[0]]</p>", "gaps": [{"type": "jme", "useCustomName": true, "customName": "$V\\!(x)$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "answer": "{expr(v)}", "answerSimplification": "fractionNumbers,canonicalOrder", "showPreview": true, "checkingType": "sigfig", "checkingAccuracy": "2", "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, "1"], "checkVariableNames": false, "singleLetterVariables": false, "allowUnknownFunctions": true, "implicitFunctionComposition": false, "caseSensitive": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Bending Moment", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Use integration to find the bending moment function $M(x) =\\int V\\!(x) \\textrm{d}x$.</p>\n<p><span data-jme-visible=\"debug\">$M\\!(x) = \\simplify[fractionNumbers,canonicalOrder]{{m}}$ &nbsp;= {string(m)}</span></p>\n<p>$M\\!(x) = $ [[0]]</p>", "gaps": [{"type": "jme", "useCustomName": true, "customName": "$M\\!(x)$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "answer": "{expr(m)}", "answerSimplification": "fractionNumbers,canonicalOrder", "showPreview": true, "checkingType": "sigfig", "checkingAccuracy": "2", "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "singleLetterVariables": false, "allowUnknownFunctions": true, "implicitFunctionComposition": false, "caseSensitive": false, "valuegenerators": []}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 1a: Concentrated forces, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM1_cwT2ujZ.ggb", "/srv/numbas/media/question-resources/VM1_cwT2ujZ.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb"], "metadata": {"description": "<p>Shear and Bending Moment diagram for a beam with several concentrated loads. &nbsp;Student can't see V &amp; M diagrams a hints.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>Draw&nbsp;the shear and bending moment for the beam and loading shown. &nbsp;The beam is {qty(beamlen,units[0])} long. &nbsp;</p>\n<p>{ggb_function}</p>\n<p></p>\n<p></p>", "advice": "", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true, "j": false}, "constants": [], "variables": {"range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+[beamLen] + sort(shuffle(2..(beamLen -2)#2)[0..3])", "description": "", "templateType": "anything", "can_override": false}, "beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": "2 random(5..10)", "description": "", "templateType": "anything", "can_override": false}, "ggb_function": {"name": "ggb_function", "group": "Ungrouped variables", "definition": "geogebra_function()", "description": "<p></p>\n<p>//geogebra_file('resources/question-resources/VM1_cwT2ujZ.ggb', [<br />geogebra_applet('qnhnawam', [<br /> \"F_C\": [definition: FC, visible: false],<br /> \"F_D\": [definition: FD, visible: false],<br /> \"F_E\": [definition: FE, visible: false],<br /> \"showR\": [visible: false],<br /> \"showV\": [visible: true],<br /> \"showM\": [visible: true],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"', visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + range[0] + ',0)',<br /> 'SetCoords(B,' + range[4] + ',0)',<br /> 'SetCoords(C,' + range[1] + ',0)',<br /> 'SetCoords(D,' + range[2] + ',0)',<br /> 'SetCoords(E,' + range[3] + ',0)',<br /> 'RunClickScript[unitToggle]'<br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> <br /> \"units_d\":[definition: '\"' + units[0] +'\"'],<br /> \"units_f\":[definition: '\"' + units[1] +'\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')]</p>\n<p>])</p>", "templateType": "anything", "can_override": false}, "FE": {"name": "FE", "group": "Ungrouped variables", "definition": "random(-150..150#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "FC": {"name": "FC", "group": "Ungrouped variables", "definition": "random(-150..150#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "FD": {"name": "FD", "group": "Ungrouped variables", "definition": "random(-150..150#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["ggb_function", "beamLen", "range", "FE", "FC", "FD", "units"], "variable_groups": [], "functions": {"geogebra_function": {"parameters": [], "type": "anything", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'qnhnawam',\n  width: 560,\n  height: 600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('beamLen');\n  setGGBNumber('F_C',\"FC\");\n  setGGBNumber('F_D',\"FD\");\n  setGGBNumber('F_E',\"FE\");\n  \n  function setPoint(name, index) {\n  var x = question.unwrappedVariables.range[index]\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  }\n  \n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-30);\n  \n  setPoint('A',0);\n  setPoint('B',1);\n  setPoint('C',2);\n  setPoint('D',3);\n  setPoint('E',4);\n  \n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  app.evalCommand(\"RunClickScript(Rescale)\");\n  \n  app.setVisible(\"NewProblem\", false, false);\n  app.setVisible(\"Rescale\", false, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return Numbas.exam.currentQuestion.applet.app.getValue(val)"}, "advice": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'qnhnawam'\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('beamLen');\n  setGGBNumber('F_C',\"FC\");\n  setGGBNumber('F_D',\"FD\");\n  setGGBNumber('F_E',\"FE\");\n  \n  function setPoint(name, index) {\n  var x = question.unwrappedVariables.range[index]\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  }\n  \n  setPoint('A',0);\n  setPoint('B',1);\n  setPoint('C',2);\n  setPoint('D',3);\n  setPoint('E',4);\n  \n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  app.evalCommand(\"RunClickScript(Rescale)\");\n  \n  app.setVisible(\"NewProblem\", false, false);\n  app.setVisible(\"Rescale\", false, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  \n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n    \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n   try{\n    var app = question.applet.app;\n  \n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  //app.setVisible(\"F_C\",true,true);\n  //app.setVisible(\"F_D\",true,true);\n  //app.setVisible(\"F_E\",true,true);\n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n     \n     }\n  catch(err){}  \n})\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What are the reactions at the pin and roller supports?</p>\n<p>$A$ = &nbsp;[[0]]&nbsp; $\\qquad B$ =&nbsp;[[1]]&nbsp;</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(value(ggb_function, \"F_A\"),units[1])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n    qty(value(ggb_function, \"F_B\"),units[1])\n\n\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum Internal Loads", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "Vmax", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  value(ggb_function,safe(\"V_{max}\"))\n\nVmin:\n   value(ggb_function,safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "Mmax", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n value(ggb_function,safe(\"M_{max}\"))\n\nMmin:\n   value(ggb_function,safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1] + ' ' + units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 3a: Distributed loads, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM3.ggb", "/srv/numbas/media/question-resources/VM3.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb", "Mechanics", "mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "Draw Shear and Bending Moment Diagram for a beam with two uniformly distributed loads.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>Draw&nbsp;the shear and bending moment for the {beamlen} {units[0]} &nbsp;beam and loading shown.&nbsp;</p>\n<p>{ggb_function}</p>\n<p></p>", "advice": "", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true, "j": false}, "constants": [], "variables": {"range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+ sort(shuffle(2..(beamLen -2)#2)[0..4]) +[beamLen]", "description": "<p>aug 16, 2024 changed</p>\n<p>[0]+sort(take(4,x,x,shuffle(2..(beamLen -2)#2))) + [beamLen]</p>\n<p>to</p>\n<p>[0]+ sort(shuffle(2..(beamLen -2)#2)[0..4]) +[beamLen]</p>", "templateType": "anything", "can_override": false}, "beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": " random(12..20#2)", "description": "", "templateType": "anything", "can_override": false}, "ggb_function": {"name": "ggb_function", "group": "Ungrouped variables", "definition": "geogebra_function()\n", "description": "<p>geogebra_applet('q7zdsmu3', [<br /> \"showR\": [definition: 'false', visible: false],<br /> \"showV\": [definition: 'false', visible: true],<br /> \"showM\": [definition: 'false', visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + A + ',0)',<br /> 'SetCoords(B,' + B + ',0)',<br /> 'SetCoords(C,' + C + ',0)',<br /> 'SetCoords(D,' + D + ',0)',<br /> 'SetCoords(E,' + EE + ',0)',<br /> 'SetCoords(F,' + F + ',0)'<br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> \"F\":[fixed: true],<br /> \"w_1\": [definition: w_1, visible: false],<br /> \"w_2\": [definition: w_2, visible: false],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"', visible: true],<br /> \"units_d\":[definition: '\"' + units[0] + '\"'],<br /> \"units_f\":[definition: '\"' + units[1] + '\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')]</p>\n<p>])</p>", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Unnamed group", "definition": "range[0]", "description": "", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Unnamed group", "definition": "if(random(0..100)>50, range[0],range[1])", "description": "<p>Sometimes put point B at the left end</p>", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Unnamed group", "definition": "if(random(0..100)<25, range[3],range[2])", "description": "", "templateType": "anything", "can_override": false}, "D": {"name": "D", "group": "Unnamed group", "definition": "range[3]", "description": "", "templateType": "anything", "can_override": false}, "EE": {"name": "EE", "group": "Unnamed group", "definition": "if(random(0..100)<40, range[5],range[4])", "description": "<p>sometimes put E at the right end</p>\n<p></p>", "templateType": "anything", "can_override": false}, "F": {"name": "F", "group": "Unnamed group", "definition": "range[5]", "description": "<p>at the right end</p>", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Unnamed group", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}, "w_1": {"name": "w_1", "group": "Unnamed group", "definition": "random(-100..100#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "w_2": {"name": "w_2", "group": "Unnamed group", "definition": "random(-100..100#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "points": {"name": "points", "group": "Ungrouped variables", "definition": "sort(distinct([A,B,C,D,EE,F]))", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "C <> D", "maxRuns": 100}, "ungrouped_variables": ["beamLen", "range", "ggb_function", "points"], "variable_groups": [{"name": "Unnamed group", "variables": ["A", "B", "C", "D", "EE", "F", "units", "w_1", "w_2"]}], "functions": {"geogebra_function": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'q7zdsmu3',\n  width: 560,\n  height: 600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n \n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('w_1');\n  setGGBNumber('w_2');\n  \n  function setPoint(name,nname=name) {\n  var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname))\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  app.setFixed(name,true);\n  }\n  \n  setPoint('A');\n  setPoint('B');\n  setPoint('C');\n  setPoint('D');\n  setPoint('E','EE');\n  setPoint('F');\n  \n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-35);\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  \n  /*debuging values\n  app.setVisible('showR', true);\n  app.setVisible('showV', true);\n  app.setVisible('showM', true);\n  app.setVisible('showMax', true);\n  app.setVisible(\"textShowSoln\", true, false);\n \n  app.setValue('showMax',true);\n  app.setValue('showR',true);\n  app.setValue('showV',true);\n  app.setValue('showM',true);\n  */\n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return question.applet.app.getValue(val)"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  try{\n    var app = question.applet.app;\n \n    app.setVisible('showR', true);\n  app.setVisible('showV', true);\n  app.setVisible('showM', true);\n  app.setVisible('showMax', true);\n  app.setVisible(\"textShowSoln\", true, false);\n  \n  app.setValue('showMax',true);\n  app.setValue('showR',true);\n  app.setValue('showV',true);\n  app.setValue('showM',true);\n  \n  }\n  catch(err){}  \n})\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What are the reactions at $A$ and $F$?&nbsp;</p>\n<p>$A = $ &nbsp;[[0]] $\\qquad F = $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(abs(value(ggb_function,\"F_A\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "F", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(abs(value(ggb_function,\"F_F\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum Internal Load", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam. &nbsp;Use the standard sign convention.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$V_\\text{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  value(ggb_function,safe(\"V_{max}\"))\n\nVmin:\n  value(ggb_function,safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_\\text{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n value(ggb_function,safe(\"M_{max}\"))\n\nMmin:\n   value(ggb_function,safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1] + ' ' + units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 2a: Concentrated moments, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM2.ggb", "/srv/numbas/media/question-resources/VM2.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb"], "metadata": {"description": "Shear and Bending Moment diagram for a cantilevered beam loaded with concentrated forces and moments.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A {qty(beamLen,&nbsp;units[0])} long cantilevered beam is supported by a fixed support at $A$ and subjected to the loading shown.</p>\n<p>Draw&nbsp;the corresponding shear and bending moment diagram.</p>\n<p>{ggb_function}</p>\n<p></p>", "advice": "", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"beamLen": {"name": "beamLen", "group": "Unnamed group", "definition": "random(12..20#2)", "description": "", "templateType": "anything", "can_override": false}, "ggb_function": {"name": "ggb_function", "group": "Ungrouped variables", "definition": "geogebra_function()", "description": "<p>geogebra_applet('wzynat8x', [<br /> \"P_C\":[definition: P_C, visible: false],<br /> \"F_B\":[definition: F_B, visible: false],<br /> \"M_D\":[definition: M_D, visible: false],<br /> \"showR\": [visible: false],<br /> \"showV\": [visible: true],<br /> \"showM\": [visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + A + ',0)',<br /> 'SetCoords(B,' + B + ',0)',<br /> 'SetCoords(C,' + C + ',0)',<br /> 'SetCoords(D,' + D + ',0)',<br /> 'SetCoords(E,' + EE + ',0)' <br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> \"E\":[fixed: true],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"'],<br /> \"units_d\":[definition: '\"' + units[0] + '\"'],<br /> \"units_f\":[definition: '\"' + units[1] + '\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')],<br /> \"points\": [definition: points]</p>\n<p>])</p>\n<p></p>", "templateType": "anything", "can_override": false}, "P_C": {"name": "P_C", "group": "Ungrouped variables", "definition": "random(-50..50#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "M_D": {"name": "M_D", "group": "Ungrouped variables", "definition": "random(-200..200#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "F_B": {"name": "F_B", "group": "Ungrouped variables", "definition": "random(-50..50#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Unnamed group", "definition": "ends[0]", "description": "", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Unnamed group", "definition": "ends[1]", "description": "", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Unnamed group", "definition": "random(midpoints)", "description": "", "templateType": "anything", "can_override": false}, "D": {"name": "D", "group": "Unnamed group", "definition": "random(midpoints)", "description": "", "templateType": "anything", "can_override": false}, "EE": {"name": "EE", "group": "Unnamed group", "definition": "ends[0]", "description": "", "templateType": "anything", "can_override": false}, "points": {"name": "points", "group": "Unnamed group", "definition": "sort(distinct([A,B,C,D,EE]))", "description": "<p>used by scale function in geogebra</p>", "templateType": "anything", "can_override": false}, "ends": {"name": "ends", "group": "Unnamed group", "definition": "shuffle([0,beamLen])", "description": "<p>left or right ends&nbsp;</p>", "templateType": "anything", "can_override": false}, "midpoints": {"name": "midpoints", "group": "Unnamed group", "definition": "shuffle(2..beamLen-2#2)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["ggb_function", "P_C", "M_D", "F_B", "units"], "variable_groups": [{"name": "Unnamed group", "variables": ["beamLen", "A", "B", "C", "D", "EE", "points", "ends", "midpoints"]}], "functions": {"geogebra_function": {"parameters": [], "type": "anything", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'wzynat8x',\n  width:560,\n  height:600\n};\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n  app.setGridVisible(1, true);\n  app.setAxesVisible(true,false);\n  app.enableShiftDragZoom(false);\n  \n  function setGGBPoint(name, nname=name) {\n    // moves point in GGB to Numbas value\n    var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n    app.setFixed(name,false,false);\n    app.setCoords(name, x, 0);\n    app.setFixed(name,true,true);\n  }\n\n function setGGBNumber(name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = question.scope.evaluate(name).value;\n    app.setValue(name,n);\n  }\n  app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-32);\n  \n  \n  setGGBPoint(\"A\");\n  setGGBPoint(\"B\");\n  setGGBPoint(\"C\");\n  setGGBPoint(\"D\");\n  setGGBPoint(\"E\",\"EE\");\n  \n  setGGBNumber(\"P_C\");\n  setGGBNumber(\"F_B\");\n  setGGBNumber(\"M_D\");\n  \n  app.setVisible(\"P_C\",false);\n  app.setVisible(\"F_B\",false);\n  app.setVisible(\"M_D\",false);\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n  \n  /* begin debug \n  app.setVisible(\"textShowSoln\", true, false);\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  \n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n  */\n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return question.applet.app.getValue(val)"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n try{\n    var app = question.applet.app;\n   app.setVisible(\"textShowSoln\", true, false);\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  \n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n  \n  }\n  catch(err){}  \n})\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the reactions at $A$.</p>\n<p>$A = $ [[0]]&nbsp;$\\qquad M_A = $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(value(ggb_function,\"F_A\"),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_A$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n qty(value(ggb_function,\"M_A\"),units[1] + ' ' + units[0])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0]+\" \" +  units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum Internal Loads", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Give the (signed) values of the largest&nbsp;shear and bending moment occuring anywhere within the beam.</p>\n<p>$V_{\\text{max}} = $ &nbsp;[[0]]&nbsp;$\\qquad M_{\\text{max}} = $ &nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$V_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  value(ggb_function, safe(\"V_{max}\"))\n\nVmin:\n   value(ggb_function, safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_{max}$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n  value(ggb_function, safe(\"M_{max}\"))\n\nMmin:\n   value(ggb_function, safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0,units[1] + ' ' + units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "V-M 4a: Combined loads, no diagrams", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/VM4.ggb", "/srv/numbas/media/question-resources/VM4.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["gets answer from ggb", "Mechanics", "mechanics", "shear and bending moment", "Statics", "statics"], "metadata": {"description": "Shear and bending moment diagram for a beam loaded with concentrated force and a uniformly distributed force.", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>A {qty(beamlen, units[0])} long beam is subjected to a {abs(P_C)} {units[1]} concentrated force $P$ and a {abs(w)} {units[1]}/{units[0]} distributed load&nbsp;$w$ as shown.&nbsp; &nbsp;</p>\n<p>Draw&nbsp;the corresponding shear and bending moment. &nbsp;</p>\n<p>{ggb_function}</p>\n<p></p>", "advice": "", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true, "j": false}, "constants": [], "variables": {"beamLen": {"name": "beamLen", "group": "Ungrouped variables", "definition": "random(12..20#2)", "description": "", "templateType": "anything", "can_override": false}, "range": {"name": "range", "group": "Ungrouped variables", "definition": "[0]+ sort(shuffle(2..(beamLen -2)#2)[0..3]) +[beamLen]", "description": "<p>aug 16,2024 changed</p>\n<p>[0]+sort(take(3,x,x,shuffle(2..(beamLen -2)#2))) + [beamLen]</p>\n<p>to</p>\n<p>[0]+ sort(shuffle(2..(beamLen -2)#2)[0..3]) +[beamLen]</p>", "templateType": "anything", "can_override": false}, "ggb_function": {"name": "ggb_function", "group": "Ungrouped variables", "definition": "geogebra_function()", "description": "<p>geogebra_applet('qqv7vew7', [<br /> \"showR\": [definition: 'false', visible: false],<br /> \"showV\": [definition: 'false', visible: true],<br /> \"showM\": [definition: 'false', visible: true],<br /> \"NewProblem\": [visible: false],<br /> \"xxx\": [definition: [<br /> 'SetCoords(A,' + A + ',0)',<br /> 'SetCoords(B,' + B + ',0)',<br /> 'SetCoords(C,' + C + ',0)',<br /> 'SetCoords(D,' + D + ',0)',<br /> 'SetCoords(E,' + EE + ',0)'<br /> <br /> ]], <br /> \"A\":[fixed: true],<br /> \"B\":[fixed: true],<br /> \"C\":[fixed: true],<br /> \"D\":[fixed: true],<br /> \"E\":[fixed: true],<br /> <br /> \"w\": [definition: w, visible: false],<br /> \"P_C\": [definition: P_C, visible: false],<br /> \"textShowSoln\": [definition: '\"Show Diagrams\"', visible: true],<br /> \"textMax\": [visible: false],<br /> \"units_d\":[definition: '\"' + units[0] + '\"'],<br /> \"units_f\":[definition: '\"' + units[1] + '\"'],<br /> \"Scale_V\": [definition: safe('CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))')],<br /> \"Scale_M\": [definition: safe('CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))')]</p>\n<p>])</p>\n<p></p>", "templateType": "anything", "can_override": false}, "dots": {"name": "dots", "group": "Ungrouped variables", "definition": "[if(A<>0,0,random(0..beamLen#2))]+ \n[if(B<> beamLen, beamLen, random(0..BeamLen#2))]+\n[random(0..BeamLen/2#2)]", "description": "", "templateType": "anything", "can_override": false}, "P_C": {"name": "P_C", "group": "Ungrouped variables", "definition": "random(-200..200#10 except 0)", "description": "", "templateType": "anything", "can_override": false}, "A": {"name": "A", "group": "Ungrouped variables", "definition": "random(0..beamLen/2#2)", "description": "", "templateType": "anything", "can_override": false}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "beamlen-random(0..beamLen/2#2)", "description": "", "templateType": "anything", "can_override": false}, "C": {"name": "C", "group": "Ungrouped variables", "definition": "dots[0]", "description": "", "templateType": "anything", "can_override": false}, "D": {"name": "D", "group": "Ungrouped variables", "definition": "dots[1]", "description": "", "templateType": "anything", "can_override": false}, "EE": {"name": "EE", "group": "Ungrouped variables", "definition": "dots[2]", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb'],['m','kN'])", "description": "", "templateType": "anything", "can_override": false}, "w": {"name": "w", "group": "Ungrouped variables", "definition": "random(-50..50#10 except 0)", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "A< beamLen/2 and  B > beamLen/2 and C <> A and C <> B and D <> EE and abs(A-B) >= 6\n// Reactions in two places, load not on top of reactions, and distributed load starts and ends ", "maxRuns": 100}, "ungrouped_variables": ["ggb_function", "beamLen", "range", "dots", "A", "B", "C", "D", "EE", "P_C", "units", "w"], "variable_groups": [], "functions": {"geogebra_function": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'qqv7vew7',\n  width:560,\n  height:600\n}\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n \n   app.setVisible('TR',false);\n  app.setVisible('BL',false);\n  app.setLabelVisible('TR',true);\n  app.setLabelStyle('TR',2);\n  app.setLabelVisible('BL',true);\n  app.setLabelStyle('BL',2);\n  app.setCoords('BL',-4,-32);\n  \n  \n  //initialize the dimensions and forces\n  \n   function setGGBPoint(g_name, n_name = g_name) {\n    // moves point in GGB to location of Numbas Vector Variable\n    // g_name = geogebra point, n_name = numbas vector\n    \n    //var pt = question.scope.evaluate(n_name).value\n    var pt = scope.getVariable(n_name).value\n    app.setFixed(g_name,false,false);\n    app.setCoords(g_name, pt[0], pt[1]);\n    //app.setFixed(g_name,true,true);\n  }\n  \n   function setGGBNumber(g_name, n_name = g_name) {\n    // Sets number in GGB to a Numbas Variable\n    var n = scope.getVariable(n_name).value;\n    app.setValue(g_name,n);\n    app.setVisible(g_name,false);\n  }\n  \n  setGGBNumber('w');\n  setGGBNumber('P_C');\n  \n  function setPoint(name,nname=name) {\n  var x = Numbas.jme.unwrapValue(question.scope.getVariable(nname))\n  app.setFixed(name,false,false);\n  app.setCoords(name, x, 0);\n  app.setFixed(name,true);\n  }\n  \n  setPoint('A');\n  setPoint('B');\n  setPoint('C');\n  setPoint('D');\n  setPoint('E','EE');\n\n  \n  app.evalCommand('Scale_V = CopyFreeObject(scaleFunction(Max({V_{max},abs(V_{min})})/2 ))');\n  app.evalCommand('Scale_M = CopyFreeObject(scaleFunction(Max({M_{max},abs(M_{min})})/3 ))');\n  \n  var units = question.unwrappedVariables.units\n  app.setTextValue('units_d', units[0]);\n  app.setTextValue('units_f', units[1]);\n  //app.evalCommand(\"RunClickScript(Rescale)\");  (not implemented in ggb)\n  \n  app.setVisible(\"NewProblem\", false, false);\n  //app.setVisible(\"Rescale\", true, false);\n  app.setVisible(\"textShowSoln\", false, false);\n  app.setVisible(\"showR\", false,false);\n  app.setVisible(\"showV\", false,false);\n  app.setVisible(\"showM\", false,false);\n  app.setVisible(\"showMax\", false,false);\n\n  \n  \n  app.setValue(\"showR\",false);\n  app.setValue(\"showV\",false);\n  app.setValue(\"showM\",false);\n  app.setValue(\"showMax\",false);\n    \n  /* debug values\n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  \n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n  */\n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}, "getGGB": {"parameters": [["val", "string"]], "type": "anything", "language": "javascript", "definition": "return question.applet.app.getValue(val)"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n   try{\n    var app = question.applet.app;\n \n  app.setVisible(\"showR\", true,false);\n  app.setVisible(\"showV\", true,false);\n  app.setVisible(\"showM\", true,false);\n  app.setVisible(\"showMax\", true,false);\n  //app.setVisible(\"F_C\",true,true);\n  //app.setVisible(\"F_D\",true,true);\n  //app.setVisible(\"F_E\",true,true);\n  app.setValue(\"showR\",true);\n  app.setValue(\"showV\",true);\n  app.setValue(\"showM\",true);\n  app.setValue(\"showMax\",true);\n  \n  }\n  catch(err){}  \n})\n\n\n\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Reactions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What are&nbsp;the reactions at $A$ and $B$?</p>\n<p>$A= $ [[0]]&nbsp;$\\qquad B = $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "A", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(abs(value(ggb_function,\"F_A\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "B", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "correct_quantity:\n  qty(abs(value(ggb_function,\"F_B\")),units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Maximum internal load", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>$V_{max}= $ [[0]]&nbsp;$\\qquad M_{max}= $&nbsp;[[1]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "V_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Vmax:\n  value(ggb_function, safe(\"V_{max}\"))\n\nVmin:\n   value(ggb_function, safe(\"V_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Vmax)>=abs(Vmin), Vmax, Vmin), units[1])", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "M_max", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "Mmax:\n  value(ggb_function, safe(\"M_{max}\"))\n\nMmin:\n   value(ggb_function, safe(\"M_{min}\"))\n\ncorrect_quantity:\n  qty(if(abs(Mmax)>=abs(Mmin), Mmax, Mmin), units[1]+' ' + units[0])\n\n", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(0, units[0])", "right": "1", "close": "5", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}], "allowPrinting": true, "navigation": {"allowregen": true, "reverse": true, "browse": true, "allowsteps": true, "showfrontpage": false, "showresultspage": "oncompletion", "navigatemode": "menu", "onleave": {"action": "none", "message": ""}, "preventleave": false, "startpassword": "", "allowAttemptDownload": false, "downloadEncryptionKey": ""}, "timing": {"allowPause": true, "timeout": {"action": "none", "message": ""}, "timedwarning": {"action": "none", "message": ""}}, "feedback": {"showactualmark": true, "showtotalmark": true, "showanswerstate": true, "allowrevealanswer": true, "advicethreshold": 0, "intro": "", "end_message": "", "reviewshowscore": true, "reviewshowfeedback": true, "reviewshowexpectedanswer": true, "reviewshowadvice": true, "feedbackmessages": []}, "diagnostic": {"knowledge_graph": {"topics": [], "learning_objectives": []}, "script": "diagnosys", "customScript": ""}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "extensions": ["/srv/numbas/media/user-extensions/extracted/41/geogebra", "/srv/numbas/media/user-extensions/extracted/224/linear-algebra", "/srv/numbas/media/user-extensions/extracted/20/polynomials", "/srv/numbas/media/user-extensions/extracted/55/quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/newVM_cA1Sig0.ggb", "/srv/numbas/media/question-resources/newVM_cA1Sig0.ggb"], ["question-resources/newVM_TGfqtvt.ggb", "/srv/numbas/media/question-resources/newVM_TGfqtvt.ggb"], ["question-resources/newVM_W8fZxNa.ggb", "/srv/numbas/media/question-resources/newVM_W8fZxNa.ggb"], ["question-resources/newVM_6j6k8Vp.ggb", "/srv/numbas/media/question-resources/newVM_6j6k8Vp.ggb"], ["question-resources/VM1_cwT2ujZ.ggb", "/srv/numbas/media/question-resources/VM1_cwT2ujZ.ggb"], ["question-resources/VM3.ggb", "/srv/numbas/media/question-resources/VM3.ggb"], ["question-resources/VM2.ggb", "/srv/numbas/media/question-resources/VM2.ggb"], ["question-resources/VM4.ggb", "/srv/numbas/media/question-resources/VM4.ggb"]]}