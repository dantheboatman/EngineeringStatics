// Numbas version: finer_feedback_settings
{"name": "VM6: Ground Beam", "extensions": ["jsxgraph", "shear-and-bending-moment-diagrams", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false, "typeendtoleave": false}, "question_groups": [{"pickingStrategy": "all-ordered", "questions": [{"name": "VM6: Ground Beam", "tags": [], "metadata": {"description": "<p>Draw shear and bending moment diagram for a symmetrically loaded beam resting on the ground.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{beam}</p>\n<p>{shear}</p>\n<p>{moment}</p>", "advice": "", "rulesets": {}, "extensions": ["jsxgraph", "quantities", "shear-and-bending-moment-diagrams"], "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true, "j": false}, "constants": [], "variables": {"properties": {"name": "properties", "group": "lists", "definition": "[beamLength: L, reactions: reactions, forces: forces,  moments: moments, loads: loads, symbols: symbols]", "description": "<p>Leave this variable the way it is, and adjust the loads using the reactions, forces, moments, loads Lists.</p>", "templateType": "anything", "can_override": false}, "F1": {"name": "F1", "group": "properties", "definition": "let(v, random_force(), \n  [x: random(0..6), value: v, label:  abs(v) + \" \" + units[1], visible: true])", "description": "", "templateType": "anything", "can_override": false}, "F2": {"name": "F2", "group": "properties", "definition": "let(v, f1[\"value\"], \n  [x: L - f1[\"x\"], value: v, label:  abs(v) + \" \" + units[1] ,visible: true])", "description": "", "templateType": "anything", "can_override": false}, "F3": {"name": "F3", "group": "properties", "definition": "let(v, random(0,random_force()), \n  [x: L/2, value: v, label: abs(v) + \" \" + units[1], visible: v<>0])", "description": "", "templateType": "anything", "can_override": false}, "l": {"name": "l", "group": "properties", "definition": "20", "description": "", "templateType": "anything", "can_override": false}, "m1": {"name": "m1", "group": "properties", "definition": "let(v, random_force(), \n  [x: 0, value: v, label: abs(v) + \" \" + units[2], visible: true])", "description": "", "templateType": "anything", "can_override": false}, "m2": {"name": "m2", "group": "properties", "definition": "let(v, random_force(), [x: 0, value: v, label: abs(v) + \" \" + units[2], visible: true])", "description": "", "templateType": "anything", "can_override": false}, "reactions": {"name": "reactions", "group": "lists", "definition": "[]", "description": "<p>pin, roller, fixed, dot</p>", "templateType": "anything", "can_override": false}, "w1": {"name": "w1", "group": "properties", "definition": "\n    [[x: xa, value: w0 ,  label: \"$w$\", visible: true], \n     [x: xb, value: w0 , label: abs(w0) + \" \" + units[3]]]", "description": "", "templateType": "anything", "can_override": false}, "beam": {"name": "beam", "group": "Ungrouped variables", "definition": "vmloaddiagram(properties)", "description": "", "templateType": "anything", "can_override": false}, "shear": {"name": "shear", "group": "Ungrouped variables", "definition": "vmsheardiagram(properties, debug)", "description": "", "templateType": "anything", "can_override": false}, "forces": {"name": "forces", "group": "lists", "definition": "[F1,F2,F3]", "description": "", "templateType": "anything", "can_override": false}, "rB": {"name": "rB", "group": "reactions", "definition": "0", "description": "", "templateType": "anything", "can_override": false}, "rA": {"name": "rA", "group": "reactions", "definition": "0\n", "description": "", "templateType": "anything", "can_override": false}, "sigmaF_check": {"name": "sigmaF_check", "group": "reactions", "definition": "[foldl((total, f) -> total + f[\"value\"], 0, forces+equivalent_loads),ra+rb]\n", "description": "", "templateType": "anything", "can_override": false}, "xa": {"name": "xa", "group": "reactions", "definition": "0", "description": "", "templateType": "anything", "can_override": false}, "xb": {"name": "xb", "group": "reactions", "definition": "L-xa", "description": "", "templateType": "anything", "can_override": false}, "moments": {"name": "moments", "group": "lists", "definition": "[]", "description": "", "templateType": "anything", "can_override": false}, "area": {"name": "area", "group": "lists", "definition": "w -> let (xa, w[0][\"x\"], xb, w[1][\"x\"], ya, w[0][\"value\"], yb, w[1][\"value\"] ,(xb-xa)(ya+yb)/2)", "description": "", "templateType": "anything", "can_override": false}, "xbar": {"name": "xbar", "group": "lists", "definition": "(w) -> let (xa, w[0][\"x\"], xb, w[1][\"x\"], ya, w[0][\"value\"], yb, w[1][\"value\"] , if(xa+xb=0, 0, xa+(xb - xa)*(ya + 2 yb)/3/(ya + yb)))", "description": "<p>gives horizontal location of centroid of distributed load w</p>", "templateType": "anything", "can_override": false}, "equivalent_loads": {"name": "equivalent_loads", "group": "lists", "definition": " map((w)->let( f , area(w), [x:  xbar(w), value: f, label: f + \" lb\"]),loads)", "description": "", "templateType": "anything", "can_override": false}, "loads": {"name": "loads", "group": "lists", "definition": "[w1]", "description": "", "templateType": "anything", "can_override": false}, "w2": {"name": "w2", "group": "properties", "definition": "let(w, [dec(random(0,0.5,1) size/10) , dec(random(0,0.5,1) size/10)],\n    [[x: random(0,2,4), value: w[0] ,  label: w[0] + \" \" + units[3], visible: true], \n     [x: random(L-4,L-2,L), value: w[1] , label: w[1] + \" \" + units[3]]])", "description": "", "templateType": "anything", "can_override": false}, "moment": {"name": "moment", "group": "Ungrouped variables", "definition": "vmmomentdiagram(properties, debug)", "description": "", "templateType": "anything", "can_override": false}, "symbols": {"name": "symbols", "group": "lists", "definition": "[[type: \"pin\", x: xa, label: \"$R_A$\", visible: false], [type: \"roller\", x: xb, label: \"$R_B$\", visible: false]]", "description": "<p>legal types: pin, roller, dot, fixed</p>", "templateType": "anything", "can_override": false}, "InterestingShearPoints": {"name": "InterestingShearPoints", "group": "Ungrouped variables", "definition": "vmshearpoints(properties)", "description": "", "templateType": "anything", "can_override": false}, "InterestingMomentPoints": {"name": "InterestingMomentPoints", "group": "Ungrouped variables", "definition": "vmmomentpoints(properties)", "description": "", "templateType": "anything", "can_override": false}, "vmax": {"name": "vmax", "group": "Ungrouped variables", "definition": "let( max, max(map(p ->p[1], InterestingshearPoints)),\n  min, min(map(p ->p[1], InterestingshearPoints)),\n  if(abs(max)>=abs(min), max, min))", "description": "", "templateType": "anything", "can_override": false}, "mmax": {"name": "mmax", "group": "Ungrouped variables", "definition": "let( max, max(map(p ->p[1], interestingmomentpoints)),\n  min, min(map(p ->p[1], interestingmomentpoints)),\n  if(abs(max)>=abs(min), max, min))", "description": "", "templateType": "anything", "can_override": false}, "unique_points": {"name": "unique_points", "group": "properties", "definition": "sort(shuffle(0..L)[0..2])", "description": "", "templateType": "anything", "can_override": false}, "MomentCheck": {"name": "MomentCheck", "group": "reactions", "definition": "\"off\"//siground((\n//  sum(map(f->cross( vector(L-f[\"x\"],0,0),vector(0,-f[\"value\"],0))[2],forces+equivalent_loads))\n//- sum(map(f->cross(vector(L-f[\"x\"],0,0),vector(0,-f[\"value\"],0))[2],reactions))\n//- sum(map(m->m['value'], moments))),6)", "description": "", "templateType": "anything", "can_override": false}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['ft','lb', 'ft*lb', 'lb/ft'],['m','kN', 'kN*m', 'kN/m'])", "description": "", "templateType": "anything", "can_override": false}, "size": {"name": "size", "group": "reactions", "definition": "random(100,200,200,400,600)", "description": "", "templateType": "anything", "can_override": false}, "random_force": {"name": "random_force", "group": "reactions", "definition": "() -> round(size * random(0.5..1.5#0.1 except 0))", "description": "<p>gives values of about the same order of magnitude.</p>", "templateType": "anything", "can_override": false}, "test": {"name": "test", "group": "Ungrouped variables", "definition": "sum(map(x->x[\"value\"], forces))/L", "description": "", "templateType": "anything", "can_override": false}, "w0": {"name": "w0", "group": "properties", "definition": "-sum(map(x->x[\"value\"], forces))/L", "description": "<p>magnitude of distributed load, negative loads point up</p>", "templateType": "anything", "can_override": false}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["beam", "shear", "moment", "InterestingShearPoints", "InterestingMomentPoints", "vmax", "mmax", "units", "test", "debug"], "variable_groups": [{"name": "reactions", "variables": ["xa", "xb", "rB", "rA", "sigmaF_check", "MomentCheck", "size", "random_force"]}, {"name": "properties", "variables": ["l", "F1", "F2", "F3", "m1", "m2", "w1", "w2", "w0", "unique_points"]}, {"name": "lists", "variables": ["properties", "reactions", "forces", "loads", "moments", "equivalent_loads", "symbols", "area", "xbar"]}], "functions": {}, "preamble": {"js": "question.signals.on('adviceDisplayed', () => {\n  ['moment','shear'].forEach((board) => {\n  var objects = question.scope.getVariable(board).board.objects;\n  objects.Curve.setAttribute({visible: true});\n  Object.keys(objects).filter(k => k.startsWith('Point-')).forEach((k) => objects[k].setAttribute({visible: true}));\n  Object.keys(objects).filter(k => k.startsWith('Jump-')).forEach((k) => objects[k].setAttribute({visible: true}));\n});\n});\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Draw the shear and bending moment diagram and determine:</p>\n<p><strong>Distributed Load: </strong>Upward forces positive, downward negative.</p>\n<p>$w = $ [[0]]</p>\n<p><strong>Maximum Shear and Bending Moment: </strong>Positive or negative using the standard sign convention</p>\n<p>$V_\\text{max} = $[[1]]</p>\n<p>$M_\\text{max} = $[[2]]</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$w$", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "-qty(w0,units[3])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$V_\\text{max}$", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "alternatives": [{"type": "engineering-answer", "useCustomName": true, "customName": "$-V_\\text{max}$", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "alternativeFeedbackMessage": "", "useAlternativeFeedback": false, "settings": {"correctAnswer": "-qty(vmax, units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "settings": {"correctAnswer": "qty(vmax, units[1])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "$M_\\text{max}$", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(mmax, units[2])", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always", "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "resources": []}]}], "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}]}