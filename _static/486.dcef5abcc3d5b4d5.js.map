{"version":3,"file":"486.dcef5abcc3d5b4d5.js","mappings":"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","sources":["webpack://WebComponents/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://WebComponents/./runestone/parsons/js/parsons-i18n.pt-br.js","webpack://WebComponents/./runestone/hparsons/js/hparsonsFeedback.js","webpack://WebComponents/./runestone/hparsons/js/blockGrader.js","webpack://WebComponents/./runestone/hparsons/js/BlockFeedback.js","webpack://WebComponents/./runestone/hparsons/js/SQLFeedback.js","webpack://WebComponents/./runestone/hparsons/js/hparsons.js","webpack://WebComponents/./runestone/parsons/js/parsons-i18n.en.js"],"sourcesContent":["var map = {\n\t\"./af\": 25177,\n\t\"./af.js\": 25177,\n\t\"./ar\": 61509,\n\t\"./ar-dz\": 41488,\n\t\"./ar-dz.js\": 41488,\n\t\"./ar-kw\": 58676,\n\t\"./ar-kw.js\": 58676,\n\t\"./ar-ly\": 42353,\n\t\"./ar-ly.js\": 42353,\n\t\"./ar-ma\": 24496,\n\t\"./ar-ma.js\": 24496,\n\t\"./ar-sa\": 82682,\n\t\"./ar-sa.js\": 82682,\n\t\"./ar-tn\": 89756,\n\t\"./ar-tn.js\": 89756,\n\t\"./ar.js\": 61509,\n\t\"./az\": 95533,\n\t\"./az.js\": 95533,\n\t\"./be\": 28959,\n\t\"./be.js\": 28959,\n\t\"./bg\": 47777,\n\t\"./bg.js\": 47777,\n\t\"./bm\": 54903,\n\t\"./bm.js\": 54903,\n\t\"./bn\": 61290,\n\t\"./bn.js\": 61290,\n\t\"./bo\": 31545,\n\t\"./bo.js\": 31545,\n\t\"./br\": 11470,\n\t\"./br.js\": 11470,\n\t\"./bs\": 44429,\n\t\"./bs.js\": 44429,\n\t\"./ca\": 7306,\n\t\"./ca.js\": 7306,\n\t\"./cs\": 56464,\n\t\"./cs.js\": 56464,\n\t\"./cv\": 73635,\n\t\"./cv.js\": 73635,\n\t\"./cy\": 64226,\n\t\"./cy.js\": 64226,\n\t\"./da\": 93601,\n\t\"./da.js\": 93601,\n\t\"./de\": 77853,\n\t\"./de-at\": 26111,\n\t\"./de-at.js\": 26111,\n\t\"./de-ch\": 54697,\n\t\"./de-ch.js\": 54697,\n\t\"./de.js\": 77853,\n\t\"./dv\": 60708,\n\t\"./dv.js\": 60708,\n\t\"./el\": 54691,\n\t\"./el.js\": 54691,\n\t\"./en-au\": 53872,\n\t\"./en-au.js\": 53872,\n\t\"./en-ca\": 28298,\n\t\"./en-ca.js\": 28298,\n\t\"./en-gb\": 56195,\n\t\"./en-gb.js\": 56195,\n\t\"./en-ie\": 66584,\n\t\"./en-ie.js\": 66584,\n\t\"./en-nz\": 79402,\n\t\"./en-nz.js\": 79402,\n\t\"./eo\": 32934,\n\t\"./eo.js\": 32934,\n\t\"./es\": 97650,\n\t\"./es-do\": 20838,\n\t\"./es-do.js\": 20838,\n\t\"./es-us\": 56575,\n\t\"./es-us.js\": 56575,\n\t\"./es.js\": 97650,\n\t\"./et\": 3035,\n\t\"./et.js\": 3035,\n\t\"./eu\": 3508,\n\t\"./eu.js\": 3508,\n\t\"./fa\": 119,\n\t\"./fa.js\": 119,\n\t\"./fi\": 90527,\n\t\"./fi.js\": 90527,\n\t\"./fo\": 52477,\n\t\"./fo.js\": 52477,\n\t\"./fr\": 85498,\n\t\"./fr-ca\": 26435,\n\t\"./fr-ca.js\": 26435,\n\t\"./fr-ch\": 37892,\n\t\"./fr-ch.js\": 37892,\n\t\"./fr.js\": 85498,\n\t\"./fy\": 37071,\n\t\"./fy.js\": 37071,\n\t\"./gd\": 70217,\n\t\"./gd.js\": 70217,\n\t\"./gl\": 77329,\n\t\"./gl.js\": 77329,\n\t\"./gom-latn\": 93383,\n\t\"./gom-latn.js\": 93383,\n\t\"./gu\": 95050,\n\t\"./gu.js\": 95050,\n\t\"./he\": 11713,\n\t\"./he.js\": 11713,\n\t\"./hi\": 43861,\n\t\"./hi.js\": 43861,\n\t\"./hr\": 26308,\n\t\"./hr.js\": 26308,\n\t\"./hu\": 90609,\n\t\"./hu.js\": 90609,\n\t\"./hy-am\": 17160,\n\t\"./hy-am.js\": 17160,\n\t\"./id\": 74063,\n\t\"./id.js\": 74063,\n\t\"./is\": 89374,\n\t\"./is.js\": 89374,\n\t\"./it\": 88383,\n\t\"./it.js\": 88383,\n\t\"./ja\": 23827,\n\t\"./ja.js\": 23827,\n\t\"./jv\": 89722,\n\t\"./jv.js\": 89722,\n\t\"./ka\": 41794,\n\t\"./ka.js\": 41794,\n\t\"./kk\": 27088,\n\t\"./kk.js\": 27088,\n\t\"./km\": 96870,\n\t\"./km.js\": 96870,\n\t\"./kn\": 84451,\n\t\"./kn.js\": 84451,\n\t\"./ko\": 63164,\n\t\"./ko.js\": 63164,\n\t\"./ky\": 78474,\n\t\"./ky.js\": 78474,\n\t\"./lb\": 79680,\n\t\"./lb.js\": 79680,\n\t\"./lo\": 15867,\n\t\"./lo.js\": 15867,\n\t\"./lt\": 45766,\n\t\"./lt.js\": 45766,\n\t\"./lv\": 69532,\n\t\"./lv.js\": 69532,\n\t\"./me\": 58076,\n\t\"./me.js\": 58076,\n\t\"./mi\": 41848,\n\t\"./mi.js\": 41848,\n\t\"./mk\": 30306,\n\t\"./mk.js\": 30306,\n\t\"./ml\": 73739,\n\t\"./ml.js\": 73739,\n\t\"./mr\": 86169,\n\t\"./mr.js\": 86169,\n\t\"./ms\": 73386,\n\t\"./ms-my\": 92297,\n\t\"./ms-my.js\": 92297,\n\t\"./ms.js\": 73386,\n\t\"./mt\": 77075,\n\t\"./mt.js\": 77075,\n\t\"./my\": 72264,\n\t\"./my.js\": 72264,\n\t\"./nb\": 22274,\n\t\"./nb.js\": 22274,\n\t\"./ne\": 8235,\n\t\"./ne.js\": 8235,\n\t\"./nl\": 92572,\n\t\"./nl-be\": 43784,\n\t\"./nl-be.js\": 43784,\n\t\"./nl.js\": 92572,\n\t\"./nn\": 54566,\n\t\"./nn.js\": 54566,\n\t\"./pa-in\": 29849,\n\t\"./pa-in.js\": 29849,\n\t\"./pl\": 94418,\n\t\"./pl.js\": 94418,\n\t\"./pt\": 79834,\n\t\"./pt-br\": 48303,\n\t\"./pt-br.js\": 48303,\n\t\"./pt.js\": 79834,\n\t\"./ro\": 24457,\n\t\"./ro.js\": 24457,\n\t\"./ru\": 82271,\n\t\"./ru.js\": 82271,\n\t\"./sd\": 1221,\n\t\"./sd.js\": 1221,\n\t\"./se\": 33478,\n\t\"./se.js\": 33478,\n\t\"./si\": 17538,\n\t\"./si.js\": 17538,\n\t\"./sk\": 5784,\n\t\"./sk.js\": 5784,\n\t\"./sl\": 46637,\n\t\"./sl.js\": 46637,\n\t\"./sq\": 86794,\n\t\"./sq.js\": 86794,\n\t\"./sr\": 45719,\n\t\"./sr-cyrl\": 3322,\n\t\"./sr-cyrl.js\": 3322,\n\t\"./sr.js\": 45719,\n\t\"./ss\": 56000,\n\t\"./ss.js\": 56000,\n\t\"./sv\": 41011,\n\t\"./sv.js\": 41011,\n\t\"./sw\": 40748,\n\t\"./sw.js\": 40748,\n\t\"./ta\": 11025,\n\t\"./ta.js\": 11025,\n\t\"./te\": 11885,\n\t\"./te.js\": 11885,\n\t\"./tet\": 28861,\n\t\"./tet.js\": 28861,\n\t\"./th\": 55802,\n\t\"./th.js\": 55802,\n\t\"./tl-ph\": 29231,\n\t\"./tl-ph.js\": 29231,\n\t\"./tlh\": 31052,\n\t\"./tlh.js\": 31052,\n\t\"./tr\": 85096,\n\t\"./tr.js\": 85096,\n\t\"./tzl\": 79846,\n\t\"./tzl.js\": 79846,\n\t\"./tzm\": 81765,\n\t\"./tzm-latn\": 97711,\n\t\"./tzm-latn.js\": 97711,\n\t\"./tzm.js\": 81765,\n\t\"./uk\": 16618,\n\t\"./uk.js\": 16618,\n\t\"./ur\": 57777,\n\t\"./ur.js\": 57777,\n\t\"./uz\": 57609,\n\t\"./uz-latn\": 72475,\n\t\"./uz-latn.js\": 72475,\n\t\"./uz.js\": 57609,\n\t\"./vi\": 21135,\n\t\"./vi.js\": 21135,\n\t\"./x-pseudo\": 64051,\n\t\"./x-pseudo.js\": 64051,\n\t\"./yo\": 82218,\n\t\"./yo.js\": 82218,\n\t\"./zh-cn\": 52648,\n\t\"./zh-cn.js\": 52648,\n\t\"./zh-hk\": 1632,\n\t\"./zh-hk.js\": 1632,\n\t\"./zh-tw\": 50304,\n\t\"./zh-tw.js\": 50304\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 35358;","$.i18n().load({\n    \"pt-br\": {\n        msg_parson_check_me: \"Verificar\",\n        msg_parson_reset: \"Resetar\",\n        msg_parson_help:\"Ajuda\",\n        msg_parson_too_short: \"Seu programa é muito curto. Adicione mais blocos.\",\n        msg_parson_drag_from_here: \"Arraste daqui\",\n        msg_parson_drag_to_here: \"Largue os blocos aqui\",\n        msg_parson_correct_first_try:\n            \"Perfeito! Você levou apenas uma tentativa para resolver. Bom trabalho!\",\n        msg_parson_correct:\n            \"Perfeito! Você levou $1 tentativas para resolver. Clique em Resetar para tentar resolver em uma tentativa.\" ,\n        msg_parson_wrong_indent:\n            \"Este bloco não está indentado corretamente. Indente mais arrastando-o para a direita ou reduza a indentação arrastando para a esquerda.\",\n        msg_parson_wrong_indents:\n            \"Estes blocos não estão indentados corretamente. Para indentar mais, arraste o bloco para a direita. Para reduzir a indentação, arraste para a esquerda.\",\n        msg_parson_wrong_order:\n            \"Blocos destacados no seu programa estão errados ou estão na ordem errada. Isso pode ser resolvido movendo, excluindo ou substituindo os blocos destacados.\",\n        msg_parson_arrow_navigate:\n            \"Use as teclas de setas para navegar. Espaço para selecionar/ desmarcar blocos para mover.\",\n        msg_parson_help_info:\n            \"Clique no botão Ajuda se você quiser facilitar o problema\",\n        msg_parson_not_solution:\n            \"Foi desabilitado um bloco de código desnecessário (que não faz parte da solução).\",\n        msg_parson_provided_indent:\"Foi fornecida a indentação.\",\n        msg_parson_combined_blocks:\"Dois blocos de códigos foram combinados em um.\",\n        msg_parson_remove_incorrect:\n            \"Será removido um bloco de código incorreto da área de resposta\",\n        msg_parson_will_combine:\"Serão combinados dois blocos\",\n        msg_parson_atleast_three_attempts:\n            \"Você deve tentar pelo menos três vezes antes de pedir ajuda\",\n        msg_parson_three_blocks_left:\n            \"Restam apenas 3 blocos corretos. Você deve colocá-los em ordem\",\n        msg_parson_will_provide_indent: \"Será fornecida a indentação\"\n    },\n});\n","export default class HParsonsFeedback {\n    constructor(hparsons) {\n        this.hparsons = hparsons;\n        this.percent = 0;\n    }\n    createOutput() {\n        console.log('createOutput method not implemented in feedback!');\n    }\n    async runButtonHandler() {\n        console.log('runButtonClicked method not implemented in feedback!');\n    }\n    customizeUI() {\n        // used to change some minor UI, e.g. the text on Run button\n    }\n    init() {\n        // initlizations functionalities such as preparing SQL,\n        // or checking related options\n    }\n\n    clearFeedback() {\n        // called when input is changed\n        console.log('clearFeedback method not implemented in feedback!');\n    }\n    \n    reset() {\n        // called when reset is clicked\n        console.log('reset method not implemented in feedback!');\n    }\n}\n","// This file is adapted from lineGrader in parsons directive.\n// We could have fit our data structure to use the original LineBasedGrader directly,\n// but that would result in changes in parsons directive affecting this, so we created a copy\n// instead.\n\nexport default class BlockBasedGrader {\n    constructor(problem) {\n        this.problem = problem;\n        this.percent = 0;\n    }\n    // Use a LIS (Longest Increasing Subsequence) algorithm to return the indexes\n    // that are not part of that subsequence.\n    inverseLISIndices(arr) {\n        // Get all subsequences\n        var allSubsequences = [];\n        for (var i = 0; i < arr.length; i++) {\n            var subsequenceForCurrent = [arr[i]],\n                current = arr[i],\n                lastElementAdded = -1;\n            for (var j = i; j < arr.length; j++) {\n                var subsequent = arr[j];\n                if (subsequent > current && lastElementAdded < subsequent) {\n                    subsequenceForCurrent.push(subsequent);\n                    lastElementAdded = subsequent;\n                }\n            }\n            allSubsequences.push(subsequenceForCurrent);\n        }\n        // Figure out the longest one\n        var longestSubsequenceLength = -1;\n        var longestSubsequence;\n        for (let i in allSubsequences) {\n            var subs = allSubsequences[i];\n            if (subs.length > longestSubsequenceLength) {\n                longestSubsequenceLength = subs.length;\n                longestSubsequence = subs;\n            }\n        }\n        // Create the inverse indexes\n        var indexes = [];\n        var lIndex = 0;\n        for (let i = 0; i < arr.length; i++) {\n            if (lIndex > longestSubsequence.length) {\n                indexes.push(i);\n            } else {\n                if (arr[i] == longestSubsequence[lIndex]) {\n                    lIndex += 1;\n                } else {\n                    indexes.push(i);\n                }\n            }\n        }\n        return indexes;\n    }\n    // grade that element, returning the state\n    grade() {\n        this.correctLines = 0;\n        this.percentLines = 0;\n        var solutionLines = this.solution;\n        var answerLines = this.answer;\n        var i;\n        var state;\n        this.percentLines =\n            Math.min(answerLines.length, solutionLines.length) /\n            Math.max(answerLines.length, solutionLines.length);\n        if (answerLines.length < solutionLines.length) {\n            state = \"incorrectTooShort\";\n            this.correctLength = false;\n        } else if (answerLines.length == solutionLines.length) {\n            this.correctLength = true;\n        } else {\n            this.correctLength = false;\n        }\n\n        // Determine whether the code **that is there** is in the correct order\n        // If there is too much or too little code this only matters for\n        // calculating a percentage score.\n        let isCorrectOrder = true;\n        this.correctLines = 0;\n        this.solutionLength = solutionLines.length;\n        let loopLimit = Math.min(solutionLines.length, answerLines.length);\n        for (i = 0; i < loopLimit; i++) {\n            if (answerLines[i] !== solutionLines[i]) {\n                isCorrectOrder = false;\n            } else {\n                this.correctLines += 1;\n            }\n        }\n\n        if (\n            isCorrectOrder &&\n            this.correctLength\n        ) {\n            // Perfect\n            state = \"correct\";\n        } else if (!isCorrectOrder && state != \"incorrectTooShort\") {\n            state = \"incorrectMoveBlocks\";\n        } else if (!this.correctLength && state != \"incorrectTooShort\") {\n            state = \"incorrectMoveBlocks\";\n        }\n        this.calculatePercent();\n        this.graderState = state;\n        return state;\n    }\n\n    calculatePercent() {\n        let numLines = this.percentLines * 0.2;\n        let lines = this.answer.length;\n        let numCorrectBlocks = (this.correctLines / lines) * 0.8;\n\n        this.percent = numLines + numCorrectBlocks;\n    }\n}\n","import HParsonsFeedback from \"./hparsonsFeedback\";\nimport BlockBasedGrader from \"./blockGrader.js\";\nimport \"../../parsons/js/parsons-i18n.en.js\";\nimport \"../../parsons/js/parsons-i18n.pt-br.js\";\n\nexport default class BlockFeedback extends HParsonsFeedback {\n    createOutput() {\n        // Block based grading output\n        this.messageDiv = document.createElement(\"div\");\n        this.hparsons.outerDiv.appendChild(this.messageDiv);\n    }\n    customizeUI() {\n        $(this.hparsons.runButton).text('Check Me');\n    }\n\n    init() {\n        this.checkCount = 0;\n        this.solved = false;\n        // TODO: not sure what is the best way to do this\n        this.grader = new BlockBasedGrader();\n        let solutionBlocks = [];\n        for (let i = 0; i < this.hparsons.blockAnswer.length; ++i) {\n            solutionBlocks.push(this.hparsons.originalBlocks[this.hparsons.blockAnswer[i]]);\n        }\n        this.solution = solutionBlocks;\n        this.grader.solution = solutionBlocks;\n        this.answerArea = this.hparsons.hparsonsInput.querySelector('.drop-area');\n    }\n\n    // Called when check button clicked (block-based Feedback)\n    async runButtonHandler() {\n        this.checkCurrentAnswer();\n        this.logCurrentAnswer();\n        this.renderFeedback();\n    }\n\n    async logCurrentAnswer() {\n        let act = {\n            scheme: \"block\",\n            correct: this.grader.graderState == 'correct' ? \"T\" : \"F\",\n            answer: this.hparsons.hparsonsInput.getParsonsTextArray(),\n            percent: this.grader.percent\n        }\n        let logData = {\n            event: \"hparsonsAnswer\",\n            div_id: this.hparsons.divid,\n            act: JSON.stringify(act),\n            answer: JSON.stringify({\"blocks\": act.answer}),\n            percent: this.grader.percent,\n            correct: act.correct,\n        }\n        await this.hparsons.logBookEvent(logData);\n    }\n\n    // Used for block-based feedback\n    checkCurrentAnswer() {\n        if (!this.solved) {\n            this.checkCount++;\n            this.clearFeedback();\n            this.grader.answer = this.hparsons.hparsonsInput.getParsonsTextArray();\n            this.grade = this.grader.grade();\n            if (this.grade == \"correct\") {\n                $(this.hparsons.runButton).prop(\"disabled\", true);\n                this.solved = true;\n            }\n        }\n    }\n\n    renderFeedback() {\n        this.grade = this.grader.graderState;\n        var feedbackArea;\n        var answerArea = $(this.answerArea);\n        feedbackArea = $(this.messageDiv);\n\n        if (this.grade === \"correct\") {\n            answerArea.addClass(\"correct\");\n            feedbackArea.fadeIn(100);\n            feedbackArea.attr(\"class\", \"hp_feedback alert alert-info\");\n            if (this.checkCount > 1) {\n                feedbackArea.html(\n                    $.i18n(\"msg_parson_correct\", this.checkCount)\n                );\n            } else {\n                feedbackArea.html($.i18n(\"msg_parson_correct_first_try\"));\n            }\n            this.checkCount = 0;\n        }\n\n        if (this.grade === \"incorrectTooShort\") {\n            // too little code\n            answerArea.addClass(\"incorrect\");\n            feedbackArea.fadeIn(500);\n            feedbackArea.attr(\"class\", \"hp_feedback alert alert-danger\");\n            feedbackArea.html($.i18n(\"msg_parson_too_short\"));\n        }\n\n        if (this.grade === \"incorrectMoveBlocks\") {\n            var answerBlocks = this.answerArea.children;\n            var inSolution = [];\n            var inSolutionIndexes = [];\n            var notInSolution = [];\n            for (let i = 0; i < answerBlocks.length; i++) {\n                var block = answerBlocks[i];\n                var index = this.solution.indexOf(block.textContent);\n                if (index == -1) {\n                    notInSolution.push(block);\n                } else {\n                    inSolution.push(block);\n                    inSolutionIndexes.push(index);\n                }\n            }\n            var lisIndexes = this.grader.inverseLISIndices(inSolutionIndexes);\n            for (let i = 0; i < lisIndexes.length; i++) {\n                notInSolution.push(inSolution[lisIndexes[i]]);\n            }\n            answerArea.addClass(\"incorrect\");\n            feedbackArea.fadeIn(500);\n            feedbackArea.attr(\"class\", \"alert alert-danger\");\n            for (let i = 0; i < notInSolution.length; i++) {\n                $(notInSolution[i]).addClass(\"incorrectPosition\");\n            }\n            feedbackArea.html($.i18n(\"msg_parson_wrong_order\"));\n        }\n    }\n\n    // Feedback UI for Block-based Feedback\n    clearFeedback() {\n        $(this.answerArea).removeClass(\"incorrect correct\");\n        var children = this.answerArea.childNodes;\n        for (var i = 0; i < children.length; i++) {\n            $(children[i]).removeClass(\n                \"correctPosition incorrectPosition\"\n            );\n        }\n        $(this.messageDiv).hide();\n    }\n\n    reset() {\n        if (this.solved) {\n            this.checkCount = 0;\n            $(this.hparsons.runButton).prop(\"disabled\", false);\n            this.solved = false;\n        }\n        this.clearFeedback();\n    }\n\n}\n","import HParsonsFeedback from \"./hparsonsFeedback\";\nimport initSqlJs from \"sql.js/dist/sql-wasm.js\";\nimport Handsontable from \"handsontable\";\nimport \"handsontable/dist/handsontable.full.css\";\n\nvar allDburls = {};\n\nexport default class SQLFeedback extends HParsonsFeedback {\n    createOutput() {\n        var outDiv = document.createElement(\"div\");\n        $(outDiv).addClass(\"hp_output\");\n        this.outDiv = outDiv;\n        this.output = document.createElement(\"pre\");\n        this.output.id = this.hparsons.divid + \"_stdout\";\n        $(this.output).css(\"visibility\", \"hidden\");\n        var clearDiv = document.createElement(\"div\");\n        $(clearDiv).css(\"clear\", \"both\"); // needed to make parent div resize properly\n        this.hparsons.outerDiv.appendChild(clearDiv);\n        outDiv.appendChild(this.output);\n        this.hparsons.outerDiv.appendChild(outDiv);\n        clearDiv = document.createElement(\"div\");\n        $(clearDiv).css(\"clear\", \"both\"); // needed to make parent div resize properly\n        this.hparsons.outerDiv.appendChild(clearDiv);\n    }\n\n    renderFeedback() {\n        if (this.testResult) {\n            $(this.output).text(this.testResult);\n            $(this.output).css(\"visibility\", \"visible\");\n        }\n        $(this.outDiv).show();\n    }\n\n    clearFeedback() {\n        $(this.outDiv).hide();\n    }\n\n    reset() {\n        this.clearFeedback();\n    }\n\n    init() {\n        // adapted from activecode-sql\n        // fnprefix sets the path to load the sql-wasm.wasm file\n        var bookprefix;\n        var fnprefix;\n        if (\n            eBookConfig.useRunestoneServices ||\n            window.location.search.includes(\"mode=browsing\")\n        ) {\n            bookprefix = `/books/published/${eBookConfig.basecourse}`;\n            fnprefix = bookprefix + \"/_static\";\n        } else {\n            // The else clause handles the case where you are building for a static web browser\n            bookprefix = \"\";\n            fnprefix = \"/_static\";\n        }\n        let SQLconfig = {\n            locateFile: (filename) => `${fnprefix}/${filename}`,\n        };\n        var self = this.hparsons;\n        initSqlJs(SQLconfig).then(function (SQL) {\n            // set up call to load database asynchronously if given\n            if (self.dburl) {\n                if (self.dburl.startsWith(\"/_static\")) {\n                    self.dburl = `${bookprefix}${self.dburl}`;\n                }\n                $(self.runButton).attr(\"disabled\", \"disabled\");\n                let buttonText = $(self.runButton).text();\n                $(self.runButton).text($.i18n(\"msg_activecode_load_db\"));\n                if (!(self.dburl in allDburls)) {\n                    allDburls[self.dburl] = {\n                        status: \"loading\",\n                        xWaitFor: jQuery.Deferred(),\n                    };\n                } else {\n                    if (allDburls[self.dburl].status == \"loading\") {\n                        allDburls[self.dburl].xWaitFor.done(function () {\n                            self.db = allDburls[self.dburl].dbObject;\n                            $(self.runButton).removeAttr(\"disabled\");\n                            $(self.runButton).text(buttonText);\n                        });\n                        return;\n                    }\n                    self.db = allDburls[self.dburl].dbObject;\n                    $(self.runButton).removeAttr(\"disabled\");\n                    $(self.runButton).text(buttonText);\n                    return;\n                }\n                var xhr = new XMLHttpRequest();\n                // For example: https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite\n                xhr.open(\"GET\", self.dburl, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onload = (e) => {\n                    var uInt8Array = new Uint8Array(xhr.response);\n                    self.db = new SQL.Database(uInt8Array);\n                    allDburls[self.dburl].dbObject = self.db;\n                    $(self.runButton).text(buttonText);\n                    $(self.runButton).removeAttr(\"disabled\");\n                    allDburls[self.dburl].db = uInt8Array;\n                    allDburls[self.dburl].status = \"ready\";\n                    allDburls[self.dburl].xWaitFor.resolve();\n                    // contents is now [{columns:['col1','col2',...], values:[[first row], [second row], ...]}]\n                };\n                xhr.send();\n            } else {\n                self.db = new SQL.Database();\n            }\n        });\n    }\n\n    // adapted from activecode - SQL\n    async runButtonHandler() {\n        // Disable the run button until the run is finished.\n        this.hparsons.runButton.disabled = true;\n        try {\n            await this.runProg();\n        } catch (e) {\n            console.log(`there was an error ${e} running the code`);\n        }\n        this.logCurrentAnswer();\n        this.renderFeedback();\n        // The run is finished; re-enable the button.\n        this.hparsons.runButton.disabled = false;\n    }\n\n    // adapted from activecode-sql\n    async runProg() {\n        // Clear any old results\n        let divid = this.hparsons.divid + \"_sql_out\";\n        let respDiv = document.getElementById(divid);\n        if (respDiv) {\n            respDiv.parentElement.removeChild(respDiv);\n        }\n        $(this.output).text(\"\");\n        // creating new results div\n        respDiv = document.createElement(\"div\");\n        respDiv.id = divid;\n        this.outDiv.appendChild(respDiv);\n        // show the output div\n        $(this.outDiv).show();\n\n        // Run this query\n        let query = await this.buildProg();\n        if (!this.hparsons.db) {\n            $(this.output).text(\n                `Error: Database not initialized! DBURL: ${this.hparsons.dburl}`\n            );\n            return;\n        }\n\n        // When having prefix/suffix, the visualization is consistent with \"showlastsql\" option of sql activecode:\n        //        only visualize last entry\n\n        let executionSuccessFlag = true;\n        // executing hidden prefix if exist\n        if (query.prefix) {\n            this.prefixresults = this.executeIteratedStatements(\n                this.hparsons.db.iterateStatements(query.prefix)\n            );\n            if (this.prefixresults.at(-1).status == \"failure\") {\n                // if error occured in hidden prefix, log and stop executing the rest\n                this.visualizeResults(\n                    respDiv,\n                    this.prefixresults,\n                    \"Error executing hidden code in prefix\"\n                );\n                executionSuccessFlag = false;\n            }\n        }\n\n        // executing student input in micro Parsons\n        if (executionSuccessFlag) {\n            this.results = this.executeIteratedStatements(\n                this.hparsons.db.iterateStatements(query.input)\n            );\n            if (this.results.at(-1).status == \"failure\") {\n                // if error occured in student input, stop executing suffix/unitttest\n                // and visualize the error\n                this.visualizeResults(respDiv, this.results);\n                executionSuccessFlag = false;\n            } else if (!query.suffix) {\n                this.visualizeResults(respDiv, this.results);\n            }\n        }\n\n        // executing hidden suffix if exist\n        // In most cases the suffix is just \"select * from x\" to\n        //    get all data from the table to see if the operations the table is correct\n        if (executionSuccessFlag && query.suffix) {\n            this.suffixresults = this.executeIteratedStatements(\n                this.hparsons.db.iterateStatements(query.suffix)\n            );\n            if (this.suffixresults.at(-1).status == \"failure\") {\n                // if error occured in hidden suffix, visualize the results\n                this.visualizeResults(\n                    respDiv,\n                    this.suffixresults,\n                    \"Error executing hidden code in suffix\"\n                );\n                executionSuccessFlag = false;\n            } else {\n                this.visualizeResults(respDiv, this.suffixresults);\n            }\n        }\n\n        // Now handle autograding\n        // autograding takes the results of the hidden suffix if exist\n        // otherwise take the result of student input\n        if (this.hparsons.unittest) {\n            if (executionSuccessFlag) {\n                if (this.suffixresults) {\n                    this.testResult = this.autograde(\n                        this.suffixresults[this.suffixresults.length - 1]\n                    );\n                } else {\n                    this.testResult = this.autograde(\n                        this.results[this.results.length - 1]\n                    );\n                }\n            } else {\n                // unit test results when execution failed\n                this.passed = 0;\n                this.failed = 0;\n                this.percent = NaN;\n                this.unit_results = `percent:${this.percent}:passed:${this.passed}:failed:${this.failed}`;\n                // Do not show unittest results if execution failed\n                $(this.output).css(\"visibility\", \"hidden\");\n            }\n        } else {\n            $(this.output).css(\"visibility\", \"hidden\");\n        }\n\n        return Promise.resolve(\"done\");\n    }\n\n    // Refactored from activecode-sql.\n    // Takes iterated statements from db.iterateStatemnts(queryString)\n    // Returns Array<result>:\n    /* each result: {\n        status: \"success\" or \"faliure\",\n        // for SELECT statements (?):\n        columns: number of columns,\n        values: data,\n        rowcount: number of rows in data,\n        // for INSERT, UPDATE, DELETE:\n        operation: \"INSERT\", \"UPDATE\", or \"DELETE\",\n        rowcount: number of rows modified,\n        // when error occurred (aside from status):\n        message: error message,\n        sql: remaining SQL (?)\n        // when no queries were executed:\n        message: \"no queries submitted\"\n    }*/\n    // If an error occurs it will stop executing the rest of queries in it.\n    // Thus the error result will always be the last item.\n    executeIteratedStatements(it) {\n        let results = [];\n        try {\n            for (let statement of it) {\n                let columns = statement.getColumnNames();\n                if (columns.length > 0) {\n                    // data! probably a SELECT\n                    let data = [];\n                    while (statement.step()) {\n                        data.push(statement.get());\n                    }\n                    results.push({\n                        status: \"success\",\n                        columns: columns,\n                        values: data,\n                        rowcount: data.length,\n                    });\n                } else {\n                    let nsql = statement.getNormalizedSQL();\n                    let prefix = nsql.substr(0, 6).toLowerCase();\n                    statement.step(); // execute the query\n                    // Try to detect INSERT/UPDATE/DELETE to give friendly feedback\n                    // on rows modified - unfortunately, this won't catch such queries\n                    // if they use CTEs.  There seems to be no reliable way of knowing\n                    // when a SQLite query actually modified data.\n                    if (\n                        prefix === \"insert\" ||\n                        prefix === \"update\" ||\n                        prefix === \"delete\"\n                    ) {\n                        results.push({\n                            status: \"success\",\n                            operation: prefix,\n                            rowcount: this.hparsons.db.getRowsModified(),\n                        });\n                    } else {\n                        results.push({ status: \"success\" });\n                    }\n                }\n            }\n        } catch (e) {\n            results.push({\n                status: \"failure\",\n                message: e.toString(),\n                sql: it.getRemainingSQL(),\n            });\n        }\n        if (results.length === 0) {\n            results.push({\n                status: \"failure\",\n                message: \"No queries submitted.\",\n            });\n        }\n        return results;\n    }\n\n    // output the results in the resultArray(Array<results>).\n    // container: the container that contains the results\n    // resultArray (Array<result>): see executeIteratedStatements\n    // Each result will be in a separate row.\n    // devNote will be displayed in the top row if exist;\n    //     it usually won't happen unless something is wrong with prefix and suffix.\n    //     (\"error execution prefix/suffix\")\n    visualizeResults(container, resultArray, devNote) {\n        if (devNote) {\n            let section = document.createElement(\"div\");\n            section.setAttribute(\"class\", \"hp_sql_result\");\n            container.appendChild(section);\n            let messageBox = document.createElement(\"pre\");\n            messageBox.textContent = devNote;\n            messageBox.setAttribute(\"class\", \"hp_sql_result_failure\");\n            section.appendChild(messageBox);\n        }\n        for (let r of resultArray) {\n            let section = document.createElement(\"div\");\n            section.setAttribute(\"class\", \"hp_sql_result\");\n            container.appendChild(section);\n            if (r.status === \"success\") {\n                if (r.columns) {\n                    let tableDiv = document.createElement(\"div\");\n                    section.appendChild(tableDiv);\n                    let maxHeight = 350;\n                    if (resultArray.length > 1) maxHeight = 200; // max height smaller if lots of results\n                    createTable(r, tableDiv, maxHeight);\n                    let messageBox = document.createElement(\"pre\");\n                    let rmsg = r.rowcount !== 1 ? \" rows \" : \" row \";\n                    let msg = \"\" + r.rowcount + rmsg + \"returned\";\n                    if (r.rowcount > 100) {\n                        msg = msg + \" (only first 100 rows displayed)\";\n                    }\n                    msg = msg + \".\";\n                    messageBox.textContent = msg;\n                    messageBox.setAttribute(\"class\", \"hp_sql_result_success\");\n                    section.appendChild(messageBox);\n                } else if (r.rowcount) {\n                    let messageBox = document.createElement(\"pre\");\n                    let op = r.operation;\n                    op = op + (op.charAt(op.length - 1) === \"e\" ? \"d.\" : \"ed.\");\n                    let rmsg = r.rowcount !== 1 ? \" rows \" : \" row \";\n                    messageBox.textContent = \"\" + r.rowcount + rmsg + op;\n                    messageBox.setAttribute(\"class\", \"hp_sql_result_success\");\n                    section.appendChild(messageBox);\n                } else {\n                    let messageBox = document.createElement(\"pre\");\n                    messageBox.textContent = \"Operation succeeded.\";\n                    messageBox.setAttribute(\"class\", \"hp_sql_result_success\");\n                    section.appendChild(messageBox);\n                }\n            } else {\n                let messageBox = document.createElement(\"pre\");\n                messageBox.textContent = r.message;\n                messageBox.setAttribute(\"class\", \"hp_sql_result_failure\");\n                section.appendChild(messageBox);\n            }\n        }\n    }\n\n    // adapted from activecode\n    async buildProg() {\n        // assemble code from prefix, suffix, and editor for running.\n        let prog = {};\n        if (this.hparsons.hiddenPrefix) {\n            prog.prefix = this.hparsons.hiddenPrefix;\n        }\n        prog.input =\n            this.hparsons.hparsonsInput.getParsonsTextArray().join(\" \") + \"\\n\";\n        if (this.hparsons.hiddenSuffix) {\n            prog.suffix = this.hparsons.hiddenSuffix;\n        }\n        return Promise.resolve(prog);\n    }\n\n    // copied from activecode-sql\n    async logCurrentAnswer() {\n        if (this.unit_results) {\n            let act = {\n                scheme: \"execution\",\n                correct: this.failed == 0 && this.passed != 0 ? \"T\" : \"F\",\n                answer: this.hparsons.hparsonsInput.getParsonsTextArray(),\n                percent: this.percent, // percent is null if there is execution error\n            };\n            let logData = {\n                event: \"hparsonsAnswer\",\n                div_id: this.hparsons.divid,\n                act: JSON.stringify(act),\n                percent: this.percent || 0,\n                correct: act.correct,\n                answer: JSON.stringify({ blocks: act.answer }),\n            };\n            await this.hparsons.logBookEvent(logData);\n        }\n    }\n\n    // might move to base class if used by multiple execution based feedback\n    autograde(result_table) {\n        var tests = this.hparsons.unittest.split(/\\n/);\n        this.passed = 0;\n        this.failed = 0;\n        // Tests should be of the form\n        // assert row,col oper value for example\n        // assert 4,4 == 3\n        var result = \"\";\n        tests = tests.filter(function (s) {\n            return s.indexOf(\"assert\") > -1;\n        });\n        for (let test of tests) {\n            let wlist = test.split(/\\s+/);\n            wlist.shift();\n            let loc = wlist.shift();\n            let oper = wlist.shift();\n            let expected = wlist.join(\" \");\n            let [row, col] = loc.split(\",\");\n            result += this.testOneAssert(\n                row,\n                col,\n                oper,\n                expected,\n                result_table\n            );\n            result += \"\\n\";\n        }\n        let pct = (100 * this.passed) / (this.passed + this.failed);\n        this.percent = pct;\n        pct = pct.toLocaleString(undefined, { maximumFractionDigits: 2 });\n        result += `You passed ${this.passed} out of ${\n            this.passed + this.failed\n        } tests for ${pct}%`;\n        this.unit_results = `percent:${pct}:passed:${this.passed}:failed:${this.failed}`;\n        return result;\n    }\n\n    // might move to base class if used by multiple execution based feedback\n    testOneAssert(row, col, oper, expected, result_table) {\n        // make sure row and col are in bounds\n        let actual;\n        let output = \"\";\n        try {\n            actual = result_table.values[row][col];\n        } catch (e) {\n            if (expected == \"NO_DATA\") {\n                this.passed++;\n                output = `Passed: No data in row ${row}, column ${col}`;\n                return output;\n            } else {\n                output = `Failed: Not enough data to check row ${row} or column ${col}`;\n                return output;\n            }\n        }\n        const operators = {\n            \"==\": function (operand1, operand2) {\n                return operand1 == operand2;\n            },\n            \"!=\": function (operand1, operand2) {\n                return operand1 != operand2;\n            },\n            \">\": function (operand1, operand2) {\n                return operand1 > operand2;\n            },\n            \"<\": function (operand1, operand2) {\n                return operand1 > operand2;\n            },\n        };\n        let res = operators[oper](actual, expected);\n        if (res) {\n            output = `Pass: ${actual} ${oper} ${expected} in row ${row} column ${result_table.columns[col]}`;\n            this.passed++;\n        } else {\n            output = `Failed ${actual} ${oper} ${expected} in row ${row} column ${result_table.columns[col]}`;\n            this.failed++;\n        }\n        return output;\n    }\n}\n\nfunction createTable(tableData, container, maxHeight) {\n    let data = tableData.values;\n    let trimRows = undefined;\n    if (data.length === 0) {\n        // kludge: no column headers will show up unless we do this\n        data = [tableData.columns.map((e) => null)];\n        trimRows = [0];\n    }\n\n    var hot = new Handsontable(container, {\n        data: data,\n        trimRows: trimRows,\n        width: \"100%\",\n        height: maxHeight,\n        autoRowSize: true,\n        autoColumnSize: { useHeaders: true },\n        rowHeaders: false,\n        colHeaders: tableData.columns,\n        editor: false,\n        maxRows: 100,\n        filters: false,\n        dropdownMenu: false,\n        licenseKey: \"non-commercial-and-evaluation\",\n    });\n\n    // calculate actual height and resize\n    let actualHeight = 40; // header height + small margin\n    if (tableData.values.length > 0) {\n        for (let i = 0; i < data.length; i++) {\n            actualHeight = actualHeight + hot.getRowHeight(i);\n            if (actualHeight > maxHeight) break;\n        }\n    }\n\n    hot.updateSettings({ height: actualHeight });\n\n    return hot;\n}\n","import RunestoneBase from \"../../common/js/runestonebase.js\";\nimport \"../css/hparsons.css\";\nimport \"../css/hljs-xcode.css\";\nimport BlockFeedback from \"./BlockFeedback.js\";\nimport SQLFeedback from \"./SQLFeedback.js\";\nimport { InitMicroParsons } from \"micro-parsons/micro-parsons/micro-parsons.js\";\nimport \"micro-parsons/micro-parsons/micro-parsons.css\";\n// If you need to debug something in the micro-parsons library then\n// gh repo clone amy21206/micro-parsons-element\n// run npm install and npm build\n// copy everything from bin into the hparsons/js folder and build the components.\n/*import {InitMicroParsons} from './micro-parsons.js';\nimport './micro-parsons.css';*/\n\nexport var hpList;\n// Dictionary that contains all instances of horizontal Parsons problem objects\nif (hpList === undefined) hpList = {};\n\nexport default class HParsons extends RunestoneBase {\n    constructor(opts) {\n        super(opts);\n        // getting settings\n        var orig = $(opts.orig).find(\"textarea\")[0];\n        this.reuse = $(orig).data(\"reuse\") ? true : false;\n        this.randomize = $(orig).data(\"randomize\") ? true : false;\n        this.isBlockGrading = $(orig).data(\"blockanswer\") ? true : false;\n        this.language = $(orig).data(\"language\");\n        // Detect math mode\n        if (this.language === undefined && orig.textContent.includes('span class=\"process-math\"')) {\n            this.language = \"math\";\n        }\n        if (this.isBlockGrading) {\n            this.blockAnswer = $(orig).data(\"blockanswer\").split(\" \");\n        }\n        this.divid = opts.orig.id;\n        this.containerDiv = opts.orig;\n        this.useRunestoneServices = opts.useRunestoneServices;\n\n        // Set the storageId (key for storing data)\n        var storageId = super.localStorageKey();\n        this.storageId = storageId;\n\n        this.origElem = orig;\n        this.origText = this.origElem.textContent;\n        this.code = $(orig).text() || \"\\n\\n\\n\\n\\n\";\n        this.dburl = $(orig).data(\"dburl\");\n        this.runButton = null;\n        this.saveButton = null;\n        this.loadButton = null;\n        this.outerDiv = null;\n        this.controlDiv = null;\n        this.processContent(this.code);\n\n        this.microParsonToRaw = new Map();\n        this.simulatedSolution = [];\n\n        // Change to factory when more execution based feedback is included\n        if (this.isBlockGrading) {\n            this.feedbackController = new BlockFeedback(this);\n        } else {\n            this.feedbackController = new SQLFeedback(this);\n        }\n\n        // creating UI components\n        this.createEditor();\n        this.createOutput();\n        this.createControls();\n        this.feedbackController.customizeUI();\n\n        if ($(orig).data(\"caption\")) {\n            this.caption = $(orig).data(\"caption\");\n        } else {\n            this.caption = \"MicroParsons\";\n        }\n        this.addCaption(\"runestone\");\n        this.indicate_component_ready();\n\n        // initializing functionalities for different feedback\n        this.feedbackController.init();\n        this.checkServer(\"hparsonsAnswer\", true);\n    }\n\n    processContent(code) {\n        // todo: add errors when blocks are nonexistent (maybe in python)?\n        this.hiddenPrefix = this.processSingleContent(code, \"--hiddenprefix--\");\n        this.originalBlocks = this.processSingleContent(code, \"--blocks--\")\n            .split(\"\\n\")\n            .slice(1, -1);\n        this.hiddenSuffix = this.processSingleContent(code, \"--hiddensuffix--\");\n        this.unittest = this.processSingleContent(code, \"--unittest--\");\n    }\n\n    processSingleContent(code, delimiter) {\n        let index = code.indexOf(delimiter);\n        if (index > -1) {\n            let content = code.substring(index + delimiter.length);\n            let endIndex = content.indexOf(\"\\n--\");\n            content =\n                endIndex > -1 ? content.substring(0, endIndex + 1) : content;\n            return content;\n        }\n        return undefined;\n    }\n\n    // copied from activecode, already modified to add parsons\n    createEditor() {\n        this.outerDiv = document.createElement(\"div\");\n        $(this.origElem).replaceWith(this.outerDiv);\n        this.outerDiv.id = `${this.divid}-container`;\n        this.outerDiv.addEventListener(\"micro-parsons\", (ev) => {\n            const eventListRunestone = [\"input\", \"reset\"];\n            if (eventListRunestone.includes(ev.detail.type)) {\n                // only log the events in the event list\n                this.logHorizontalParsonsEvent(ev.detail);\n                // when event is input or reset: clear previous feedback\n                this.feedbackController.clearFeedback();\n            }\n        });\n        const props = {\n            selector: `#${this.divid}-container`,\n            id: `${this.divid}-hparsons`,\n            reuse: this.reuse,\n            randomize: this.randomize,\n            parsonsBlocks: [...this.originalBlocks],\n            language: this.language,\n        };\n        InitMicroParsons(props);\n        this.hparsonsInput = $(this.outerDiv).find(\"micro-parsons\")[0];\n        this.renderMathInBlocks();\n        // Change \"code\" to \"answer\" in parsons direction for non-code languages\n        if (this.language === undefined || this.language === \"math\") {\n            this.outerDiv.querySelectorAll(\".hparsons-tip\").forEach(el => {\n                if (el.textContent.includes(\"our code\")) {\n                    el.textContent = el.textContent.replace(\"our code\", \"our answer\");\n                }\n            });\n        }\n    }\n\n    createOutput() {\n        this.feedbackController.createOutput();\n    }\n\n    createControls() {\n        var ctrlDiv = document.createElement(\"div\");\n        $(ctrlDiv).addClass(\"hp_actions\");\n\n        // Run Button\n        this.runButton = document.createElement(\"button\");\n        $(this.runButton).addClass(\"btn btn-success run-button\");\n        ctrlDiv.appendChild(this.runButton);\n        $(this.runButton).attr(\"type\", \"button\");\n        $(this.runButton).text(\"Run\");\n        var that = this;\n        this.runButton.onclick = () => {\n            that.feedbackController.runButtonHandler();\n            that.setLocalStorage();\n        };\n\n        // Reset button\n        var resetBtn;\n        resetBtn = document.createElement(\"button\");\n        $(resetBtn).text(\"Reset\");\n        $(resetBtn).addClass(\"btn btn-warning run-button\");\n        ctrlDiv.appendChild(resetBtn);\n        this.resetButton = resetBtn;\n        this.resetButton.onclick = () => {\n            that.hparsonsInput.resetInput();\n            that.setLocalStorage();\n            that.feedbackController.reset();\n            that.renderMathInBlocks();\n        };\n        $(resetBtn).attr(\"type\", \"button\");\n\n        $(this.outerDiv).prepend(ctrlDiv);\n        this.controlDiv = ctrlDiv;\n    }\n\n    // Decodes escaped HTML entities (like &lt;) into raw characters\n    decodeHTMLEntities(str) {\n        const textarea = document.createElement(\"textarea\");\n        textarea.innerHTML = str;\n        return textarea.value;\n    }\n\n    renderMathInBlocks() {\n        if (this.language !== \"math\") return;\n        setTimeout(() => {\n            const blocks = document.querySelectorAll(`#${this.divid}-container .parsons-block`);\n            blocks.forEach(block => {\n                block.innerHTML = this.decodeHTMLEntities(block.innerHTML);\n            });\n\n            if (window.MathJax && MathJax.typesetPromise) {\n                MathJax.typesetPromise().then(() => this.simulateSolution());\n            }\n        }, 0);\n    }\n\n    /*\n        This function performs a simulated \"correct answer\" ordering using the\n        correct block indices specified in `this.blockAnswer`. It looks ahead \n        at the rendered content from the MicroParsons widget to build:\n        - this.simulatedSolution: an array of correctly ordered rendered strings\n        - this.microParsonToRaw: a Map that links rendered HTML (from MicroParsons) \n          to their original raw `<m>` source strings from PreTeXt\n\n        This is called after MathJax renders the math blocks to ensure the mapping\n        is built from the final, visible DOM state. It is needed for grading \n        math-mode Parsons problems, where rendered symbols (e.g., “\\(\\alpha\\)”) must\n        be matched against author-defined symbolic content.\n    */\n    simulateSolution() {\n        if (\n            this.simulatedSolution.length > 0 &&\n            this.microParsonToRaw instanceof Map &&\n            this.microParsonToRaw.size > 0\n        ) { // Already initialized from local storage\n            this.feedbackController.solution = this.simulatedSolution;\n            this.feedbackController.grader.solution = this.simulatedSolution;\n            return; \n        }\n\n        this.microParsonToRaw = new Map();\n\n        const allBlocks = Array.from(\n            this.outerDiv.querySelectorAll(\"micro-parsons .parsons-block\")\n        );\n        if (!this.blockAnswer || allBlocks.length === 0) return;\n\n        const rendered = this.hparsonsInput.getParsonsTextArray();\n        const raw = this.originalBlocks;\n        const correctOrder = this.blockAnswer.map(Number);\n\n        this.simulatedSolution = correctOrder.map(i => rendered[i]);\n        rendered.forEach((r, i) => this.microParsonToRaw.set(r, raw[i].trim()));\n\n        this.feedbackController.solution = this.simulatedSolution;\n        this.feedbackController.grader.solution = this.simulatedSolution;\n    }\n\n    // Return previous answers in local storage\n    //\n    localData() {\n        var data = localStorage.getItem(this.storageId);\n        if (data !== null) {\n            if (data.charAt(0) == \"{\") {\n                data = JSON.parse(data);\n            } else {\n                data = {};\n            }\n        } else {\n            data = {};\n        }\n        return data;\n    }\n    // RunestoneBase: Sent when the server has data\n    restoreAnswers(serverData) {\n        // TODO: not tested with server data yet.\n        // Server side data should be:\n        /*\n            {\n                answer: Array<string>, // list of answer block content\n                count: ?number // number of previous attempts if block-based feedback\n            }\n        */\n        if (serverData.answer) {\n            this.hparsonsInput.restoreAnswer(serverData.answer.blocks);\n        }\n        if (serverData.count) {\n            this.feedbackController.checkCount = serverData.count;\n        }\n    }\n    // RunestoneBase: Load what is in local storage\n    checkLocalStorage() {\n        if (this.graderactive) {\n            // Zihan: I think this means the component is still loading?\n            return;\n        }\n        let localData = this.localData();\n        if (localData.answer) {\n            this.hparsonsInput.restoreAnswer(localData.answer);\n        }\n        if (localData.count) {\n            this.feedbackController.checkCount = localData.count;\n        }\n        if (localData.simulatedSolution) {\n            this.simulatedSolution = localData.simulatedSolution;\n        }\n        if (localData.microParsonToRaw) {\n            this.microParsonToRaw = new Map(Object.entries(localData.microParsonToRaw));\n        } else {\n            this.microParsonToRaw = new Map();\n        }\n    }\n    // RunestoneBase: Set the state of the problem in local storage\n    setLocalStorage(data) {\n        let currentState = {};\n        if (data == undefined) {\n            let userAnswer = this.hparsonsInput.getParsonsTextArray();\n\n            // In math mode, convert microParsons to raw before caching \n            // Additionally, save the solution and microParson ➜ Raw map.\n            if (this.language === \"math\") {\n                userAnswer = userAnswer.map(sym => this.microParsonToRaw.get(sym));\n                currentState = {\n                    answer: userAnswer,\n                    simulatedSolution: this.simulatedSolution,\n                    microParsonToRaw: Object.fromEntries(this.microParsonToRaw),\n                };\n            } else {\n                currentState = {\n                    answer: userAnswer,\n                };\n            }\n            \n            if (this.isBlockGrading) {\n                // if this is block grading, add number of previous attempts too\n                currentState.count = this.feedbackController.checkCount;\n            }\n        } else {\n            currentState = data;\n        }\n        localStorage.setItem(this.storageId, JSON.stringify(currentState));\n    }\n\n    logHorizontalParsonsEvent(hparsonsEvent) {\n        let ev = {\n            event: \"hparsons\",\n            div_id: this.divid,\n            act: JSON.stringify(hparsonsEvent),\n        };\n        this.logBookEvent(ev);\n    }\n}\n\n/*=================================\n== Find the custom HTML tags and ==\n==   execute our code on them    ==\n=================================*/\n$(document).on(\"runestone:login-complete\", function () {\n    $(\"[data-component=hparsons]\").each(function () {\n        if ($(this).closest(\"[data-component=timedAssessment]\").length == 0) {\n            // If this element exists within a timed component, don't render it here\n            // try {\n            hpList[this.id] = new HParsons({\n                orig: this,\n                useRunestoneServices: eBookConfig.useRunestoneServices,\n            });\n            // } catch (err) {\n            //     console.log(`Error rendering ShortAnswer Problem ${this.id}\n            //     Details: ${err}`);\n            // }\n        }\n    });\n});\n\nif (typeof window.component_factory === \"undefined\") {\n    window.component_factory = {};\n}\nwindow.component_factory[\"hparsons\"] = function (opts) {\n    return new HParsons(opts);\n};\n","$.i18n().load({\n    en: {\n        msg_parson_check_me: \"Check\",\n        msg_parson_reset: \"Reset\",\n        msg_parson_help: \"Help me\",\n        msg_parson_too_short: \"Your answer is too short. Add more blocks.\",\n        msg_parson_drag_from_here: \"Drag from here\",\n        msg_parson_drag_to_here: \"Drop blocks here\",\n        msg_parson_correct_first_try:\n            \"Perfect!  It took you only one try to solve this.  Great job!\",\n        msg_parson_correct:\n            \"Perfect!  It took you $1 tries to solve this.  Click Reset to try to solve it in one attempt.\",\n        msg_parson_correct_runnable:\n            \"Click Run below to test out your solution.\",\n        msg_parson_wrong_indent:\n            \"This block is not indented correctly. Either indent it more by dragging it right or reduce the indention by dragging it left.\",\n        msg_parson_wrong_indents:\n            \"These blocks are not indented correctly. To indent a block more, drag it to the right. To reduce the indention, drag it to the left.\",\n        msg_parson_wrong_order:\n            \"Highlighted blocks in your answer are wrong or are in the wrong order. This can be fixed by moving, removing, or replacing highlighted blocks.\",\n        msg_parson_arrow_navigate:\n            \"Arrow keys to navigate. Space to select / deselect block to move.\",\n        msg_parson_help_info:\n            \"Click on the Help Me button if you want to make the problem easier\",\n        msg_parson_not_solution:\n            \"Disabled an unneeded code block (one that is not part of the solution).\",\n        msg_parson_provided_indent: \"Provided the indentation.\",\n        msg_parson_combined_blocks: \"Combined two code blocks into one.\",\n        msg_parson_remove_incorrect:\n            \"Will remove an incorrect code block from answer area\",\n        msg_parson_will_combine: \"Will combine two blocks\",\n        msg_parson_atleast_three_attempts:\n            \"You must make at least three distinct full attempts at a solution before you can get help\",\n        msg_parson_three_blocks_left:\n            \"There are only 3 correct blocks left.  You should be able to put them in order\",\n        msg_parson_will_provide_indent: \"Will provide indentation\",\n    },\n});\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","$","i18n","load","msg_parson_check_me","msg_parson_reset","msg_parson_help","msg_parson_too_short","msg_parson_drag_from_here","msg_parson_drag_to_here","msg_parson_correct_first_try","msg_parson_correct","msg_parson_wrong_indent","msg_parson_wrong_indents","msg_parson_wrong_order","msg_parson_arrow_navigate","msg_parson_help_info","msg_parson_not_solution","msg_parson_provided_indent","msg_parson_combined_blocks","msg_parson_remove_incorrect","msg_parson_will_combine","msg_parson_atleast_three_attempts","msg_parson_three_blocks_left","msg_parson_will_provide_indent","HParsonsFeedback","constructor","hparsons","this","percent","createOutput","console","log","runButtonHandler","customizeUI","init","clearFeedback","reset","BlockBasedGrader","problem","inverseLISIndices","arr","allSubsequences","i","length","subsequenceForCurrent","current","lastElementAdded","j","subsequent","push","longestSubsequence","longestSubsequenceLength","subs","indexes","lIndex","grade","correctLines","percentLines","state","solutionLines","solution","answerLines","answer","Math","min","max","correctLength","isCorrectOrder","solutionLength","loopLimit","calculatePercent","graderState","numLines","lines","numCorrectBlocks","BlockFeedback","messageDiv","document","createElement","outerDiv","appendChild","runButton","text","checkCount","solved","grader","solutionBlocks","blockAnswer","originalBlocks","answerArea","hparsonsInput","querySelector","checkCurrentAnswer","logCurrentAnswer","renderFeedback","act","scheme","correct","getParsonsTextArray","logData","event","div_id","divid","JSON","stringify","logBookEvent","prop","feedbackArea","addClass","fadeIn","attr","html","answerBlocks","children","inSolution","inSolutionIndexes","notInSolution","block","index","indexOf","textContent","lisIndexes","removeClass","childNodes","hide","allDburls","SQLFeedback","outDiv","output","css","clearDiv","testResult","show","bookprefix","fnprefix","eBookConfig","useRunestoneServices","window","location","search","includes","basecourse","SQLconfig","locateFile","filename","self","then","SQL","dburl","startsWith","buttonText","status","xWaitFor","done","db","dbObject","removeAttr","jQuery","Deferred","xhr","XMLHttpRequest","open","responseType","onload","uInt8Array","Uint8Array","response","Database","send","disabled","runProg","respDiv","getElementById","parentElement","removeChild","query","buildProg","executionSuccessFlag","prefix","prefixresults","executeIteratedStatements","iterateStatements","at","visualizeResults","results","input","suffix","suffixresults","unittest","autograde","passed","failed","NaN","unit_results","Promise","it","statement","columns","getColumnNames","data","step","get","values","rowcount","getNormalizedSQL","substr","toLowerCase","operation","getRowsModified","message","toString","sql","getRemainingSQL","container","resultArray","devNote","section","setAttribute","messageBox","r","tableDiv","maxHeight","createTable","rmsg","msg","op","charAt","prog","hiddenPrefix","join","hiddenSuffix","blocks","result_table","tests","split","result","filter","s","test","wlist","shift","loc","oper","expected","row","col","testOneAssert","pct","toLocaleString","undefined","maximumFractionDigits","actual","operand1","operand2","tableData","trimRows","hot","width","height","autoRowSize","autoColumnSize","useHeaders","rowHeaders","colHeaders","editor","maxRows","filters","dropdownMenu","licenseKey","actualHeight","getRowHeight","updateSettings","hpList","HParsons","opts","super","orig","find","reuse","randomize","isBlockGrading","language","containerDiv","storageId","localStorageKey","origElem","origText","saveButton","loadButton","controlDiv","processContent","microParsonToRaw","Map","simulatedSolution","feedbackController","createEditor","createControls","caption","addCaption","indicate_component_ready","checkServer","processSingleContent","slice","delimiter","content","substring","endIndex","replaceWith","addEventListener","ev","detail","type","logHorizontalParsonsEvent","props","selector","parsonsBlocks","renderMathInBlocks","querySelectorAll","forEach","el","replace","ctrlDiv","resetBtn","that","onclick","setLocalStorage","resetButton","resetInput","prepend","decodeHTMLEntities","str","textarea","innerHTML","value","setTimeout","MathJax","typesetPromise","simulateSolution","size","allBlocks","Array","from","rendered","raw","correctOrder","Number","set","trim","localData","localStorage","getItem","parse","restoreAnswers","serverData","restoreAnswer","count","checkLocalStorage","graderactive","entries","currentState","userAnswer","sym","fromEntries","setItem","hparsonsEvent","on","each","closest","component_factory","en","msg_parson_correct_runnable"],"sourceRoot":""}